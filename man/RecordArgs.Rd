% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/General_RecordArgs.R
\name{RecordArgs}
\alias{RecordArgs}
\title{Capture and record function arguments}
\usage{
RecordArgs(ExportPath = NULL)
}
\arguments{
\item{ExportPath}{Character. The path to an \code{.RData} file where the tibble
will be exported. If \code{NULL} (default), the tibble is returned without
saving. If provided, the tibble is saved to the specified file and \code{NULL}
is returned invisibly.}
}
\value{
A \code{tibble} containing the unevaluated and evaluated forms of the
parent function’s arguments. Column naming depends on whether unevaluated
and evaluated values match:
\itemize{
\item \strong{Single columns} (e.g., \code{y}): Used when unevaluated and evaluated
values are identical (e.g., scalars like \code{2} or defaults like \code{10}),
containing the evaluated value as-is.
\item \strong{Paired columns} (e.g., \code{x_orig}, \code{x_eval}):
\itemize{
\item \verb{*_orig}: Unevaluated expressions as list columns with \code{call} objects
(e.g., \code{a + b}) or scalars as-is.
\item \verb{*_eval}: Evaluated values, either scalars (e.g., \code{8}) or list columns
for complex objects (e.g., \code{lm}, \code{SpatRaster}).
}
}

If \code{ExportPath} is \code{NULL} (default), the tibble is returned. If provided,
the tibble is saved to the specified \code{.RData} file and \code{NULL} is returned
invisibly.
}
\description{
\code{RecordArgs()} is a utility function that captures and records both the
unevaluated and evaluated forms of arguments passed to a parent function. It
returns a tibble with columns reflecting argument states: when unevaluated
and evaluated values differ, columns are named with \verb{_orig} and \verb{_eval}
suffixes; when they are the same, a single column is used with the argument
name alone. The function dynamically handles scalars, call objects, and
complex objects (e.g., \code{lm} models, \code{SpatRaster} objects), preserving their
structure appropriately.
}
\details{
This function must be called from within another function. It uses
\code{sys.call(-1)} to capture the parent function’s call, evaluates arguments
in the parent environment, and combines them with default values from the
parent function’s formal arguments. Unevaluated expressions (e.g., \code{a + b})
are preserved as \code{call} objects, while evaluated values are kept as-is for
scalars or wrapped in lists for complex objects. Columns are ordered based
on the original argument sequence: single columns (for matching values)
appear first, followed by \verb{_orig} and \verb{_eval} pairs (for differing values)
in that order.
}
\examples{
a <- 5
b <- 3
Function1 <- function(w = 5, x, y, z = 10) {
  Args <- RecordArgs()
  return(Args)
}

# --------------------------------------------------------------

# Basic usage with scalars and expressions
Out1 <- Function1(x = a + b, y = 2)
Out1$w              # 5 (single column, same as orig and eval)
Out1$x_orig         # call object: a + b
Out1$x_eval         # 8
Out1$y              # 2 (single column)
Out1$z              # 10 (single column)

# --------------------------------------------------------------

#' # Usage with complex objects (lm and SpatRaster)
Out2 <- Function1(
  w = 10,
  x = a + b,
  y = stats::lm(mpg ~ disp + hp, data = mtcars),
  z = terra::rast(system.file("ex/logo.tif", package = "terra")))
Out2$w              # 10 (single column)
Out2$x_orig         # call object: a + b
Out2$x_eval         # 8
Out2$y_orig         # call object: lm(mpg ~ disp + hp, data = mtcars)
Out2$y_eval[[1]]    # lm object
Out2$z_orig         # call object: terra::rast(system.file(...))
Out2$z_eval[[1]]    # SpatRaster object

}
\author{
Ahmed El-Gabbas
}
