% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/General_Set_parallel.R
\name{Set_parallel}
\alias{Set_parallel}
\title{Set up or stop parallel processing plan}
\usage{
Set_parallel(
  NCores = 1L,
  Stop = FALSE,
  Cat = TRUE,
  Level = 0L,
  Future_maxSize = 8
)
}
\arguments{
\item{NCores}{Integer. Number of cores to use. If \code{NULL}, defaults to
sequential mode.}

\item{Stop}{Logical. If \code{TRUE}, stops any parallel cluster and resets to
sequential mode. If \code{FALSE} (default), sets up a new plan.}

\item{Cat}{Logical. If \code{TRUE} (default), logs messages via
\code{\link[=CatTime]{CatTime()}}.}

\item{Level}{Integer. The logging level for \link{CatTime}. Default is \code{0}.}

\item{Future_maxSize}{Numeric. Maximum allowed total size (in megabytes) of
global variables identified. See `` argument of \link[future:future.options]{future::future.options}
for more details}
}
\value{
Invisible \code{NULL}. On Windows with \code{NCores > 1}, the cluster object
(\code{c1}) is assigned to the parent environment and cleaned up automatically
on exit.
}
\description{
Configures parallel processing with \code{future::plan()} or stops an existing
plan. When stopping, it resets to sequential mode.
}
\examples{
\dontrun{
  # Prepare working on parallel
  IASDT.R::Set_parallel(NCores = min(NCores, nrow(Beta_DF)), Level = 3)

  if (.Platform$OS.type == "windows") {
    on.exit(try(snow::stopCluster("c1"), silent = TRUE), add = TRUE)
  }
  on.exit(future::plan("future::sequential", gc = TRUE), add = TRUE)

  # Stopping cluster
  IASDT.R::Set_parallel(Stop = TRUE, Cat = TRUE, Level = 3)
}
}
\author{
Ahmed El-Gabbas
}
