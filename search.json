[{"path":"https://biodt.github.io/IASDT.R/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Ahmed El-Gabbas, Helmholtz-Centre Environmental Research (UFZ) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_1_overview.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"IAS-pDT modelling workflow — 1. Overview","text":"document delineates workflow — currently development — modeling distribution level invasion (species richness) invasive alien plant species (IAS) across Europe. IAS prototype Digital Twin (IAS-pDT) component European BioDT project, seeks establish Digital Twin framework biodiversity Europe. detailed exposition IAS-pDT, refer Khan, El-Gabbas, et al. (2024). complete IAS-pDT workflow documented Zenodo. IAS-pDT leverages IASDT.R R package execute comprehensive workflow encompassing model fitting, post-processing, data preparation Shiny application. package facilitates preparation abiotic data (e.g., climate land cover) biotic data (.e., species distribution). Model outputs IAS-pDT made publicly available end-users stakeholders OPeNDAP cloud server, prediction maps retrievable directly R via IASDT.R package (currently development).","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_1_overview.html","id":"models","dir":"Articles","previous_headings":"","what":"Models","title":"IAS-pDT modelling workflow — 1. Overview","text":"Species distribution models constructed using Hierarchical Modelling Species Communities (HMSC) R package, hierarchical Bayesian framework incorporates spatial autocorrelation species associations. Spatial autocorrelation modeled via Gaussian Predictive Process (GPP; Tikhonov et al., 2019), offering flexible computationally efficient approach capturing spatial dependencies. Given substantial computational demands fitting spatial models European scale, utilize HMSC-HPC extension (Rahman et al., 2024) leverage GPU-based processing enhanced efficiency. Models fitted habitat level, distinct model fitted habitat type, incorporating invasive alien species (IAS) associated respective habitat type. employ habitat classification delineated Pyšek et al. (2022). fitted models eight habitat types (see table ). habitat type, predictions individual species distributions species richness generated across multiple climate scenarios; details provided abiotic data processing section. Model performance assessed using spatial block cross-validation ensure spatial independence training testing datasets.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_1_overview.html","id":"environment-variables","dir":"Articles","previous_headings":"","what":"Environment variables","title":"IAS-pDT modelling workflow — 1. Overview","text":"workflow necessitates configuration multiple environment variables ensure proper execution. Certain functions within IASDT.R package include env_file argument, defaults .env. table enumerates environment variables essential workflow, accompanied descriptions default values.  Next articles:↠2. Processing abiotic data↠3. Processing biotic data↠4. Model fitting↠5. Model post-processing","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_2_abiotic_data.html","id":"reference-grid","dir":"Articles","previous_headings":"","what":"Reference grid","title":"IAS-pDT modelling workflow — 2. abiotic data","text":"workflow employs European Environment Agency (EEA) reference grid, standardized 10×10 km resolution across study area. grid utilizes ETRS89-LAEA Europe coordinate reference system (CRS; EPSG:3035).","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_2_abiotic_data.html","id":"corine-land-cover-and-habitat-data","dir":"Articles","previous_headings":"","what":"Corine land cover and habitat data","title":"IAS-pDT modelling workflow — 2. abiotic data","text":"CLC_process() function manages processing Corine Land Cover (CLC) data within IAS-pDT workflow. computes percentage coverage predominant classes per grid cell across three CLC levels, alongside EUNIS SynHab habitat classifications. custom crosswalk used transform CLC Level 3 data ecologically meaningful EUNIS SynHab habitat classes. resulting data serve following purposes: model grid selection: Grid cells least 15% land cover (default threshold) retained modelling. excluding grid cells zero coverage relevant habitat type model fitting. serving potential predictor variable models.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_2_abiotic_data.html","id":"biogeographical-regions","dir":"Articles","previous_headings":"","what":"Biogeographical regions","title":"IAS-pDT modelling workflow — 2. abiotic data","text":"bioreg_process() function retrieves processes biogeographical regions dataset EEA. extracts names biogeographical regions corresponding reference grid cell, enabling quantification species presence across regions.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_2_abiotic_data.html","id":"chelsa-climate-data","dir":"Articles","previous_headings":"","what":"CHELSA climate data","title":"IAS-pDT modelling workflow — 2. abiotic data","text":"CHELSA_process() function manages retrieval processing CHELSA (Climatologies High Resolution Earth’s Land Surface Areas) climate data study area across multiple climate scenarios. CHELSA delivers high-resolution global datasets encompassing range environmental variables current conditions future projections. processed data integrated species distribution models predictor variables. environmental variable, dataset encompasses 45 future scenarios, derived combination five CMIP6 climate models, three Shared Socioeconomic Pathways (SSPs), three future time periods (refer CHELSA technical specifications details). Additionally, future climate model outputs aggregated generate ensemble predictions SSP time period combination.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_2_abiotic_data.html","id":"railways-and-roads-intensity","dir":"Articles","previous_headings":"","what":"Railways and roads intensity","title":"IAS-pDT modelling workflow — 2. abiotic data","text":"railway_intensity() road_intensity() functions retrieve process railway data (sourced OpenRailwayMap) road data (sourced Global Roads Inventory Project; GRIP), respectively, study area. Road intensity reflects site accessibility, habitat disturbance levels, IAS dispersal potential, railway density serves proxy IAS dispersal routes. summed lengths railways roads per grid cell, transformed logarithmic scale (log10), incorporated models predictor variables.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_2_abiotic_data.html","id":"river-length","dir":"Articles","previous_headings":"","what":"River length","title":"IAS-pDT modelling workflow — 2. abiotic data","text":"river_length() function processes data EU-Hydro River Network Database compute river lengths categorized Strahler order grid cell. Strahler order, hierarchical classification river networks, assigns higher numbers larger, significant river segments. grid cell, function calculates cumulative length rivers given Strahler order (e.g., Strahler 5, includes rivers Strahler values 5 greater). total river length per grid cell Strahler order 5 , transformed logarithmic scale (log10), serves potential predictor variable species distribution models.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_2_abiotic_data.html","id":"sampling-efforts","dir":"Articles","previous_headings":"","what":"Sampling efforts","title":"IAS-pDT modelling workflow — 2. abiotic data","text":"address opportunistic bias inherent presence-data, total number vascular plant observations per grid cell Global Biodiversity Information Facility (GBIF) employed proxy sampling effort. efforts_process() function manages request, retrieval, processing sampling effort data, encompassing 260 million occurrences March 2025. Beyond total observations, function also determines number vascular plant species per grid cell. processed data support two primary applications: grid cell filtering: number species per grid cell enables optional filtering exclude areas insufficient sampling effort (e.g., grid cells fewer 100 observed vascular plant species excluded). sampling bias correction: total number observations per grid cell, logarithmic scale (log10), incorporated predictor variable models account sampling bias. mitigate bias predictions, predictor fixed constant value representing optimal sampling effort across study area, detailed Warton et al. (2013). Previous articles:↠1. OverviewNext articles:↠3. Processing biotic data↠4. Model fitting↠5. Model post-processing","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_3_biotic_data.html","id":"ias-species-list","dir":"Articles","previous_headings":"","what":"IAS species list","title":"IAS-pDT modelling workflow — 3. biotic data","text":"recent checklist naturalized terrestrial alien plant species non-European origin retrieved FloraVeg.EU. checklist standardized GBIF taxonomic backbone ensure taxonomic consistency, resulting total 1,338 species. table summarizes species count taxonomic class order. Occurrence data species compiled available sources detailed subsequent sections.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_3_biotic_data.html","id":"gbif","dir":"Articles","previous_headings":"","what":"GBIF","title":"IAS-pDT modelling workflow — 3. biotic data","text":"GBIF_process() function manages retrieval, processing, visualization current occurrence data invasive alien species (IAS) Global Biodiversity Information Facility (GBIF), totaling approximately 9.4 million occurrences March 2025. Occurrences deemed doubtful exhibiting high spatial uncertainty excluded ensure data quality. Additionally, function calculates number observations occupied grid cells per species. primary output consists gridded distribution maps species, delineating presence-data across reference grid.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_3_biotic_data.html","id":"easin","dir":"Articles","previous_headings":"","what":"EASIN","title":"IAS-pDT modelling workflow — 3. biotic data","text":"European Alien Species Information Network (EASIN) serves web-based platform providing spatial data approximately 14,000 alien species. EASIN_process() function oversees processing visualization latest IAS occurrence data sourced EASIN. checklist vascular plants EASIN’s database retrieved via API standardized GBIF taxonomic backbone. Occurrence data taxa corresponding IAS checklist subsequently downloaded API. 34 partner organizations contributing EASIN (including GBIF), non-GBIF data incorporated models avoid redundancy. Following processing spatial filtering, dataset includes 420,000 observations 466 IAS March 2025. Consistent GBIF output, function generates gridded distribution maps species.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_3_biotic_data.html","id":"elter","dir":"Articles","previous_headings":"","what":"eLTER","title":"IAS-pDT modelling workflow — 3. biotic data","text":"Integrated European Long-Term Ecosystem, Critical Zone, Socio-Ecological Research Infrastructure (eLTER) comprises network sites dedicated collecting ecological data long-term research across European Union. Data 137 eLTER sites, encompassing 5,265 observations 110 invasive alien species (IAS), processed (eLTER_process()) standardized ensure consistency biotic datasets IAS-pDT workflow.","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_3_biotic_data.html","id":"species-distribution","dir":"Articles","previous_headings":"","what":"Species distribution","title":"IAS-pDT modelling workflow — 3. biotic data","text":"IAS_process() function integrates visualizes species distribution data sourced GBIF, EASIN, eLTER. combines pre-processed datasets generates presence-absence rasters use species distribution models. Previous articles:↠1. Overview↠2. Processing abiotic dataNext articles:↠4. Model fitting↠5. Model post-processing","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_4_model_fitting.html","id":"model-input-data","dir":"Articles","previous_headings":"","what":"Model input data","title":"IAS-pDT modelling workflow — 4. Model fitting","text":"primary function preparing model-fitting data initializing models mod_prepare_HPC(). structures data habitat-specific model distinct directories (e.g., datasets/processed/model_fitting/HabX, X represents habitat type). function orchestrates suite specialized sub-functions perform following tasks:  mod_prepare_data(): prepare input data modeling, key arguments including:  mod_CV_prepare(): prepare visualize options spatial-block cross-validation. CV_Dist strategy, block size governed CV_n_grids argument, whereas CV_Large strategy, study area partitioned larger blocks based CV_n_rows CV_n_columns arguments.  prepare_knots(): prepare visualize knot locations Gaussian Predictive Process (GPP) models, described Tikhonov et al. (2019).  mod_SLURM(): generate SLURM scripts facilitate model fitting GPUs using Hmsc-HPC extension.  arguments: selection predictors:  model fitting options  n_species_per_grid: minimum number IAS per grid cell grid cell included analysis model_country: fit model specific country countries whether use phylogenetic trees: use_phylo_tree no_phylo_tree path_Hmsc: directory path Hmsc-HPC extension installation SLURM_prepare: whether prepare SLURM script model fitting GPU via mod_SLURM()","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_4_model_fitting.html","id":"model-fitting-on-gpus","dir":"Articles","previous_headings":"","what":"Model fitting on GPUs","title":"IAS-pDT modelling workflow — 4. Model fitting","text":"Following preparation model input data initialization models, subsequent phase involves fitting models GPUs. habitat type, mod_prepare_HPC() function produces: python commands (Commands2Fit.txt) fitting model chains across model variants GPUs, line corresponding single chain.  one SLURM script files (Bash_Fit.slurm) designed submit model-fitting commands (Commands2Fit.txt) batch jobs high-performance computing (HPC) system.   Batch jobs model fitting can submitted using sbatch command, example: Previous articles:↠1. Overview↠2. Processing abiotic data↠3. Processing biotic dataNext articles:↠5. Model post-processing","code":"python3 -m hmsc.run_gibbs_sampler --input datasets/processed/model_fitting/Mod_Riv_Hab1/InitMod4HPC/InitMod_GPP120_Tree_samp1000_th200.rds --output datasets/processed/model_fitting/Mod_Riv_Hab1/Model_Fitting_HPC/GPP120_Tree_samp1000_th200_Chain1_post.rds --samples 1000 --transient 100000 --thin 200 --verbose 200 --chain 0 --fp 64 >& datasets/processed/model_fitting/Mod_Riv_Hab1/Model_Fitting_HPC/GPP120_Tree_samp1000_th200_Chain1_Progress.txt python3 -m hmsc.run_gibbs_sampler --input datasets/processed/model_fitting/Mod_Riv_Hab1/InitMod4HPC/InitMod_GPP120_Tree_samp1000_th200.rds --output datasets/processed/model_fitting/Mod_Riv_Hab1/Model_Fitting_HPC/GPP120_Tree_samp1000_th200_Chain2_post.rds --samples 1000 --transient 100000 --thin 200 --verbose 200 --chain 1 --fp 64 >& datasets/processed/model_fitting/Mod_Riv_Hab1/Model_Fitting_HPC/GPP120_Tree_samp1000_th200_Chain2_Progress.txt #!/bin/bash  # ----------------------------------------------------------- # Job array configuration # ----------------------------------------------------------- #SBATCH --job-name=Hab1 #SBATCH --ntasks=1 #SBATCH --output=datasets/processed/model_fitting/Mod_Riv_Hab1/Model_Fitting_HPC/JobsLog/%x-%A-%a.out #SBATCH --error=datasets/processed/model_fitting/Mod_Riv_Hab1/Model_Fitting_HPC/JobsLog/%x-%A-%a.out #SBATCH --account=project_465001588 #SBATCH --cpus-per-task=1 #SBATCH --gpus-per-node=1 #SBATCH --time=3-00:00:00 #SBATCH --partition=small-g #SBATCH --array=1-30  # ----------------------------------------------------------- # Job info # ----------------------------------------------------------- echo \"Start time = $(date)\" echo \"Submitting directory = \"$SLURM_SUBMIT_DIR echo \"working directory = \"$PWD echo \"Project name = \"$SLURM_JOB_ACCOUNT echo \"Job id = \"$SLURM_JOB_ID echo \"Job name = \"$SLURM_JOB_NAME echo \"memory per CPU = \"$SLURM_MEM_PER_CPU echo \"The GPU IDs of GPUs in the job allocation (if any) = \"$SLURM_JOB_GPUS echo \"Node running the job script = \"$SLURMD_NODENAME echo \"Process ID of the process started for the task = \"$SLURM_TASK_PID echo \"Dependency = \"$SLURM_JOB_DEPENDENCY echo \"Number of nodes assigned to a job = \"$SLURM_NNODES echo \"Number of tasks requested by the job = \"$SLURM_NTASKS echo \"Number of cpus per task = \"$SLURM_CPUS_PER_TASK echo \"Number of tasks in the array = \"$SLURM_ARRAY_TASK_COUNT echo \"Array's maximum ID (index) number = \"$SLURM_ARRAY_TASK_MIN echo \"Array's minimum ID (index) number = \"$SLURM_ARRAY_TASK_MAX  # ----------------------------------------------------------- # File contains bash commands for model fitting # ----------------------------------------------------------- File=datasets/processed/model_fitting/Mod_Riv_Hab1/Commands2Fit.txt  # ----------------------------------------------------------- # Loading Hmsc-HPC # ----------------------------------------------------------- source /pfs/lustrep4/scratch/project_465001857/elgabbas/Hmsc_simplify_io/setup-env.sh  # ----------------------------------------------------------- # Check GPU # ----------------------------------------------------------- export TF_CPP_MIN_LOG_LEVEL=3 PythonCheckGPU=references/LUMI_Check_GPU.py  # ----------------------------------------------------------- # Some checking # ----------------------------------------------------------- Path_Python=$(which python3) echo -e \"Some Checking:\\n  >>  Working directory: $PWD\\n  >>  Python path:       $Path_Python\\n  >>  Checking GPU:      $(python3 $PythonCheckGPU)\\n\"  # ----------------------------------------------------------- # Run array job # ----------------------------------------------------------- head -n $SLURM_ARRAY_TASK_ID $File | tail -n 1 | bash  echo \"End of program at `date`\"   # ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| # ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| # This script was created on: 2025-02-13 19:43 CET # ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| # ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| sbatch datasets/processed/model_fitting/Hab1/Bash_Fit.slurm"},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_5_model_postprocess.html","id":"step-1-cpu","dir":"Articles","previous_headings":"","what":"Step 1: CPU","title":"IAS-pDT modelling workflow — 5. Model post-processing","text":"mod_postprocess_1_CPU() function initiates post-processing phase habitat type, automating following tasks:","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_5_model_postprocess.html","id":"computationally-intensive-tasks-that-are-offloaded-to-gpu","dir":"Articles","previous_headings":"Step 1: CPU","what":"Computationally intensive tasks that are offloaded to GPU","title":"IAS-pDT modelling workflow — 5. Model post-processing","text":"Previous attempts prepare response curve data, predict new sites, compute variance partitioning using R CPUs (UFZ Windows server LUMI HPC) hindered memory limitations. Consequently, tasks offloaded GPU-based computations using Python TensorFlow. mod_postprocess_1_CPU() function invokes following sub-functions generate commands GPU execution:","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_5_model_postprocess.html","id":"prepare-commands-for-gpu-computations","dir":"Articles","previous_headings":"Step 1: CPU","what":"Prepare commands for GPU computations","title":"IAS-pDT modelling workflow — 5. Model post-processing","text":"Predicting latent factors: Latent factor predictions response curves new sampling units executed via TensorFlow script located inst/crossprod_solve.py. tasks, respective R functions export numerous .qs2 .feather data files TEMP_Pred subdirectory, essential GPU computations. also generate execution commands saved LF_RC_Commands_.txt (response curves) LF_NewSites_Commands_.txt (new sites).   resp_curv_prepare_data() extends Hmsc::constructGradient() Hmsc::plotGradient(), enabling GPU-based response curve data preparation LF_commands_only = TRUE. predict mean coordinates (per coordinates argument Hmsc::constructGradient()), latent factor predictions—typically memory-intensive Hmsc::predictLatentFactor()—computed GPUs. predict_maps() prepares GPU computations new site predictions LF_only = TRUE LF_commands_only = TRUE.  Computing variance partitioning: Variance partitioning computations GPUs executed using TensorFlow scripts inst/VP_geta.py, inst/VP_getf.py, inst/VP_gemu.py. functionality scripts taken Hmsc::computeVariancePartitioning() (see geta, getf, gemu internal functions identified inside computeVariancePartitioning R function). variance_partitioning_compute() exports required files TEMP_VP subdirectory, including numerous .qs2 .feather files, generates execution commands saved VP_A_Command.txt, VP_F_Command.txt, VP_mu_Command.txt.","code":"python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch001.feather --path_out RC_c_etaPred_ch001.feather --denom 1200000 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch001.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch002.feather --path_out RC_c_etaPred_ch002.feather --denom 1188081 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch002.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch003.feather --path_out RC_c_etaPred_ch003.feather --denom 1176162 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch003.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch004.feather --path_out RC_c_etaPred_ch004.feather --denom 1164242 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch004.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch005.feather --path_out RC_c_etaPred_ch005.feather --denom 1200000 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch005.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch006.feather --path_out RC_c_etaPred_ch006.feather --denom 413333 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch006.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch007.feather --path_out RC_c_etaPred_ch007.feather --denom 1188081 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch007.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch008.feather --path_out RC_c_etaPred_ch008.feather --denom 425253 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch008.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch009.feather --path_out RC_c_etaPred_ch009.feather --denom 1176162 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch009.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch010.feather --path_out RC_c_etaPred_ch010.feather --denom 437172 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch010.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch011.feather --path_out RC_c_etaPred_ch011.feather --denom 1200000 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch011.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch012.feather --path_out RC_c_etaPred_ch012.feather --denom 401414 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch012.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch013.feather --path_out RC_c_etaPred_ch013.feather --denom 1164242 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch013.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch014.feather --path_out RC_c_etaPred_ch014.feather --denom 449091 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch014.log 2>&1 python3 crossprod_solve.py --s1 RC_c_s1.feather --s2 RC_c_s2.feather --post_eta RC_c_postEta_ch015.feather --path_out RC_c_etaPred_ch015.feather --denom 1152323 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> RC_c_etaPred_ch015.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch001.feather --path_out LF_3_Test_etaPred_ch001.feather --denom 225758 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch001.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch002.feather --path_out LF_3_Test_etaPred_ch002.feather --denom 211111 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch002.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch003.feather --path_out LF_3_Test_etaPred_ch003.feather --denom 240404 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch003.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch004.feather --path_out LF_3_Test_etaPred_ch004.feather --denom 196465 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch004.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch005.feather --path_out LF_3_Test_etaPred_ch005.feather --denom 196465 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch005.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch006.feather --path_out LF_3_Test_etaPred_ch006.feather --denom 211111 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch006.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch007.feather --path_out LF_3_Test_etaPred_ch007.feather --denom 225758 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch007.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch008.feather --path_out LF_3_Test_etaPred_ch008.feather --denom 181818 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch008.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch009.feather --path_out LF_3_Test_etaPred_ch009.feather --denom 255051 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch009.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch010.feather --path_out LF_3_Test_etaPred_ch010.feather --denom 240404 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch010.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch011.feather --path_out LF_3_Test_etaPred_ch011.feather --denom 167172 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch011.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch012.feather --path_out LF_3_Test_etaPred_ch012.feather --denom 269697 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch012.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch013.feather --path_out LF_3_Test_etaPred_ch013.feather --denom 255051 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch013.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch014.feather --path_out LF_3_Test_etaPred_ch014.feather --denom 269697 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch014.log 2>&1 python3 crossprod_solve.py --s1 LF_3_Test_s1.feather --s2 LF_3_Test_s2.feather --post_eta LF_3_Test_postEta_ch015.feather --path_out LF_3_Test_etaPred_ch015.feather --denom 181818 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> LF_3_Test_etaPred_ch015.log 2>&1"},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_5_model_postprocess.html","id":"combining-commands-for-gpu-computations","dir":"Articles","previous_headings":"Step 1: CPU","what":"Combining commands for GPU computations","title":"IAS-pDT modelling workflow — 5. Model post-processing","text":"executing mod_postprocess_1_CPU() habitat types, mod_prepare_TF() function consolidates batch scripts GPU computations across habitat types: aggregates script files containing commands response curves latent factor predictions, splitting multiple scripts (TF_Chunk_*.txt) batch processing, generates SLURM script (LF_SLURM.slurm) latent factor predictions.   consolidates variance partitioning command files single VP_Commands.txt prepares SLURM script (VP_SLURM.slurm) variance partitioning computations.","code":"#!/bin/bash  # Load TensorFlow module and configure environment ml use /appl/local/csc/modulefiles ml tensorflow export TF_CPP_MIN_LOG_LEVEL=3 export TF_ENABLE_ONEDNN_OPTS=0  # Verify GPU availability python3 -c \"import tensorflow as tf; print(\\\"Num GPUs Available:\\\", len(tf.config.list_physical_devices(\\\"GPU\\\")))\"  # 20 commands to be executed: python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch001.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch001.feather' --denom 50000 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch001.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch002.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch002.feather' --denom 1470707 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch002.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch003.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch003.feather' --denom 1485354 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch003.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch004.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch004.feather' --denom 1456061 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch004.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch005.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch005.feather' --denom 1500000 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch005.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch006.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch006.feather' --denom 1500000 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch006.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch007.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch007.feather' --denom 1426768 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch007.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch008.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch008.feather' --denom 1470707 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch008.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch009.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch009.feather' --denom 1485354 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch009.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch010.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch010.feather' --denom 1456061 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch010.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch011.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch011.feather' --denom 1470707 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch011.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch012.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch012.feather' --denom 1412121 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch012.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch013.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch013.feather' --denom 1426768 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch013.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch014.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch014.feather' --denom 1426768 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch014.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch015.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch015.feather' --denom 1441414 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch015.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch016.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch016.feather' --denom 1456061 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch016.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch017.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch017.feather' --denom 1441414 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch017.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch018.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch018.feather' --denom 1382828 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch018.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch019.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch019.feather' --denom 1485354 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch019.log 2>&1 python3 crossprod_solve.py --s1 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s1.feather' --s2 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_s2.feather' --post_eta 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_postEta_ch020.feather' --path_out 'datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch020.feather' --denom 1368182 --chunk_size 1000 --threshold_mb 2000 --solve_chunk_size 50 --verbose  >> datasets/processed/model_fitting/Mod_Riv_Hab1/TEMP_Pred/LF_1_Test_etaPred_ch020.log 2>&1 #!/bin/bash #SBATCH --job-name=PP_LF #SBATCH --ntasks=1 #SBATCH --ntasks-per-node=1 #SBATCH --account=project_465001588 #SBATCH --cpus-per-task=1 #SBATCH --gpus-per-node=1 #SBATCH --time=01:00:00 #SBATCH --partition=small-g #SBATCH --output=datasets/processed/model_fitting/TMP/%x-%A-%a.out #SBATCH --error=datasets/processed/model_fitting/TMP/%x-%A-%a.out #SBATCH --array=1-186  # Define directories OutputDir=\"datasets/processed/model_fitting/TF_BatchFiles\"  # Find all the split files and sort them explicitly SplitFiles=($(find \"$OutputDir\" -type f -name \"TF_Chunk_*.txt\" | sort -V))  # Check if files were found if [ ${#SplitFiles[@]} -eq 0 ]; then     echo \"Error: No files matching TF_Chunk_*.txt found in $OutputDir\"     exit 1 fi  # Ensure no more than `, NumFiles, ` files are processed MaxFiles=186 if [ ${#SplitFiles[@]} -gt $MaxFiles ]; then     SplitFiles=(\"${SplitFiles[@]:0:$MaxFiles}\")     echo \"More than $MaxFiles files found, limiting to the first $MaxFiles files.\" fi  # Get the index of the current task based on SLURM_ARRAY_TASK_ID TaskIndex=$((SLURM_ARRAY_TASK_ID - 1))  # Validate TaskIndex if [ $TaskIndex -ge ${#SplitFiles[@]} ] || [ $TaskIndex -lt 0 ]; then     echo \"Error: TaskIndex $TaskIndex is out of range. Valid range: 0 to $((${#SplitFiles[@]} - 1))\"     exit 1 fi  # Get the specific split file to process based on the job array task ID SplitFile=\"${SplitFiles[$TaskIndex]}\"  # Verify the selected split file if [ -z \"$SplitFile\" ] || [ ! -f \"$SplitFile\" ]; then     echo \"Error: File $SplitFile does not exist or is invalid.\"     exit 1 fi  # Processing file echo \"Processing file: $SplitFile\"  # Run the selected split file bash \"$SplitFile\"  echo End of program at `date` python3 VP_gemu.py --tr datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_Tr.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_Mu.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_Mu.log 2>&1 python3 VP_gemu.py --tr datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_Tr.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_Mu.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_Mu.log 2>&1 python3 VP_gemu.py --tr datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_Tr.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_Mu.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_Mu.log 2>&1 python3 VP_gemu.py --tr datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_Tr.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_Mu.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_Mu.log 2>&1 python3 VP_gemu.py --tr datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_Tr.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_Mu.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_Mu.log 2>&1 python3 VP_gemu.py --tr datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_Tr.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_Mu.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_Mu.log 2>&1 python3 VP_gemu.py --tr datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_Tr.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_Mu.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_Mu.log 2>&1 python3 VP_gemu.py --tr datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_Tr.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_Mu.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_Mu.log 2>&1 python3 VP_geta.py --tr datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_Tr.feather --x datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_X.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_A.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_A.log 2>&1 python3 VP_geta.py --tr datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_Tr.feather --x datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_X.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_A.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_A.log 2>&1 python3 VP_geta.py --tr datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_Tr.feather --x datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_X.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_A.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_A.log 2>&1 python3 VP_geta.py --tr datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_Tr.feather --x datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_X.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_A.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_A.log 2>&1 python3 VP_geta.py --tr datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_Tr.feather --x datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_X.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_A.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_A.log 2>&1 python3 VP_geta.py --tr datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_Tr.feather --x datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_X.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_A.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_A.log 2>&1 python3 VP_geta.py --tr datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_Tr.feather --x datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_X.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_A.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_A.log 2>&1 python3 VP_geta.py --tr datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_Tr.feather --x datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_X.feather --gamma datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_Gamma.feather --output datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_A.feather --ncores 3 --chunk_size 50 >> datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_A.log 2>&1 python3 VP_getf.py --x datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_X.feather --beta_dir datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP --output datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_F.feather --ncores 3 >> datasets/processed/model_fitting/Mod_Q_Hab1/TEMP_VP/VP_F.log 2>&1 python3 VP_getf.py --x datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_X.feather --beta_dir datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP --output datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_F.feather --ncores 3 >> datasets/processed/model_fitting/Mod_Q_Hab2/TEMP_VP/VP_F.log 2>&1 python3 VP_getf.py --x datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_X.feather --beta_dir datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP --output datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_F.feather --ncores 3 >> datasets/processed/model_fitting/Mod_Q_Hab3/TEMP_VP/VP_F.log 2>&1 python3 VP_getf.py --x datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_X.feather --beta_dir datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP --output datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_F.feather --ncores 3 >> datasets/processed/model_fitting/Mod_Q_Hab4a/TEMP_VP/VP_F.log 2>&1 python3 VP_getf.py --x datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_X.feather --beta_dir datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP --output datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_F.feather --ncores 3 >> datasets/processed/model_fitting/Mod_Q_Hab4b/TEMP_VP/VP_F.log 2>&1 python3 VP_getf.py --x datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_X.feather --beta_dir datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP --output datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_F.feather --ncores 3 >> datasets/processed/model_fitting/Mod_Q_Hab10/TEMP_VP/VP_F.log 2>&1 python3 VP_getf.py --x datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_X.feather --beta_dir datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP --output datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_F.feather --ncores 3 >> datasets/processed/model_fitting/Mod_Q_Hab12a/TEMP_VP/VP_F.log 2>&1 python3 VP_getf.py --x datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_X.feather --beta_dir datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP --output datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_F.feather --ncores 3 >> datasets/processed/model_fitting/Mod_Q_Hab12b/TEMP_VP/VP_F.log 2>&1 #!/bin/bash #SBATCH --job-name=VP_TF #SBATCH --ntasks=1 #SBATCH --ntasks-per-node=1 #SBATCH --account=project_465001588 #SBATCH --cpus-per-task=1 #SBATCH --gpus-per-node=1 #SBATCH --time=01:30:00 #SBATCH --partition=small-g #SBATCH --output=datasets/processed/model_fitting/Mod_Q_Hab_TF/log/%x-%A-%a.out #SBATCH --error=datasets/processed/model_fitting/Mod_Q_Hab_TF/log/%x-%A-%a.out #SBATCH --array=1-24  # File containing commands to be executed File=datasets/processed/model_fitting/Mod_Q_Hab_TF/VP_Commands.txt  # Load TensorFlow module and configure environment ml use /appl/local/csc/modulefiles ml tensorflow export TF_CPP_MIN_LOG_LEVEL=3 export TF_ENABLE_ONEDNN_OPTS=0  # Verify GPU availability python3 -c \"import tensorflow as tf; print(\\\"Num GPUs Available:\\\", len(tf.config.list_physical_devices(\\\"GPU\\\")))\"  # Run array job head -n $SLURM_ARRAY_TASK_ID $File | tail -n 1 | bash  echo End of program at `date`"},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_5_model_postprocess.html","id":"step-2-gpu","dir":"Articles","previous_headings":"","what":"Step 2: GPU","title":"IAS-pDT modelling workflow — 5. Model post-processing","text":"Latent factor predictions variance partitioning computed GPUs. Batch jobs can submitted using sbatch command: Cross-validated models fitted submitting corresponding SLURM commands (preparation):","code":"sbatch datasets/processed/model_fitting/Mod_Q_Hab_TF/VP_SLURM.slurm sbatch datasets/processed/model_fitting/Mod_Q_Hab_TF/LF_SLURM.slurm source datasets/processed/model_fitting/HabX/Model_Fitting_CV/CV_Bash_Fit.slurm"},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_5_model_postprocess.html","id":"step-3-cpu","dir":"Articles","previous_headings":"","what":"Step 3: CPU","title":"IAS-pDT modelling workflow — 5. Model post-processing","text":"mod_postprocess_2_CPU() function advances post-processing pipeline HMSC models CPU, automating following tasks:","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_5_model_postprocess.html","id":"step-4-gpu","dir":"Articles","previous_headings":"","what":"Step 4: GPU","title":"IAS-pDT modelling workflow — 5. Model post-processing","text":"Predicting latent factors cross-validated models GPUs (preparation).","code":""},{"path":"https://biodt.github.io/IASDT.R/articles/workflow_5_model_postprocess.html","id":"step-5-cpu","dir":"Articles","previous_headings":"","what":"Step 5: CPU","title":"IAS-pDT modelling workflow — 5. Model post-processing","text":"Evaluating performance cross-validated models (preparation). Previous articles:↠1. Overview↠2. Processing abiotic data↠3. Processing biotic data↠4. Model fitting","code":""},{"path":"https://biodt.github.io/IASDT.R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ahmed El-Gabbas. Author, maintainer.","code":""},{"path":"https://biodt.github.io/IASDT.R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"El-Gabbas (2025). IASDT.R: Modelling distribution invasive alien plant species Europe. doi:10.5281/zenodo.14834384, R package version 0.1.04, https://github.com/BioDT/IASDT.R.","code":"@Manual{,   title = {IASDT.R: Modelling the distribution of invasive alien plant species in Europe},   author = {Ahmed El-Gabbas},   year = {2025},   note = {R package version 0.1.04},   doi = {10.5281/zenodo.14834384},   url = {https://github.com/BioDT/IASDT.R}, }"},{"path":[]},{"path":"https://biodt.github.io/IASDT.R/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"IASDT.R","text":"IASDT.R supports invasive alien species (IAS) prototype Digital Twin (IAS-pDT), part EU-funded BioDT project. R package provides functions processing input data (biotic abiotic) modeling distribution invasive alien plant species across Europe using joint species distribution models. end project, planned package enable end users access model outputs (e.g., prediction maps) directly R. information BioDT project can found link. overview IAS-pDT, see Khan, El-Gabbas, et al. . Documentation package functions can found . Click workflow IAS-pDT.","code":""},{"path":"https://biodt.github.io/IASDT.R/index.html","id":"installing-the-package","dir":"","previous_headings":"","what":"Installing the package","title":"IASDT.R","text":"IASDT.R package currently development. install -recent development version package, use following command: update package, use: using renv, update package :","code":"remotes::install_github(repo = \"BioDT/IASDT.R\", dependencies = TRUE) remotes::update_packages(\"IASDT.R\", dependencies = TRUE) renv::update(\"IASDT.R\", prompt = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/index.html","id":"contribute-to-the-package","dir":"","previous_headings":"","what":"Contribute to the package","title":"IASDT.R","text":"Contributions, suggestions, bug reports welcome. Please make changes new branch submit pull request make issue . questions, please get touch ahmed.el-gabbas[]ufz[dot]de","code":""},{"path":"https://biodt.github.io/IASDT.R/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"IASDT.R","text":"use IASDT.R package, please cite : El-Gabbas, . (2025). IASDT.R: Modelling distribution invasive alien plant species Europe. 10.5281/zenodo.14834384, R package version 0.1.03; https://github.com/BioDT/IASDT.R; https://biodt.eu. Last update: 2025-04-23","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Apply_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function over a list or vector with optional silence — apply_functions","title":"Apply a function over a list or vector with optional silence — apply_functions","text":"Wrapper functions around base base::lapply base::sapply functions allow application function list vector. extends original functions providing option suppress output, effectively allowing operations user may care return value (e.g., plotting). behaviour similar purrr::walk function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Apply_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function over a list or vector with optional silence — apply_functions","text":"","code":"lapply_(X, FUN, Silent = TRUE, ...)  sapply_(X, FUN, simplify = TRUE, Silent = TRUE, ...)"},{"path":"https://biodt.github.io/IASDT.R/reference/Apply_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function over a list or vector with optional silence — apply_functions","text":"X vector (atomic list) expression     object.  objects (including classed objects) coerced     base::.list. FUN function applied element X:     see ‘Details’.  case functions like     +, %*%, function name must backquoted quoted. Silent Logical; TRUE, function returns invisible(NULL) instead actual result, effectively suppressing output. enhances base base::sapply cases return value necessary output undesired. ... Additional arguments passed FUN. simplify logical character string; result     simplified vector, matrix higher dimensional array     possible?  sapply must named abbreviated.     default value, TRUE, returns vector matrix appropriate,     whereas simplify = \"array\" result may     array “rank”     (\\(=\\)length(dim(.))) one higher result     FUN(X[[]]).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Apply_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function over a list or vector with optional silence — apply_functions","text":"Silent TRUE, returns NULL invisibly, otherwise returns list length X, element result applying FUN corresponding element X.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Apply_functions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a function over a list or vector with optional silence — apply_functions","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Apply_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function over a list or vector with optional silence — apply_functions","text":"","code":"par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1)) lapply(list(x = 100:110, y = 110:120), function(V) {     plot(V, las = 1, main = \"lapply\") })  #> $x #> NULL #>  #> $y #> NULL #>   # -------------------------------------------  par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1)) lapply_(list(x = 100:110, y = 110:120), function(V) {     plot(V, las = 1, main = \"lapply_\") })   # -------------------------------------------  #' par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1)) sapply(     list(x = 100:110, y = 110:120),     function(V) {         plot(V, las = 1, main = \"sapply\")         })  #> $x #> NULL #>  #> $y #> NULL #>   # -------------------------------------------  # nothing returned or printed, only the plotting par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1)) sapply_(   list(x = 100:110, y = 110:120),   function(V) {     plot(V, las = 1, main = \"sapply_\")     })"},{"path":"https://biodt.github.io/IASDT.R/reference/BioReg_Process.html","id":null,"dir":"Reference","previous_headings":"","what":"Process biogeographical regions dataset — bioreg_process","title":"Process biogeographical regions dataset — bioreg_process","text":"Downloads processes Biogeographical Regions dataset (Europe 2016, v1) European Environment Agency. function extracts biogeographical region names per reference grid cell use counting species presence across biogeographical regions.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/BioReg_Process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process biogeographical regions dataset — bioreg_process","text":"","code":"bioreg_process(env_file = \".env\")"},{"path":"https://biodt.github.io/IASDT.R/reference/BioReg_Process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process biogeographical regions dataset — bioreg_process","text":"env_file Character. Path environment file containing paths data sources. Defaults .env.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/BioReg_Process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process biogeographical regions dataset — bioreg_process","text":"Invisible NULL. Processed data saved disk raster, vector, RData files.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/BioReg_Process.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process biogeographical regions dataset — bioreg_process","text":"Temporal coverage: 2011-2015 Spatial coverage: 28°E 81°E, 31.27°W 62°E CRS: EPSG:3035 file format: shapefile (compressed zip file) Requirements: curl (download) unzip (extraction)","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/BioReg_Process.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process biogeographical regions dataset — bioreg_process","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process CHELSA Climate Data for the IAS-pDT — CHELSA_data","title":"Process CHELSA Climate Data for the IAS-pDT — CHELSA_data","text":"Downloads, processes, projects CHELSA climate data European scale Invasive Alien Species prototype Digital Twin (IAS-pDT). Supports multiple climate scenarios, outputting data TIFF NetCDF formats. Orchestrated CHELSA_process(), helper functions CHELSA_prepare() CHELSA_project().","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process CHELSA Climate Data for the IAS-pDT — CHELSA_data","text":"","code":"CHELSA_process(   env_file = \".env\",   n_cores = 8L,   download = FALSE,   overwrite = FALSE,   download_attempts = 10L,   sleep = 5L,   other_variables = \"npp\",   download_n_cores = 4,   compression_level = 5,   overwrite_processed = FALSE )  CHELSA_prepare(   env_file = \".env\",   download = FALSE,   n_cores = 8L,   overwrite = FALSE,   download_attempts = 10L,   sleep = 5L,   other_variables = \"npp\" )  CHELSA_project(metadata = NULL, env_file = \".env\", compression_level = 5)"},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process CHELSA Climate Data for the IAS-pDT — CHELSA_data","text":"env_file Character. Path environment file containing paths data sources. Defaults .env. n_cores Integer. Number CPU cores use parallel processing. Default: 8. download Logical. TRUE, downloads CHELSA files. Default: FALSE. overwrite Logical. TRUE, re-downloads existing files. Default: FALSE. download_attempts Integer. Maximum download retries. Default: 10. sleep Integer. Seconds wait download attempts. Default: 5. other_variables Character. Additional variables process (e.g., \"npp\" Net Primary Productivity alongside 19 bioclimatic variables bio1-bio19). Use \"\" bioclimatic . See CHELSA_variables details. Default: \"npp\". download_n_cores Integer. Number CPU cores use parallel downloading CHELSA data. valid download = TRUE. Defaults 4. compression_level Integer. NetCDF compression level (1 = least, 9 = ). Default: 5. overwrite_processed Logical. TRUE, overwrites processed files. Default: FALSE. metadata Tibble. Single-row metadata input files, prepared CHELSA_prepare()","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process CHELSA Climate Data for the IAS-pDT — CHELSA_data","text":"CHELSA_prepare() CHELSA_project() internal helpers, direct use. Processes 19 bioclimatic variables (bio1–bio19) plus optional variables (e.g., NPP) 46 scenarios (1 current, 45 future). Time-intensive; depends file size compute resources.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_data.html","id":"functions-details","dir":"Reference","previous_headings":"","what":"Functions details","title":"Process CHELSA Climate Data for the IAS-pDT — CHELSA_data","text":"CHELSA_process(): Main function; optionally downloads CHELSA data, processes European scale reference grid, saves TIFF NetCDF outputs 46 climate scenarios. CHELSA_prepare(): Extracts metadata local URL text files manages optional downloads. CHELSA_project(): Projects data IAS-pDT reference grid optional transformations.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process CHELSA Climate Data for the IAS-pDT — CHELSA_data","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Detailed information on CHELSA climate variables — CHELSA_variables","title":"Detailed information on CHELSA climate variables — CHELSA_variables","text":"Detailed information CHELSA climate variables","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detailed information on CHELSA climate variables — CHELSA_variables","text":"","code":"CHELSA_variables"},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_variables.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Detailed information on CHELSA climate variables — CHELSA_variables","text":"object class tbl_df (inherits tbl, data.frame) 46 rows 6 columns.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detailed information on CHELSA climate variables — CHELSA_variables","text":"tibble containing detailed information various climate variables CHELSA climate data. row tibble represents different climate variable, columns providing additional details long name, unit, scale, offset, explanation variable","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CHELSA_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detailed information on CHELSA climate variables — CHELSA_variables","text":"","code":"require(dplyr) #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(CHELSA_variables) print(CHELSA_variables, n = Inf) #> # A tibble: 46 × 6 #>    Variable Long_name                             unit  scale offset explanation #>    <chr>    <chr>                                 <chr> <dbl>  <dbl> <chr>       #>  1 bio1     mean annual air temperature           deg C   0.1  -273. \"mean annu… #>  2 bio2     mean diurnal air temperature range    deg C   0.1     0  \"mean diur… #>  3 bio3     isothermality                         deg C   0.1     0  \"ratio of … #>  4 bio4     temperature seasonality               deg …   0.1     0  \"standard … #>  5 bio5     mean daily maximum air temperature o… deg C   0.1  -273. \"The highe… #>  6 bio6     mean daily minimum air temperature o… deg C   0.1  -273. \"The lowes… #>  7 bio7     annual range of air temperature       deg C   0.1     0  \"Differenc… #>  8 bio8     mean daily mean air temperatures of … deg C   0.1  -273. \"The wette… #>  9 bio9     mean daily mean air temperatures of … deg C   0.1  -273. \"The dries… #> 10 bio10    mean daily mean air temperatures of … deg C   0.1  -273. \"The warme… #> 11 bio11    mean daily mean air temperatures of … deg C   0.1  -273. \"The colde… #> 12 bio12    annual precipitation amount           kg m…   0.1     0  \"Accumulat… #> 13 bio13    precipitation amount of the wettest … kg m…   0.1     0  \"The preci… #> 14 bio14    precipitation amount of the driest m… kg m…   0.1     0  \"The preci… #> 15 bio15    precipitation seasonality             kg m…   0.1     0  \"The Coeff… #> 16 bio16    mean monthly precipitation amount of… kg m…   0.1     0  \"The wette… #> 17 bio17    mean monthly precipitation amount of… kg m…   0.1     0  \"The dries… #> 18 bio18    mean monthly precipitation amount of… kg m…   0.1     0  \"The warme… #> 19 bio19    mean monthly precipitation amount of… kg m…   0.1     0  \"The colde… #> 20 gdgfgd0  First growing degree day above 0 deg… juli…   1       0  \"First day… #> 21 gdgfgd5  First growing degree day above 5 deg… juli…   1       0  \"First day… #> 22 gdgfgd10 First growing degree day above 10 de… juli…   1       0  \"First day… #> 23 gddlgd0  Last growing degree day above 0 deg C juli…   1       0  \"Last day … #> 24 gddlgd5  Last growing degree day above 5 deg C juli…   1       0  \"Last day … #> 25 gddlgd10 Last growing degree day above 10 deg… juli…   1       0  \"Last day … #> 26 gdd0     Growing degree days heat sum above 0… deg C   0.1     0  \"heat sum … #> 27 gdd5     Growing degree days heat sum above 5… deg C   0.1     0  \"heat sum … #> 28 gdd10    Growing degree days heat sum above 1… deg C   0.1     0  \"heat sum … #> 29 ngd0     Number of growing degree days         # da…   1       0  \"Number of… #> 30 ngd5     Number of growing degree days         # da…   1       0  \"Number of… #> 31 ngd10    Number of growing degree days         # da…   1       0  \"Number of… #> 32 gsl      growing season length TREELIM         # da…   1       0  \"Length of… #> 33 gst      Mean temperature of the growing seas… deg C   0.1  -273. \"Mean temp… #> 34 lgd      last day of the growing season TREEL… juli…   1       0  \"Last day … #> 35 fgd      first day of the growing season TREE… juli…   1       0  \"first day… #> 36 gsp      Accumulated precipitation amount on … kg m…   0.1     0  \"precipita… #> 37 fcf      Frost change frequency                count   1       0  \"Number of… #> 38 scd      Snow cover days                       count   1       0  \"Number of… #> 39 swe      Snow water equivalent                 kg m…   0.1     0  \"Amount of… #> 40 kg0      Koeppen-Geiger climate classification cate…   1       0  \"Koeppen G… #> 41 kg1      Koeppen-Geiger climate classification cate…   1       0  \"Koeppen G… #> 42 kg2      Koeppen-Geiger climate classification cate…   1       0  \"Koeppen G… #> 43 kg3      Koeppen-Geiger climate classification cate…   1       0  \"Wissmann … #> 44 kg4      Koeppen-Geiger climate classification cate…   1       0  \"Thornthwa… #> 45 kg5      Koeppen-Geiger climate classification cate…   1       0  \"Troll-Pfa… #> 46 npp      Net primary productivity              g C …   0.1     0  \"Calculate…"},{"path":"https://biodt.github.io/IASDT.R/reference/CLC_Process.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Corine Land Cover (CLC) data for the IAS-pDT — CLC_process","title":"Process Corine Land Cover (CLC) data for the IAS-pDT — CLC_process","text":"Processes Corine Land Cover (CLC) data Invasive Alien Species prototype Digital Twin (IAS-pDT). Calculates percentage coverage common classes per grid cell three CLC levels, plus EUNIS_19 SynHab habitat types. Prepares reference grid optionally generates percentage coverage maps JPEG.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CLC_Process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Corine Land Cover (CLC) data for the IAS-pDT — CLC_process","text":"","code":"CLC_process(env_file = \".env\", min_land_percent = 15, plot_CLC = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/CLC_Process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Corine Land Cover (CLC) data for the IAS-pDT — CLC_process","text":"env_file Character. Path environment file containing paths data sources. Defaults .env. min_land_percent Numeric. Minimum land percentage per grid cell reference grid. Default: 15. plot_CLC Logical. TRUE, plots percentage coverage CLC levels habitat types. Default: TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CLC_Process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Corine Land Cover (CLC) data for the IAS-pDT — CLC_process","text":"Returns invisible(NULL); saves processed data optional plots disk.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CLC_Process.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Process Corine Land Cover (CLC) data for the IAS-pDT — CLC_process","text":"Data source: https://land.copernicus.eu/pan-european/corine-land-cover/clc2018 Data citation: https://doi.org/10.2909/960998c1-1870-4e82-8051-6485205ebbac","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/CLC_Process.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process Corine Land Cover (CLC) data for the IAS-pDT — CLC_process","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the integrity of RData / qs2 / rds / feather files — check_data","title":"Check the integrity of RData / qs2 / rds / feather files — check_data","text":"functions validate given file checking extension attempting load contents. file considered valid loads successfully contains non-null object, returning TRUE. Otherwise, returns FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the integrity of RData / qs2 / rds / feather files — check_data","text":"","code":"check_data(file, warning = TRUE, n_threads = 5)  check_RData(file, warning = TRUE)  check_qs(file, warning = TRUE, n_threads = 5)  check_rds(file, warning = TRUE)  check_feather(file, warning = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/Check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the integrity of RData / qs2 / rds / feather files — check_data","text":"file Character. path file checked. empty. warning Logical. TRUE (default), warnings printed file exist. n_threads Integer. number threads use reading qs2 files. Default 5.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the integrity of RData / qs2 / rds / feather files — check_data","text":"Logical. TRUE file valid, otherwise FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Check_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the integrity of RData / qs2 / rds / feather files — check_data","text":"check_data() function determines file type based extension. extension unrecognized, returns FALSE. Supported file types: RData: Checked check_RData(), read using load_as qs2: Checked check_qs(), read using qs2::qs_read rds: Checked check_rds(), read using readRDS feather: Checked check_feather(), read using arrow::read_feather","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Check_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check the integrity of RData / qs2 / rds / feather files — check_data","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Coda_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Coda object to a tibble with specified parameter transformations — coda_to_tibble","title":"Convert a Coda object to a tibble with specified parameter transformations — coda_to_tibble","text":"function converts Coda object (mcmc.list mcmc) tibble format, facilitating analysis visualization. supports transformation specific parameter types: rho, alpha, omega, beta.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Coda_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Coda object to a tibble with specified parameter transformations — coda_to_tibble","text":"","code":"coda_to_tibble(   coda_object = NULL,   posterior_type = NULL,   env_file = \".env\",   n_omega = 100 )"},{"path":"https://biodt.github.io/IASDT.R/reference/Coda_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Coda object to a tibble with specified parameter transformations — coda_to_tibble","text":"coda_object object class mcmc.list mcmc, representing MCMC output. posterior_type Character. parameter type transform extract. Must one rho, alpha, omega, beta. env_file Character. Path environment file containing paths data sources. Defaults .env. n_omega Integer. number species sampled Omega parameter transformation. Defaults 100.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Coda_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Coda object to a tibble with specified parameter transformations — coda_to_tibble","text":"tibble containing transformed parameters based specified posterior_type. structure returned tibble varies depending posterior_type parameter.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Coda_to_tibble.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a Coda object to a tibble with specified parameter transformations — coda_to_tibble","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Coda_to_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Coda object to a tibble with specified parameter transformations — coda_to_tibble","text":"","code":"library(Hmsc) #> Loading required package: coda library(coda) library(dplyr) Coda <- Hmsc::convertToCodaObject(Hmsc::TD$m) IASDT.R::coda_to_tibble(    coda_object = Coda$Alpha[[1]], posterior_type = \"Alpha\") #> # A tibble: 400 × 6 #>    Alpha           AlphaNum Factor  Chain  Iter Value #>    <fct>           <fct>    <fct>   <fct> <int> <dbl> #>  1 Alpha1[factor1] Alpha1   factor1 1        51     0 #>  2 Alpha1[factor1] Alpha1   factor1 1        52     0 #>  3 Alpha1[factor1] Alpha1   factor1 1        53     0 #>  4 Alpha1[factor1] Alpha1   factor1 1        54     0 #>  5 Alpha1[factor1] Alpha1   factor1 1        55     0 #>  6 Alpha1[factor1] Alpha1   factor1 1        56     0 #>  7 Alpha1[factor1] Alpha1   factor1 1        57     0 #>  8 Alpha1[factor1] Alpha1   factor1 1        58     0 #>  9 Alpha1[factor1] Alpha1   factor1 1        59     0 #> 10 Alpha1[factor1] Alpha1   factor1 1        60     0 #> # ℹ 390 more rows"},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_Plot_All.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model convergence of multiple modelling alternatives — convergence_plot_all","title":"Plot model convergence of multiple modelling alternatives — convergence_plot_all","text":"function generates saves series diagnostic plots assess convergence Hmsc models across multiple modelling alternatives. checks model convergence using trace plots Gelman-Rubin diagnostics key model parameters.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_Plot_All.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model convergence of multiple modelling alternatives — convergence_plot_all","text":"","code":"convergence_plot_all(   model_dir = NULL,   n_omega = 1000L,   n_cores = NULL,   margin_type = \"histogram\" )"},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_Plot_All.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model convergence of multiple modelling alternatives — convergence_plot_all","text":"model_dir Character. Path root directory fitted model. convergence outputs saved Model_Convergence_All subfolder. n_omega Integer. Number species interactions sampled Omega parameter diagnostics. Default: 1000L n_cores Integer. Number CPU cores use parallel processing. margin_type Character. type marginal plot add main plot. Valid options \"histogram\" (default) \"density\".","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_Plot_All.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot model convergence of multiple modelling alternatives — convergence_plot_all","text":"function return anything saves series diagnostic plots specified path.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_Plot_All.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot model convergence of multiple modelling alternatives — convergence_plot_all","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model convergence of a selected model — convergence_plots","title":"Plot model convergence of a selected model — convergence_plots","text":"convergence_plot() function generates saves convergence diagnostics plots rho, alpha, omega, beta parameters Hmsc model. plots help assess whether MCMC chains reached stationarity. supports parallel processing can work models fitted HPC environments.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model convergence of a selected model — convergence_plots","text":"","code":"convergence_plot(   path_coda = NULL,   path_model = NULL,   env_file = \".env\",   title = \" \",   n_omega = 1000L,   n_cores = 8L,   n_RC = c(2L, 2L),   beta_n_RC = c(3L, 3L),   save_plotting_data = TRUE,   pages_per_file = 20L,   chain_colors = NULL,   margin_type = \"histogram\" )  convergence_alpha(   posterior = NULL,   model_object = NULL,   title = NULL,   n_RC = NULL,   add_footer = TRUE,   add_title = TRUE,   chain_colors = NULL,   margin_type = \"histogram\" )  convergence_rho(   posterior = NULL,   model_object = NULL,   title = NULL,   chain_colors = NULL,   margin_type = \"histogram\" )"},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model convergence of a selected model — convergence_plots","text":"path_coda Character. Path saved coda object containing MCMC samples. path_model Character. Path saved Hmsc model object. env_file Character. Path environment file containing paths data sources. Defaults .env. title Character. title rho alpha convergence plots. Default: \" \" n_omega Integer. Number species interactions sampled Omega parameter diagnostics. Default: 1000L n_cores Integer. Number CPU cores use parallel processing. Default: 8. n_RC Numeric vector. Grid layout (rows×columns) arranging alpha parameter plots. Default: c(2, 2). NULL, layout automatically determined based number alpha levels. beta_n_RC Numeric vector. grid layout (rows×columns) arranging beta parameter plots. Default: c(3, 3). save_plotting_data Logical. TRUE (default), saves plot data .RData files. pages_per_file Integer. Number plots per page Omega parameter output. Default: 20L. chain_colors Character vector. MCMC chain colors (optional). Default: NULL. margin_type Character. type marginal plot add main plot. Valid options \"histogram\" (default) \"density\". posterior mcmc.list character. Either MCMC object (mcmc.list) containing posterior samples, file path saved coda object. model_object Hmsc object character. Either fitted Hmsc model object, file path saved Hmsc model. add_footer Logical. TRUE (default), adds footer page numbers plot. add_title Logical. TRUE (default), adds main title (title) plot.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot model convergence of a selected model — convergence_plots","text":"convergence_alpha() convergence_rho() internal functions called directly.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Convergence_plots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot model convergence of a selected model — convergence_plots","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/EASIN_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process EASIN data for the IAS-pDT — EASIN_data","title":"Process EASIN data for the IAS-pDT — EASIN_data","text":"Extracts, processes, visualizes data European Alien Species Information Network (EASIN) Invasive Alien Species prototype Digital Twin (IAS-pDT). Manages taxonomy, occurrence data, plots, handling API pagination server limits. Orchestrated EASIN_process() helpers EASIN_taxonomy(), EASIN_download(), EASIN_plot().","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/EASIN_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process EASIN data for the IAS-pDT — EASIN_data","text":"","code":"EASIN_process(   extract_taxa = TRUE,   extract_data = TRUE,   n_download_attempts = 10L,   n_cores = 6L,   sleep_time = 10L,   n_search = 1000L,   env_file = \".env\",   delete_chunks = TRUE,   start_year = 1981L,   plot = TRUE )  EASIN_taxonomy(   env_file = \".env\",   kingdom = \"Plantae\",   phylum = \"Tracheophyta\",   n_search = 100 )  EASIN_download(   species_key,   timeout = 200,   verbose = FALSE,   env_file = \".env\",   n_search = 1000,   n_attempts = 10,   sleep_time = 5,   delete_chunks = TRUE,   return_data = FALSE )  EASIN_plot(env_file = \".env\")"},{"path":"https://biodt.github.io/IASDT.R/reference/EASIN_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process EASIN data for the IAS-pDT — EASIN_data","text":"extract_taxa Logical. TRUE, extracts taxonomy using EASIN_taxonomy(). Default: TRUE. extract_data Logical.TRUE, downloads occurrence data EASIN_download(). Default: TRUE. n_download_attempts Integer. Retry attempts downloads. Default: 10. n_cores Integer. Number CPU cores use parallel processing. Default: 6. maximum number allowed cores 8. sleep_time Integer. Number seconds pause data retrieval request prevent overloading server. Default: 5 second. n_search Integer. Number records attempt retrieve per request. Default: 1000, current maximum allowed API. env_file Character. Path environment file containing paths data sources. Defaults .env. delete_chunks Logical. Whether delete temporary files data chunks FileParts subdirectory. Defaults TRUE. start_year Integer. Earliest year occurrence data (excludes earlier records). Default: 1981 (aligned CHELSA climate data). plot Logical. TRUE, generates plots via EASIN_plot(). Default: TRUE. kingdom Character. Taxonomic kingdom query. Default: \"Plantae\". phylum Character. Taxonomic phylum within kingdom. Default: \"Tracheophyta\" species_key Character. EASIN taxon ID data retrieved. parameter NULL. timeout Integer. Download timeout seconds. Default: 200. verbose Logical. TRUE, prints progress messages. Default: FALSE. n_attempts Integer. Max download attempts per chunk. Default: 10. return_data Logical. TRUE, returns data dataframe; otherwise, saves disk returns invisible(NULL). Default: FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/EASIN_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process EASIN data for the IAS-pDT — EASIN_data","text":"Uses static RDS file EASIN-GBIF taxonomic standardization, prepared Marina Golivets (Feb 2024).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/EASIN_data.html","id":"functions-details","dir":"Reference","previous_headings":"","what":"Functions details","title":"Process EASIN data for the IAS-pDT — EASIN_data","text":"EASIN_process(): Orchestrates taxonomy extraction, data downloads, plotting EASIN species data. EASIN_taxonomy(): Fetches taxonomy data chunks via EASIN API, filtered kingdom phylum. Returns tibble. EASIN_download(): Downloads occurrence data given EASIN ID, handling pagination pauses. Returns dataframe return_data = TRUE, else invisible(NULL). EASIN_plot(): Creates summary plots (observations count, species count, distribution partner) JPEGs. Returns invisible(NULL).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/EASIN_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process EASIN data for the IAS-pDT — EASIN_data","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Efforts_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GBIF sampling effort data for the IAS-pDT — efforts_data","title":"Process GBIF sampling effort data for the IAS-pDT — efforts_data","text":"Downloads processes GBIF sampling effort data vascular plants Europe, supporting Invasive Alien Species prototype Digital Twin (IAS-pDT). Orchestrated efforts_process(), uses helper functions request, download, split, summarize, visualize data Order level. functions prepares raster maps number vascular plant observations species per grid cell.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Efforts_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GBIF sampling effort data for the IAS-pDT — efforts_data","text":"","code":"efforts_process(   env_file = \".env\",   r_environ = \".Renviron\",   request = TRUE,   download = TRUE,   n_cores = 6L,   start_year = 1981L,   boundaries = c(-30, 50, 25, 75),   chunk_size = 100000L,   delete_chunks = TRUE,   delete_processed = TRUE )  efforts_request(   env_file = \".env\",   n_cores = 3L,   start_year = 1981L,   r_environ = \".Renviron\",   boundaries = c(-30, 50, 25, 75) )  efforts_download(n_cores = 6L, env_file = \".env\")  efforts_summarize(   env_file = \".env\",   n_cores = 6L,   chunk_size = 100000L,   delete_chunks = TRUE )  efforts_split(path_zip = NULL, env_file = \".env\", chunk_size = 100000L)  efforts_plot(env_file = \".env\")"},{"path":"https://biodt.github.io/IASDT.R/reference/Efforts_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GBIF sampling effort data for the IAS-pDT — efforts_data","text":"env_file Character. Path environment file containing paths data sources. Defaults .env. r_environ Character. Path .Renviron file GBIF credentials (GBIF_EMAIL, GBIF_USER, GBIF_PWD). Default: \".Renviron\". credentials must format: GBIF_EMAIL=your_email GBIF_USER=your_username GBIF_PWD=your_password request Logical. TRUE (default), requests GBIF data; otherwise, loads existing data. download Logical. TRUE (default), downloads saves GBIF data; otherwise, skips download. Default: TRUE. n_cores Integer. Number CPU cores use parallel processing. Default: 6, except efforts_request, defaults 3 maximum 3. start_year Integer. Earliest year GBIF records (matches CHELSA climate data). Default: 1981. boundaries Numeric vector (length 4). GBIF data bounds (Left, Right, Bottom, Top). Default: c(-30, 50, 25, 75). chunk_size Integer. Rows per chunk file. Default: 100000. delete_chunks Logical. TRUE (default), deletes chunk files post-processing. delete_processed Logical. TRUE (default), removes raw GBIF files processing (>22 GB). path_zip Character. Path zip file CSV splitting.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Efforts_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process GBIF sampling effort data for the IAS-pDT — efforts_data","text":"efforts_process() main entry point processing sampling effort data. Time-intensive (>9 hours 6-core Windows PC; GBIF request ~5 hours). Detects processes new/missing data order.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Efforts_data.html","id":"functions-details","dir":"Reference","previous_headings":"","what":"Functions details","title":"Process GBIF sampling effort data for the IAS-pDT — efforts_data","text":"efforts_process(): Manages workflow requesting, downloading, processing, plotting GBIF vascular plant data. efforts_request(): Requests GBIF data order parallel. Stores results disk. efforts_download(): Downloads GBIF data, validates files, loads existing data available. Returns dataframe (Efforts_AllRequests) paths. efforts_split(): Splits zipped CSV data order chunks, saving separately. efforts_summarize(): Processes summarizes data RData TIFF rasters. efforts_plot(): Plots observation efforts (raw log10 scales).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Efforts_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Process GBIF sampling effort data for the IAS-pDT — efforts_data","text":"Data source: https://www.gbif.org","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Efforts_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process GBIF sampling effort data for the IAS-pDT — efforts_data","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/GBIF_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GBIF occurrence data for the IAS-pDT — GBIF_data","title":"Process GBIF occurrence data for the IAS-pDT — GBIF_data","text":"Extracts, processes, visualizes occurrence data Global Biodiversity Information Facility (GBIF) Invasive Alien Species prototype Digital Twin (IAS-pDT). Orchestrated GBIF_process(), requests, downloads, cleans, chunks, maps species data using helper functions.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/GBIF_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GBIF occurrence data for the IAS-pDT — GBIF_data","text":"","code":"GBIF_process(   env_file = \".env\",   r_environ = \".Renviron\",   n_cores = 6L,   request = TRUE,   download = TRUE,   split_chunks = TRUE,   overwrite = FALSE,   delete_chunks = TRUE,   chunk_size = 50000L,   boundaries = c(-30, 50, 25, 75),   start_year = 1981L )  GBIF_check(r_environ = \".Renviron\")  GBIF_download(   env_file = \".env\",   r_environ = \".Renviron\",   request = TRUE,   download = TRUE,   split_chunks = TRUE,   chunk_size = 50000L,   boundaries = c(-30, 50, 25, 75),   start_year = 1981L )  GBIF_read_chunk(   chunk_file,   env_file = \".env\",   max_uncertainty = 10L,   start_year = 1981L,   save_RData = TRUE,   return_data = FALSE,   overwrite = FALSE )  GBIF_species_data(   species = NULL,   env_file = \".env\",   verbose = TRUE,   plot_tag = NULL )"},{"path":"https://biodt.github.io/IASDT.R/reference/GBIF_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GBIF occurrence data for the IAS-pDT — GBIF_data","text":"env_file Character. Path environment file containing paths data sources. Defaults .env. r_environ Character. Path .Renviron file GBIF credentials (GBIF_EMAIL, GBIF_USER, GBIF_PWD). Default: \".Renviron\". credentials must format: GBIF_EMAIL=your_email GBIF_USER=your_username GBIF_PWD=your_password n_cores Integer. Number CPU cores use parallel processing. Default: 6. request Logical. TRUE (default), requests GBIF data; otherwise, loads disk. download Logical. TRUE (default), downloads saves GBIF data. split_chunks Logical. TRUE (default), splits data chunks easier processing. overwrite Logical. TRUE, reprocesses existing .RData chunks. Default: FALSE. helps continue working previously processed chunks previous try failed, e.g. due memory issue. delete_chunks Logical. TRUE (default), deletes chunk files. chunk_size Integer. Records per data chunk. Default: 50000. boundaries Numeric vector (length 4). GBIF data bounds (Left, Right, Bottom, Top). Default: c(-30, 50, 25, 75). start_year Integer. Earliest collection year included. Default 1981. chunk_file Character. Path chunk file processing. max_uncertainty Numeric. Maximum spatial uncertainty kilometers. Default: 10. save_RData Logical. TRUE (default), saves chunk data .RData. return_data TRUE, returns chunk data; otherwise, invisible(NULL). Default: FALSE. species Character. Species name processing. verbose Logical. TRUE (default), prints progress messages. plot_tag Character. Tag plot titles.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/GBIF_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process GBIF occurrence data for the IAS-pDT — GBIF_data","text":"Relies static RDS file listing IAS species, GBIF keys, metadata, standardized Marina Golivets (Feb 2024).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/GBIF_data.html","id":"functions-details","dir":"Reference","previous_headings":"","what":"Functions details","title":"Process GBIF occurrence data for the IAS-pDT — GBIF_data","text":"GBIF_process(): Orchestrates GBIF data requests, downloads, processing, mapping. Saves RData, Excel, JPEG summary files. GBIF_check(): Verifies GBIF credentials environment .Renviron. Returns TRUE valid, else FALSE. GBIF_download(): Requests downloads GBIF data (download = TRUE),  using specified criteria (taxa, coordinates, time period, boundaries), splits small chunks (split_chunks = TRUE), saves metadata. Returns invisible(NULL). GBIF_read_chunk(): Filters chunk data (spatial/temporal, e.g., spatial uncertainty, collection year, coordinate precision, taxonomic rank), select relevant columns, saves .RData (save_RData = TRUE) returns (return_data = TRUE). Skips .RData exists overwrite = FALSE. GBIF_species_data(): Converts species-specific data sf raster formats, generating distribution maps.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/GBIF_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process GBIF occurrence data for the IAS-pDT — GBIF_data","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/IASDT.R-package.html","id":null,"dir":"Reference","previous_headings":"","what":"IASDT.R: Modelling the distribution of invasive alien plant species in Europe — IASDT.R-package","title":"IASDT.R: Modelling the distribution of invasive alien plant species in Europe — IASDT.R-package","text":"Helper R functions Invasive Alien Species (IAS) prototype Digital Twin (IAS-pDT), part EU-funded BioDT project.","code":""},{"path":[]},{"path":"https://biodt.github.io/IASDT.R/reference/IASDT.R-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IASDT.R: Modelling the distribution of invasive alien plant species in Europe — IASDT.R-package","text":"Maintainer: Ahmed El-Gabbas ahmed.el-gabbas@ufz.de (ORCID)","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/IAS_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process and map Invasive Alien Species (IAS) data for the IAS-pDT — IAS_data","title":"Process and map Invasive Alien Species (IAS) data for the IAS-pDT — IAS_data","text":"Processes visualizes Invasive Alien Species (IAS) distribution data GBIF, EASIN, eLTER Invasive Alien Species prototype Digital Twin (IAS-pDT). Merges pre-processed data, creates presence-absence rasters, summarizes distributions, generates maps using helper functions.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/IAS_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process and map Invasive Alien Species (IAS) data for the IAS-pDT — IAS_data","text":"","code":"IAS_process(env_file = \".env\", n_cores = 6L, overwrite = TRUE)  IAS_distribution(   species = NULL,   env_file = \".env\",   verbose = FALSE,   overwrite = TRUE )  IAS_plot(species = NULL, env_file = \".env\", overwrite = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/IAS_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process and map Invasive Alien Species (IAS) data for the IAS-pDT — IAS_data","text":"env_file Character. Path environment file containing paths data sources. Defaults .env. n_cores Integer. Number CPU cores use parallel processing. Default: 6. overwrite Logical. TRUE, overwrites existing maps; otherwise, skips maps exist. Default: FALSE. species Character. Species name distribution mapping. verbose Logical. TRUE, prints progress messages. Default: FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/IAS_data.html","id":"functions-details","dir":"Reference","previous_headings":"","what":"Functions details","title":"Process and map Invasive Alien Species (IAS) data for the IAS-pDT — IAS_data","text":"IAS_process(): Merges pre-processed GBIF (GBIF_process), EASIN (EASIN_process), eLTER (eLTER_process) data (run first). Outputs SpatRaster distribution rasters, summary tables, JPEG maps using IAS_distribution() IAS_plot(). IAS_distribution(): Generates presence-absence maps (.RData, .tif)  species, including grid cells study area set excluding cultivated/casual-countries. Returns tibble presence counts (total, source) summary statistics biogeographical regions IAS_plot(): Creates JPEG distribution maps GBIF, EASIN, eLTER data using ggplot2.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/IAS_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process and map Invasive Alien Species (IAS) data for the IAS-pDT — IAS_data","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_CV_Fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare cross-validated Hmsc models for HPC fitting — mod_CV_fit","title":"Prepare cross-validated Hmsc models for HPC fitting — mod_CV_fit","text":"function prepares cross-validated Hmsc models fitting using HPC. handles data preparation, model initialization, generation SLURM commands.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_CV_Fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare cross-validated Hmsc models for HPC fitting — mod_CV_fit","text":"","code":"mod_CV_fit(   path_model = NULL,   CV_name = c(\"CV_Dist\", \"CV_Large\"),   Partitions = NULL,   env_file = \".env\",   init_par = NULL,   job_name = \"CV_Models\",   updater = list(Gamma2 = FALSE, GammaEta = FALSE),   align_posterior = TRUE,   to_JSON = FALSE,   SLURM_prepare = TRUE,   memory_per_cpu = NULL,   job_runtime = NULL,   path_Hmsc = NULL,   precision = 64,   ... )"},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_CV_Fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare cross-validated Hmsc models for HPC fitting — mod_CV_fit","text":"path_model Character. Path saved model file (*.qs2). CV_name Character vector. Column name(s) model input data used cross-validate models (see mod_prepare_data mod_CV_prepare). function allows possibility using one way assigning grid cells cross-validation folders. multiple names provided, separate cross-validation models fitted cross-validation type. Currently, three cross-validation strategies: CV_SAC, CV_Dist, CV_Large. Defaults c(\"CV_Dist\", \"CV_Large\"). Partitions vector cross-validation created Hmsc::createPartition similar. Defaults NULL, means use column name(s) provided CV_name argument. Partitions vector provided, label used output files CV_Custom. env_file Character. Path environment file containing paths data sources. Defaults .env. init_par named list parameter values used initialization MCMC states. See Hmsc::computePredictedValues information. Default: NULL. job_name Character. Name submitted job(s) SLURM. Default: CV_Models. updater named list. conditional updaters omitted? See Hmsc::computePredictedValues information. Defaults list(Gamma2 = FALSE, GammaEta = FALSE) disable following warnings: setting updater$Gamma2=FALSE due specified phylogeny matrix setting updater$GammaEta=FALSE: implemented spatial methods 'GPP' 'NNGP'. align_posterior Logical. Whether posterior chains aligned. See Hmsc::computePredictedValues information. Default: TRUE. to_JSON Logical. Whether convert unfitted models JSON saving RDS file. Default: FALSE. SLURM_prepare Logical. Whether prepare SLURM command files. TRUE (default), SLURM commands saved disk using mod_SLURM function. memory_per_cpu Character. Memory allocation per CPU core. Example: \"32G\" 32 gigabytes. Defaults \"64G\". job_runtime Character. Maximum allowed runtime job. Example: \"01:00:00\" one hour. Required — provided, function throws error. path_Hmsc Character. Path Hmsc-HPC installation. precision Integer (either 32 64). Defines floating-point precision mode Hmsc-HPC sampling (–fp 32 –fp 64). default 64, default precision Hmsc-HPC. ... Additional arguments passed mod_SLURM function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_CV_Fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare cross-validated Hmsc models for HPC fitting — mod_CV_fit","text":"function copies part Hmsc::computePredictedValues function, currently support performing cross-validation using Hmsc-HPC.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_CV_Fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare cross-validated Hmsc models for HPC fitting — mod_CV_fit","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Merge_Chains.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge model chains into Hmsc and coda objects — mod_merge_chains","title":"Merge model chains into Hmsc and coda objects — mod_merge_chains","text":"functions merge posterior chains multiple runs Hmsc models unified Hmsc coda objects, facilitating analysis. check missing incomplete chains, optionally report issues, save processed results disk. mod_merge_chains handles regular models, mod_merge_chains_CV designed cross-validated models.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Merge_Chains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge model chains into Hmsc and coda objects — mod_merge_chains","text":"","code":"mod_merge_chains(   model_dir = NULL,   n_cores = 8L,   model_info_name = NULL,   print_incomplete = TRUE,   from_JSON = FALSE,   out_extension = \"qs2\" )  mod_merge_chains_CV(   model_dir = NULL,   n_cores = 8L,   CV_names = c(\"CV_Dist\", \"CV_Large\"),   from_JSON = FALSE,   out_extension = \"qs2\" )"},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Merge_Chains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge model chains into Hmsc and coda objects — mod_merge_chains","text":"model_dir Character. Path root directory model fitted. mod_merge_chains, subdirectories Model_Fitted Model_Coda created within path store merged Hmsc coda objects, respectively. mod_merge_chains_CV, merged objects stored Model_Fitting_CV/Model_Fitted. n_cores Integer. Number CPU cores use parallel processing. Defaults 8L. model_info_name Character. Name file (without extension) updated model information saved. NULL, overwrites existing Model_Info.RData file model_dir directory. specified, creates new .RData file name model_dir directory. Applies mod_merge_chains. print_incomplete Logical. TRUE, prints names model variants failed merge due missing incomplete chains. Defaults TRUE. from_JSON Logical. Whether convert loaded models JSON format reading. Defaults FALSE. out_extension Character. File extension (without dot) output files containing merged Hmsc coda objects. Options qs2 (faster read/write via qs2 package) RData (standard R format). Defaults qs2. CV_names Character vector. Names cross-validation strategies merge, matching used model setup. Defaults c(\"CV_Dist\", \"CV_Large\"). names one CV_Dist, CV_Large, CV_SAC. Applies mod_merge_chains_CV.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Merge_Chains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge model chains into Hmsc and coda objects — mod_merge_chains","text":"functions return invisible(NULL) save processed model information merged objects disk specified locations.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Merge_Chains.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge model chains into Hmsc and coda objects — mod_merge_chains","text":"mod_merge_chains merges posterior chains multiple runs Hmsc model fitted without cross-validation. checks missing incomplete chains, aligns posteriors (using alignPost = TRUE, falling back FALSE alignment fails), saves merged Hmsc object coda object MCMC diagnostics. also records fitting time memory usage progress files. mod_merge_chains_CV performs similar merging process cross-validated Hmsc models, processing fold specified CV_names separately. saves merged Hmsc objects per fold generate coda objects.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Merge_Chains.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merge model chains into Hmsc and coda objects — mod_merge_chains","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_SLURM.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare SLURM scripts for Hmsc-HPC model fitting — mod_SLURM","title":"Prepare SLURM scripts for Hmsc-HPC model fitting — mod_SLURM","text":"mod_SLURM function generates SLURM job submission scripts fitting Hmsc-HPC models HPC environment. Additionally, mod_SLURM_refit creates SLURM scripts refitting models failed previously fitted.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_SLURM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare SLURM scripts for Hmsc-HPC model fitting — mod_SLURM","text":"","code":"mod_SLURM(   model_dir = NULL,   job_name = NULL,   cat_job_info = TRUE,   ntasks = 1L,   cpus_per_task = 1L,   gpus_per_node = 1L,   memory_per_cpu = \"64G\",   job_runtime = NULL,   HPC_partition = \"small-g\",   env_file = \".env\",   path_Hmsc = NULL,   command_prefix = \"Commands2Fit\",   SLURM_prefix = \"Bash_Fit\",   SLURM_path_out = NULL )  mod_SLURM_refit(   model_dir = NULL,   n_array_jobs = 210L,   job_name = NULL,   memory_per_cpu = \"64G\",   job_runtime = NULL,   HPC_partition = \"small-g\",   env_file = \".env\",   cat_job_info = TRUE,   ntasks = 1L,   cpus_per_task = 1L,   gpus_per_node = 1L,   SLURM_prepare = TRUE,   path_Hmsc = NULL,   refit_prefix = \"Commands2Refit\",   SLURM_prefix = \"Bash_Refit\" )"},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_SLURM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare SLURM scripts for Hmsc-HPC model fitting — mod_SLURM","text":"model_dir Character. Path root directory fitted model. job_name Character. Name submitted job(s). cat_job_info Logical. TRUE, additional bash commands included print job-related information. Default: TRUE. ntasks Integer. Number tasks allocate job (#SBATCH --ntasks). Default: 1. cpus_per_task Integer. Number CPU cores allocated per task (#SBATCH --cpus-per-task). Default: 1. gpus_per_node Integer. Number GPUs requested per node (#SBATCH --gpus-per-node). Default: 1. memory_per_cpu Character. Memory allocation per CPU core. Example: \"32G\" 32 gigabytes. Defaults \"64G\". job_runtime Character. Maximum allowed runtime job. Example: \"01:00:00\" one hour. Required — provided, function throws error. HPC_partition Character. Name SLURM partition submit job . Default: \"small-g\", running array jobs GPU. env_file Character. Path environment file containing paths data sources. Defaults .env. path_Hmsc Character. Path Hmsc-HPC installation. command_prefix Character.Prefix bash commands used job execution. Default: \"Commands2Fit\". SLURM_prefix Character. Prefix generated SLURM script filenames. SLURM_path_out Character. Directory SLURM script(s) saved. NULL (default), function derives path model_dir. n_array_jobs Integer. Number jobs per SLURM script file. LUMI HPC, limit 210 submitted jobs per user small-g partition. argument used split jobs multiple SLURM scripts needed. Default: 210. See LUMI documentation details. SLURM_prepare Logical. Whether prepare SLURM command files. TRUE (default), SLURM commands saved disk using mod_SLURM function. refit_prefix Character. Prefix files containing commands refit failed incomplete models.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_SLURM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare SLURM scripts for Hmsc-HPC model fitting — mod_SLURM","text":"function return value. Instead, generates writes SLURM script files disk model fitting refitting.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_SLURM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare SLURM scripts for Hmsc-HPC model fitting — mod_SLURM","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of Hmsc model parameters — mod_summary","title":"Summary of Hmsc model parameters — mod_summary","text":"function provides comprehensive summary Hmsc model parameters, including Alpha, Beta, Rho, Omega. processes model's output, performs statistical summaries, optionally returns summarized data.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of Hmsc model parameters — mod_summary","text":"","code":"mod_summary(path_coda = NULL, env_file = \".env\", return_data = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of Hmsc model parameters — mod_summary","text":"path_coda Character. Path .qs2 / .RData file containing coda object. env_file Character. Path environment file containing paths data sources. Defaults .env. return_data Logical. Whether summarized data returned R object. TRUE, function returns list containing summaries Alpha, Beta, Rho, Omega parameters. default value FALSE, means function return data save summaries specified directory.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of Hmsc model parameters — mod_summary","text":"return_data FALSE (default), function return anything saves summaries directory. return_data TRUE, also returns data R object.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_Summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of Hmsc model parameters — mod_summary","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare initial models for model fitting with Hmsc-HPC — mod_inputs","title":"Prepare initial models for model fitting with Hmsc-HPC — mod_inputs","text":"mod_prepare_HPC function prepares input data initializes models fitting Hmsc-HPC. performs multiple tasks, including data preparation, defining spatial block cross-validation folds, generating Gaussian Predictive Process (GPP) knots (Tikhonov et al.), initializing models, creating HPC execution commands. function supports parallel processing offers option include exclude phylogenetic tree data. mod_prepare_data function used prepare habitat-specific data Hmsc models. function processes environmental species presence data, reads environment variables file, verifies paths, loads filters species data based habitat type minimum presence grid cells per species, merges various environmental layers (e.g., CHELSA Bioclimatic variables, habitat coverage, road railway intensity, sampling efforts) single dataset. Processed data saved disk *.RData file.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare initial models for model fitting with Hmsc-HPC — mod_inputs","text":"","code":"mod_prepare_HPC(   hab_abb = NULL,   directory_name = NULL,   min_efforts_n_species = 100L,   n_pres_per_species = 80L,   env_file = \".env\",   GPP = TRUE,   GPP_dists = NULL,   GPP_save = TRUE,   GPP_plot = TRUE,   min_LF = NULL,   max_LF = NULL,   alphapw = list(Prior = NULL, Min = 20, Max = 1200, Samples = 200),   bio_variables = c(\"bio3\", \"bio4\", \"bio11\", \"bio18\", \"bio19\", \"npp\"),   quadratic_variables = bio_variables,   efforts_as_predictor = TRUE,   road_rail_as_predictor = TRUE,   habitat_as_predictor = TRUE,   river_as_predictor = TRUE,   n_species_per_grid = 0L,   exclude_cultivated = TRUE,   exclude_0_habitat = TRUE,   CV_n_folds = 4L,   CV_n_grids = 20L,   CV_n_rows = 2L,   CV_n_columns = 2L,   CV_plot = TRUE,   CV_SAC = FALSE,   use_phylo_tree = TRUE,   no_phylo_tree = FALSE,   overwrite_rds = TRUE,   n_cores = 8L,   MCMC_n_chains = 4L,   MCMC_thin = NULL,   MCMC_samples = 1000L,   MCMC_transient_factor = 500L,   MCMC_verbose = 200L,   skip_fitted = TRUE,   n_array_jobs = 210L,   model_country = NULL,   verbose_progress = TRUE,   SLURM_prepare = TRUE,   memory_per_cpu = \"64G\",   job_runtime = NULL,   job_name = NULL,   path_Hmsc = NULL,   check_python = FALSE,   to_JSON = FALSE,   precision = 64L,   ... )  mod_prepare_data(   hab_abb = NULL,   directory_name = NULL,   min_efforts_n_species = 100L,   exclude_cultivated = TRUE,   exclude_0_habitat = TRUE,   n_pres_per_species = 80L,   env_file = \".env\",   verbose_progress = TRUE )"},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare initial models for model fitting with Hmsc-HPC — mod_inputs","text":"hab_abb Character. Abbreviation habitat type (based SynHab) prepare data. Valid values 0, 1, 2, 3, 4a, 4b, 10, 12a, 12b. hab_abb = 0, data prepared irrespective habitat type. details, see Pysek et al.. directory_name Character. Directory name, without parents, models saved. directory created. min_efforts_n_species Integer. Minimum number vascular plant species per grid cell (GBIF data) required inclusion models. exclude grid cells little sampling efforts. Defaults 100. n_pres_per_species Integer. minimum number presence grid cells species included analysis. number presence grid cells per species calculated discarding grid cells low sampling efforts (min_efforts_n_species) zero percentage habitat coverage exclude_0_habitat. Defaults 80. env_file Character. Path environment file containing paths data sources. Defaults .env. GPP Logical. Whether fit spatial random effect using Gaussian Predictive Process. Defaults TRUE. FALSE, non-spatial models fitted. GPP_dists Integer. Spacing (kilometers) GPP knots, well minimum allowable distance knot nearest sampling point. knots generated using prepare_knots function, value used knotDist minKnotDist Hmsc::constructKnots. GPP_save Logical. Whether RData file. Default: TRUE. GPP_plot Logical. Whether plot coordinates sampling units knots pdf file. Default: TRUE. min_LF, max_LF Integer. Minimum maximum number latent factors used. default NULL means number latent factors estimated data. either provided, respective values used arguments Hmsc::setPriors. alphapw Prior alpha parameter. Defaults list Prior = NULL, Min = 20, Max = 1200, Samples = 200. alphapw NULL list NULL list items, default prior used. Prior matrix, used prior. Prior = NULL, prior generated using Min, Max, Samples. Min Max minimum maximum values alpha parameter (kilometer). Samples number samples used prior. bio_variables Character vector. Variables CHELSA (bioclimatic variables (bio1-bio19) additional predictors (e.g., Net Primary Productivity, npp)) used model. default, six ecologically relevant minimally correlated variables selected: c(\"bio3\", \"bio4\", \"bio11\", \"bio18\", \"bio19\", \"npp\"). quadratic_variables Character vector variables quadratic terms used. Defaults variables bio_variables. quadratic_variables NULL, quadratic terms used. efforts_as_predictor Logical. Whether include (log10) sampling efforts predictor model. Default: TRUE. road_rail_as_predictor Logical. Whether include (log10) sum road railway intensity predictor model. Default: TRUE. habitat_as_predictor Logical. Whether include (log10) percentage coverage respective habitat type per grid cell predictor model. Default: TRUE. valid hab_abb equals 0. river_as_predictor Logical. Whether include (log10) total length rivers per grid cell predictor model. Default: TRUE. See river_length details. n_species_per_grid Integer. Minimum number species required grid cell included analysis. filtering occurs applying min_efforts_n_species (sampling effort thresholds), n_pres_per_species (minimum species presence thresholds), exclude_0_habitat (exclude 0% habitat coverage). Default (0): Includes grid cells. Positive value (>0): Includes grid cells least n_species_per_grid species present. exclude_cultivated Logical. Whether exclude countries cultivated casual observations per species. Defaults TRUE. exclude_0_habitat Logical. Whether exclude grid cells zero percentage habitat coverage. Defaults TRUE. CV_n_folds Integer. Number cross-validation folds. Default: 4L. CV_n_grids Integer. CV_Dist cross-validation strategy (see mod_CV_prepare), argument determines size blocks (many grid cells directions). CV_n_rows, CV_n_columns Integer. Number rows columns used CV_Large cross-validation strategy  (see mod_CV_prepare), study area divided large blocks given provided CV_n_rows CV_n_columns values. default 2 means split study area four large blocks median latitude longitude. CV_plot Logical. Indicating whether plot block cross-validation folds. CV_SAC Logical. Whether use spatial autocorrelation determine block size. Defaults FALSE, use_phylo_tree, no_phylo_tree Logical. Whether fit models (use_phylo_tree) without (no_phylo_tree) phylogenetic trees. Defaults use_phylo_tree = TRUE no_phylo_tree = FALSE, meaning models phylogenetic trees fitted default. least one use_phylo_tree no_phylo_tree TRUE. overwrite_rds Logical. Whether overwrite previously exported RDS files initial models. Default: TRUE. n_cores Integer. Number CPU cores use parallel processing. Default: 8. MCMC_n_chains Integer. Number model chains. Default: 4. MCMC_thin Integer vector. Thinning value(s) MCMC sampling. one value provided, separate model fitted value thinning. MCMC_samples Integer vector. Value(s) number MCMC samples. one value provided, separate model fitted value number samples. Defaults 1000. MCMC_transient_factor Integer. Transient multiplication factor. value transient equal multiplication MCMC_transient_factor MCMC_thin. Default: 500. MCMC_verbose Integer. Interval MCMC sampling progress reported. Default: 200. skip_fitted Logical. Whether skip already fitted models. Default: TRUE. n_array_jobs Integer. Number jobs per SLURM script file. LUMI HPC, limit 210 submitted jobs per user small-g partition. argument used split jobs multiple SLURM scripts needed. Default: 210. See LUMI documentation details. model_country Character. Country countries filter observations . Default: NULL, means prepare data whole Europe. verbose_progress Logical. Whether print message upon successful saving files. Defaults FALSE. SLURM_prepare Logical. Whether prepare SLURM command files. TRUE (default), SLURM commands saved disk using mod_SLURM function. memory_per_cpu Character. Memory per CPU SLURM job. value assigned #SBATCH --mem-per-cpu= SLURM argument. Example: \"32G\" request 32 gigabyte. effective SLURM_prepare = TRUE. Defaults \"64G\". job_runtime Character. Requested time job SLURM bash arrays. Example: \"01:00:00\" request hour. effective SLURM_prepare = TRUE. job_name Character. Name submitted job(s) SLURM. NULL (Default), job name prepared based folder path hab_abb value. effective SLURM_prepare = TRUE. path_Hmsc Character. Directory path Hmsc-HPC extension installation. provided path_Hmsc argument mod_SLURM function. check_python Logical. Whether check Python executable exists. to_JSON Logical. Whether convert unfitted models JSON saving RDS file. Default: FALSE. precision Integer (either 32 64). Defines floating-point precision mode Hmsc-HPC sampling (–fp 32 –fp 64). default 64, default precision Hmsc-HPC. ... Additional parameters provided mod_SLURM function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_inputs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare initial models for model fitting with Hmsc-HPC — mod_inputs","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_postprocessing.html","id":null,"dir":"Reference","previous_headings":"","what":"Model pipeline for post-processing fitted Hmsc models — mod_postprocessing","title":"Model pipeline for post-processing fitted Hmsc models — mod_postprocessing","text":"functions post-process fitted Hmsc models CPU GPU. main functions pipeline includes mod_postprocess_1_CPU, mod_CV_postprocess_1_CPU, mod_prepare_TF, mod_postprocess_2_CPU. See details information.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_postprocessing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model pipeline for post-processing fitted Hmsc models — mod_postprocessing","text":"","code":"mod_postprocess_1_CPU(   model_dir = NULL,   hab_abb = NULL,   n_cores = 8L,   env_file = \".env\",   path_Hmsc = NULL,   memory_per_cpu = \"64G\",   job_runtime = NULL,   from_JSON = FALSE,   GPP_dist = NULL,   use_trees = \"Tree\",   MCMC_n_samples = 1000L,   MCMC_thin = NULL,   n_omega = 1000L,   CV_name = c(\"CV_Dist\", \"CV_Large\"),   n_grid = 50L,   use_TF = TRUE,   TF_use_single = FALSE,   LF_n_cores = n_cores,   LF_temp_cleanup = TRUE,   LF_check = FALSE,   temp_cleanup = TRUE,   TF_environ = NULL,   clamp_pred = TRUE,   fix_efforts = \"q90\",   fix_rivers = \"q90\",   pred_new_sites = TRUE,   n_cores_VP = 3L,   width_omega = 26,   height_omega = 22.5,   width_beta = 25,   height_beta = 35 )  mod_prepare_TF(   n_batch_files = 210L,   env_file = \".env\",   working_directory = NULL,   partition_name = \"small-g\",   LF_runtime = \"01:00:00\",   model_prefix = NULL,   VP_runtime = \"02:00:00\" )  mod_postprocess_2_CPU(   model_dir = NULL,   hab_abb = NULL,   n_cores = 8L,   env_file = \".env\",   GPP_dist = NULL,   use_trees = \"Tree\",   MCMC_n_samples = 1000L,   MCMC_thin = NULL,   use_TF = TRUE,   TF_environ = NULL,   TF_use_single = FALSE,   LF_n_cores = n_cores,   LF_check = FALSE,   LF_temp_cleanup = TRUE,   temp_cleanup = TRUE,   n_grid = 50L,   CC_models = c(\"GFDL-ESM4\", \"IPSL-CM6A-LR\", \"MPI-ESM1-2-HR\", \"MRI-ESM2-0\",     \"UKESM1-0-LL\"),   CC_scenario = c(\"ssp126\", \"ssp370\", \"ssp585\"),   RC_n_cores = 8L,   clamp_pred = TRUE,   fix_efforts = \"q90\",   fix_rivers = \"q90\",   pred_new_sites = TRUE,   tar_predictions = TRUE,   RC_prepare = TRUE,   RC_plot = TRUE,   VP_prepare = TRUE,   VP_plot = TRUE,   predict_suitability = TRUE,   plot_predictions = TRUE,   plot_LF = TRUE,   plot_internal_evaluation = TRUE )  mod_CV_postprocess_1_CPU(   model_dir = NULL,   CV_names = NULL,   n_cores = 8L,   env_file = \".env\",   from_JSON = FALSE,   use_TF = TRUE,   TF_use_single = FALSE,   LF_n_cores = n_cores,   LF_only = TRUE,   LF_temp_cleanup = TRUE,   LF_check = FALSE,   temp_cleanup = TRUE,   TF_environ = NULL,   n_batch_files = 210L,   working_directory = NULL,   partition_name = \"small-g\",   LF_runtime = \"01:00:00\" )"},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_postprocessing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model pipeline for post-processing fitted Hmsc models — mod_postprocessing","text":"model_dir Character. Path root directory fitted model. hab_abb Character. Habitat abbreviation indicating specific SynHab habitat type data prepared. Valid values 0, 1, 2, 3, 4a, 4b, 10, 12a, 12b. details, see Pysek et al.. n_cores Integer. Number CPU cores use parallel processing. Default: 8. env_file Character. Path environment file containing paths data sources. Defaults .env. path_Hmsc Character. Path Hmsc-HPC installation. memory_per_cpu Character. Memory allocation per CPU core. Example: \"32G\" 32 gigabytes. Defaults \"64G\". job_runtime Character. Maximum allowed runtime job. Example: \"01:00:00\" one hour. Required — provided, function throws error. from_JSON Logical. Whether convert loaded models JSON format reading. Defaults FALSE. GPP_dist Integer. Distance kilometers knots selected model. use_trees Character. Whether phylogenetic tree used selected model. Accepts \"Tree\" (default) \"NoTree\". MCMC_thin, MCMC_n_samples Integer. Thinning value number MCMC samples selected model. n_omega Integer. number species sampled Omega parameter transformation. Defaults 100. CV_name Character vector. Column name(s) model input data used cross-validate models (see mod_prepare_data mod_CV_prepare). function allows possibility using one way assigning grid cells cross-validation folders. multiple names provided, separate cross-validation models fitted cross-validation type. Currently, three cross-validation strategies: CV_SAC, CV_Dist, CV_Large. Defaults c(\"CV_Dist\", \"CV_Large\"). n_grid Integer. Number points along gradient continuous focal variables. Higher values result smoother curves. Default: 50. See Hmsc::constructGradient details. use_TF Logical. Whether use TensorFlow calculations. Defaults TRUE. TF_use_single Logical. Whether use single precision TensorFlow calculations. Defaults FALSE. LF_n_cores Integer. Number cores use parallel processing latent factor prediction. Defaults 8L. LF_temp_cleanup Logical. Whether delete temporary files temp_dir directory finishing LF predictions. LF_check Logical. TRUE, function checks output files already created valid. FALSE, function check files exist without checking integrity. Default FALSE. temp_cleanup Logical. Whether clean temporary files. Defaults TRUE. TF_environ Character. Path Python environment. argument required use_TF TRUE Windows. Defaults NULL. clamp_pred Logical indicating whether clamp sampling efforts single value. TRUE (default), fix_efforts argument must provided. fix_efforts Numeric character. clamp_pred = TRUE, sampling efforts predictor values U+02264 fix_efforts fixed fix_efforts predictions. numeric, value directly used (log10 scale). character, can one median, mean, max, q90 (90% Quantile). Using max can reflect extreme values caused rare, highly sampled locations (e.g., urban centers popular natural reserves). using 90% quantile avoid extreme grid cells still capturing areas high sampling effort. argument mandatory clamp_pred set TRUE. fix_rivers Numeric character. Similar fix_efforts, fixing length rivers. numeric, value directly used (log10 scale). character, can one median, mean, max, q90 (90% quantile). can also NULL fixing river length predictor. Defaults q90. pred_new_sites Logical. Whether predict habitat suitability new sites. Default: TRUE. Note: parameter temporary removed future updates. n_cores_VP Integer. Number cores use variance partitioning. Defaults 3L. width_omega, height_omega, width_beta, height_beta Integer. width height generated heatmaps Omega Beta parameters centimeters. n_batch_files Integer. Number output batch files create. Must less equal maximum job limit HPC environment. working_directory Character. Optionally sets working directory batch scripts path. NULL, directory remains unchanged. partition_name Character. Name partition submit SLURM jobs . Default small-g. LF_runtime, VP_runtime Character. Time limit latent factor prediction variance partitioning processing jobs, respectively. Defaults 01:00:00 02:00:00 respectively. model_prefix Character. Prefix model name. directory named model_prefix_TF created model_dir store TensorFlow running commands. Defaults NULL. can NULL. CC_models Character vector. Climate models future predictions. Available options c(\"GFDL-ESM4\", \"IPSL-CM6A-LR\", \"MPI-ESM1-2-HR\", \"MRI-ESM2-0\", \"UKESM1-0-LL\") (default). CC_scenario Character vector. Climate scenarios future predictions. Available options : c(\"ssp126\", \"ssp370\", \"ssp585\") (default). RC_n_cores Integer. number cores use response curve prediction. Defaults 8. tar_predictions Logical. Whether compress add files single *.tar file (without compression). Default: TRUE. RC_prepare Logical. Whether prepare data response curve prediction (using resp_curv_prepare_data). Defaults TRUE. RC_plot Logical. Whether plot response curves JPEG files (using resp_curv_plot_SR, resp_curv_plot_species, resp_curv_plot_species_all). Defaults TRUE. VP_prepare Logical. Whether prepare data variance partitioning (using variance_partitioning_compute). Defaults TRUE. VP_plot Logical. Whether plot variance partitioning results (using variance_partitioning_plot). Defaults TRUE. predict_suitability Logical. Whether predict habitat suitability across different climate options (using predict_maps). Defaults TRUE. plot_predictions Logical. Whether plot species species richness predictions JPEG files (using plot_prediction). Defaults TRUE. plot_LF Logical. Whether plot latent factors JPEG files (using plot_latent_factor). Defaults TRUE. plot_internal_evaluation Logical. Whether compute visualize model internal evaluation (explanatory power) using plot_evaluation. Defaults TRUE. CV_names Character vector. Names cross-validation strategies merge, matching used model setup. Defaults c(\"CV_Dist\", \"CV_Large\"). names one CV_Dist, CV_Large, CV_SAC. Applies mod_merge_chains_CV. LF_only Logical. Whether predict latent factor. useful distributing processing load GPU CPU. LF_only = TRUE, latent factor prediction needs computed separately GPU. computations finished GPU, function can later rerun LF_only = FALSE (default) predict habitat suitability using already-computed latent factor predictions.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_postprocessing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model pipeline for post-processing fitted Hmsc models — mod_postprocessing","text":"mod_postprocess_1_CPU function performs initial post-processing step habitat-specific fitted models, automating following tasks: check unsuccessful models: mod_SLURM_refit merge chains save R objects (fitted model object coda object) qs2 RData files: mod_merge_chains visualize convergence model variants fitted convergence_plot_all visualize convergence selected model, including plotting Gelman-Rubin-Brooks plot_gelman convergence_plot model convergence diagnostics rho, alpha, omega, beta parameters. extract save model summary: mod_summary plotting model parameters: mod_heatmap_omega, mod_heatmap_beta prepare data cross-validation fit initial cross-validated models: mod_CV_fit Prepare scripts GPU processing, including: predicting latent factors response curves: resp_curv_prepare_data predicting latent factors new sampling units: predict_maps computing variance partitioning: variance_partitioning_compute  mod_CV_postprocess_1_CPU function similar mod_postprocess_1_CPU, specifically designed cross-validated models. automates merging fitted cross-validated model chains Hmsc model objects prepare scripts latent factor prediction TensorFlow using predict_maps_CV. mod_prepare_TF running mod_postprocess_1_CPU habitat types, function prepares batch scripts GPU computations habitat types: variance partitioning, function matches files pattern  \"VP_.+Command.txt\" (created variance_partitioning_compute merges contents single file (model_prefix_TF/VP_Commands.txt). , prepares SLURM script variance partitioning computations (model_prefix_TF/VP_SLURM.slurm). latent factor predictions, function matches files pattern \"^LF_NewSites_Commands_.+.txt|^LF_RC_Commands_.+txt\" split contents multiple scripts model_prefix_TF directory processing batch job. function prepares SLURM script latent factor predictions (LF_SLURM.slurm). function tailored LUMI HPC environment assumes tensorflow module installed correctly configured required Python packages. HPC systems, users may need modify function load Python virtual environment install required dependencies TensorFlow related packages. mod_postprocess_2_CPU function continues running analysis pipeline post-processing Hmsc automating following steps: process visualize response curves: response_curves predict habitat suitability across different climate options: predict_maps plot species & SR predictions JPEG: plot_prediction plot latent factors JPEG: plot_latent_factor process visualize variance partitioning: variance_partitioning_compute variance_partitioning_plot compute visualizing model internal evaluation (explanatory power): plot_evaluation initiate post-processing fitted cross-validated models: prepare commands latent factor predictions GPU — Ongoing function run : completing mod_postprocess_1_CPU mod_prepare_TF CPU, running VP_SLURM.slurm LF_SLURM.slurm GPU process response curves latent factor predictions (scripts generated mod_prepare_TF). submitting SLURM jobs cross-validated model fitting.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Mod_postprocessing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model pipeline for post-processing fitted Hmsc models — mod_postprocessing","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/NetCDF_global_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get global attributes for NetCDF files — NetCDF_global_attributes","title":"Get global attributes for NetCDF files — NetCDF_global_attributes","text":"function opens NetCDF file, extracts global attributes, returns character vector element attribute name-value pair.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/NetCDF_global_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get global attributes for NetCDF files — NetCDF_global_attributes","text":"","code":"NetCDF_global_attributes(nc = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/NetCDF_global_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get global attributes for NetCDF files — NetCDF_global_attributes","text":"nc Character. Path NetCDF file. NULL, function stop error message.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/NetCDF_global_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get global attributes for NetCDF files — NetCDF_global_attributes","text":"character vector element global attribute.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/NetCDF_global_attributes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get global attributes for NetCDF files — NetCDF_global_attributes","text":"Click ","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/OS.html","id":null,"dir":"Reference","previous_headings":"","what":"Current operating system — OS","title":"Current operating system — OS","text":"function returns name current operating system R session running .","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/OS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current operating system — OS","text":"","code":"OS()"},{"path":"https://biodt.github.io/IASDT.R/reference/OS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current operating system — OS","text":"character string representing name operating system.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/OS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Current operating system — OS","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/OS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current operating system — OS","text":"","code":"OS() #> [1] \"Linux\""},{"path":"https://biodt.github.io/IASDT.R/reference/Parameter_Heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmaps for the beta and omega parameters of the Hmsc model — parameter_heatmap","title":"Heatmaps for the beta and omega parameters of the Hmsc model — parameter_heatmap","text":"mod_heatmap_beta() mod_heatmap_omega() functions generate heatmaps using ggplot2 visualize parameter estimates posterior support values species' environmental responses (beta parameters, describes species (Y) respond various covariates (X); see Hmsc::plotBeta) residual associations (omega parameter), respectively.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Parameter_Heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmaps for the beta and omega parameters of the Hmsc model — parameter_heatmap","text":"","code":"mod_heatmap_beta(   path_model = NULL,   support_level = 0.95,   width = 25,   height = 35 )  mod_heatmap_omega(   path_model = NULL,   support_level = 0.95,   width = 26,   height = 22.5 )"},{"path":"https://biodt.github.io/IASDT.R/reference/Parameter_Heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmaps for the beta and omega parameters of the Hmsc model — parameter_heatmap","text":"path_model Character. Path fitted Hmsc model object. support_level Numeric. posterior support threshold determining values considered significant heatmap. Defaults 0.95, indicating 95% posterior support. Values threshold (1 - threshold negative associations) considered significant plotted (see Hmsc::plotBeta). width, height Integer. width height generated heatmaps centimeters. Defaults 26×22.5 omega; 25×35 beta.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Parameter_Heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmaps for the beta and omega parameters of the Hmsc model — parameter_heatmap","text":"functions return value saves heatmap plots JPEG files Model_Postprocessing/Parameters_Summary subdirectory.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Parameter_Heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmaps for the beta and omega parameters of the Hmsc model — parameter_heatmap","text":"functions exports three types visualizations (see Hmsc::plotBeta): Mean: posterior mean estimate, Support: statistical support level, measured posterior probability positive negative response, Sign: indicates whether response positive, negative, neither based chosen support_level. omega parameter, mod_heatmap_omega() function generates two JPEG files: signs mean values. beta parameter, mod_heatmap_beta() function generates four JPEG files : support, signs, mean values (including excluding intercept).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Parameter_Heatmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Heatmaps for the beta and omega parameters of the Hmsc model — parameter_heatmap","text":"Ahmed El-Gabbas. mod_heatmap_beta() function adapted Hmsc::plotBeta","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Path.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct path to a file or directory — path","title":"Construct path to a file or directory — path","text":"wrapper around fs::path() constructs file paths input components returns character string instead \"fs_path\" object.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct path to a file or directory — path","text":"","code":"path(..., ext = \"\")"},{"path":"https://biodt.github.io/IASDT.R/reference/Path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct path to a file or directory — path","text":"... character vectors, values NA, result also NA. paths follow recycling rules used tibble package, namely length 1 arguments recycled. ext optional extension append generated path.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct path to a file or directory — path","text":"character vector representing constructed file path(s).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct path to a file or directory — path","text":"","code":"# Basic usage IASDT.R::path(\"datasets\", \"processed\", \"model_fitting\") #> [1] \"datasets/processed/model_fitting\"  # Adding a file extension IASDT.R::path(\"results\", \"output\", ext = \"csv\") #> [1] \"results/output.csv\"  # Handling multiple components IASDT.R::path(\"home\", \"user\", \"documents\", \"report\", ext = \"pdf\") #> [1] \"home/user/documents/report.pdf\"  # Using vectorized input IASDT.R::path(\"folder\", c(\"file1\", \"file2\"), ext = \"txt\") #> [1] \"folder/file1.txt\" \"folder/file2.txt\""},{"path":"https://biodt.github.io/IASDT.R/reference/Polygon_Centroid.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace the geometry of a polygon with its centroid point — polygon_centroid","title":"Replace the geometry of a polygon with its centroid point — polygon_centroid","text":"function replaces geometry simple feature (sf) polygon object geometry centroid point. can optionally rename geometry column modified sf object.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Polygon_Centroid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace the geometry of a polygon with its centroid point — polygon_centroid","text":"","code":"polygon_centroid(sf_object = NULL, rename = FALSE, new_name = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/Polygon_Centroid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace the geometry of a polygon with its centroid point — polygon_centroid","text":"sf_object simple feature (sf) object; polygon whose geometry replaced centroid. NULL. rename Logical. Whether rename geometry column sf object. Defaults FALSE. new_name Character. New name geometry column. valid rename = TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Polygon_Centroid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace the geometry of a polygon with its centroid point — polygon_centroid","text":"modified sf object geometry replaced centroid original polygon geometry. rename TRUE, geometry column also renamed specified NewName.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Polygon_Centroid.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Replace the geometry of a polygon with its centroid point — polygon_centroid","text":"Click ","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Polygon_Centroid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replace the geometry of a polygon with its centroid point — polygon_centroid","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Predict_Hmsc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates predicted values from a fitted Hmsc model — predict_hmsc","title":"Calculates predicted values from a fitted Hmsc model — predict_hmsc","text":"function modifies Hmsc:::predict.Hmsc function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Predict_Hmsc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates predicted values from a fitted Hmsc model — predict_hmsc","text":"","code":"predict_hmsc(   path_model,   Loff = NULL,   x_data = NULL,   X = NULL,   XRRRData = NULL,   XRRR = NULL,   gradient = NULL,   Yc = NULL,   mcmcStep = 1L,   expected = TRUE,   n_cores = 8L,   model_name = \"Train\",   temp_dir = \"TEMP_Pred\",   temp_cleanup = TRUE,   prediction_type = NULL,   use_TF = TRUE,   TF_environ = NULL,   TF_use_single = FALSE,   LF_out_file = NULL,   LF_return = FALSE,   LF_inputFile = NULL,   LF_only = FALSE,   LF_n_cores = n_cores,   LF_check = FALSE,   LF_temp_cleanup = TRUE,   LF_commands_only = FALSE,   pred_directory = NULL,   pred_PA = NULL,   pred_XY = NULL,   evaluate = FALSE,   evaluation_name = NULL,   evaluation_directory = \"Evaluation\",   verbose = TRUE )"},{"path":"https://biodt.github.io/IASDT.R/reference/Predict_Hmsc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates predicted values from a fitted Hmsc model — predict_hmsc","text":"path_model Character. Path saved model object. Loff See Hmsc::predict.Hmsc details. x_data data.frame. unpreprocessed covariates predictions made. Works XFormula argument specified Hmsc::Hmsc model constructor call. Requirements similar Hmsc model constructor. X matrix. Covariates predictions made. one x_data X arguments may provided. XRRRData data.frame. Covariates reduced-rank regression. XRRR matrix. Covariates reduced-rank regression. gradient object returned Hmsc::constructGradient. Providing gradient alternative providing x_data, studyDesign ranLevels. used together Yc. Yc matrix. Outcomes assumed known conditional predictions. used together gradient. mcmcStep Integer. Number extra mcmc steps used updating random effects. Defaults 1L. expected Logical. Whether return location parameter observation models sample values . Defaults TRUE. n_cores Integer. Number CPU cores use parallel processing. Default: 8. model_name Character. Prefix temporary file names. Defaults NULL, case prefix used. temp_dir Character. Path temporary storage intermediate files. temp_cleanup Logical. Whether clean temporary files. Defaults TRUE. prediction_type Character. Type predictions made. NULL (default), predictions made latent factors. c, predictions made response curves mean coordinates. , predictions made response curves infinite coordinates. use_TF Logical. Whether use TensorFlow calculations. Defaults TRUE. TF_environ Character. Path Python environment. argument required use_TF TRUE Windows. Defaults NULL. TF_use_single Logical. Whether use single precision TensorFlow calculations. Defaults FALSE. LF_out_file Character. Path save outputs. NULL (default), predicted latent factors saved file. end either *.qs2 *.RData. LF_return Logical. Whether output returned. Defaults FALSE. LF_out_file NULL, parameter set FALSE function needs return result saved file. LF_inputFile Character. File name latent factor predictions saved. NULL (default), latent factor predictions computed. specified, latent factor predictions read path. allows predicting latent factors new sites . LF_only Logical. Whether return latent factor predictions . Defaults FALSE. helps predicting new sites, allowing predicting latent factors , output can loaded predictions needed. LF_n_cores Integer. Number cores use parallel processing latent factor prediction. Defaults 8L. LF_check Logical. TRUE, function checks output files already created valid. FALSE, function check files exist without checking integrity. Default FALSE. LF_temp_cleanup Logical. Whether delete temporary files temp_dir directory finishing LF predictions. LF_commands_only Logical. TRUE, returns command run Python script. Default FALSE. pred_directory Character. Directory path indicating predictions saved. Defaults NULL, saves model predictions \"Model_Prediction\" folder current working directory. pred_PA matrix. Presence-absence data evaluation. NULL (default), presence-absence data model object used. argument used evaluate TRUE. pred_XY matrix. Coordinates added predicted values. NULL (default), coordinates model object used. evaluate Logical. Whether evaluate model predictions. Defaults FALSE. evaluation_name Character. Name evaluation results. NULL, default name used (Eval_[model_name].qs2). evaluation_directory Character. Directory evaluation results saved. Defaults Evaluation. verbose Logical. Whether print message upon successful saving files. Defaults FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Predict_Maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict habitat suitability of Hmsc model across different climate options — predict_maps","title":"Predict habitat suitability of Hmsc model across different climate options — predict_maps","text":"function generates prediction maps Hmsc models current future climate options. also predicts ensemble predictions different climate models. species overall species richness, function exports three maps: mean, standard deviation (sd), coefficient variation (cov). future predictions, function generates maps prediction anomaly (future - current). function prepares data uploaded OPeNDAP data server use IAS-pDT Shiny App.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Predict_Maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict habitat suitability of Hmsc model across different climate options — predict_maps","text":"","code":"predict_maps(   path_model = NULL,   hab_abb = NULL,   env_file = \".env\",   n_cores = 8L,   clamp_pred = TRUE,   fix_efforts = \"q90\",   fix_rivers = \"q90\",   pred_new_sites = TRUE,   use_TF = TRUE,   TF_environ = NULL,   TF_use_single = FALSE,   LF_n_cores = n_cores,   LF_check = FALSE,   LF_temp_cleanup = TRUE,   LF_only = FALSE,   LF_commands_only = FALSE,   temp_dir = \"TEMP_Pred\",   temp_cleanup = TRUE,   tar_predictions = TRUE,   CC_models = c(\"GFDL-ESM4\", \"IPSL-CM6A-LR\", \"MPI-ESM1-2-HR\", \"MRI-ESM2-0\",     \"UKESM1-0-LL\"),   CC_scenario = c(\"ssp126\", \"ssp370\", \"ssp585\") )"},{"path":"https://biodt.github.io/IASDT.R/reference/Predict_Maps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict habitat suitability of Hmsc model across different climate options — predict_maps","text":"path_model Character. Path fitted Hmsc model object. hab_abb Character. Habitat abbreviation indicating specific SynHab habitat type data prepared. Valid values 0, 1, 2, 3, 4a, 4b, 10, 12a, 12b. details, see Pysek et al.. env_file Character. Path environment file containing paths data sources. Defaults .env. n_cores Integer. Number CPU cores use parallel processing. Default: 8. clamp_pred Logical indicating whether clamp sampling efforts single value. TRUE (default), fix_efforts argument must provided. fix_efforts Numeric character. clamp_pred = TRUE, sampling efforts predictor values U+02264 fix_efforts fixed fix_efforts predictions. numeric, value directly used (log10 scale). character, can one median, mean, max, q90 (90% Quantile). Using max can reflect extreme values caused rare, highly sampled locations (e.g., urban centers popular natural reserves). using 90% quantile avoid extreme grid cells still capturing areas high sampling effort. argument mandatory clamp_pred set TRUE. fix_rivers Numeric character. Similar fix_efforts, fixing length rivers. numeric, value directly used (log10 scale). character, can one median, mean, max, q90 (90% quantile). can also NULL fixing river length predictor. Defaults q90. pred_new_sites Logical. Whether predict habitat suitability new sites. Default: TRUE. Note: parameter temporary removed future updates. use_TF Logical. Whether use TensorFlow calculations. Defaults TRUE. TF_environ Character. Path Python environment. argument required use_TF TRUE Windows. Defaults NULL. TF_use_single Logical. Whether use single precision TensorFlow calculations. Defaults FALSE. LF_n_cores Integer. Number cores use parallel processing latent factor prediction. Defaults 8L. LF_check Logical. TRUE, function checks output files already created valid. FALSE, function check files exist without checking integrity. Default FALSE. LF_temp_cleanup Logical. Whether delete temporary files temp_dir directory finishing LF predictions. LF_only Logical. Whether predict latent factor. useful distributing processing load GPU CPU. LF_only = TRUE, latent factor prediction needs computed separately GPU. computations finished GPU, function can later rerun LF_only = FALSE (default) predict habitat suitability using already-computed latent factor predictions. LF_commands_only Logical. TRUE, returns command run Python script. Default FALSE. temp_dir Character. Path temporary storage intermediate files. temp_cleanup Logical. Whether clean temporary files. Defaults TRUE. tar_predictions Logical. Whether compress add files single *.tar file (without compression). Default: TRUE. CC_models Character vector. Climate models future predictions. Available options c(\"GFDL-ESM4\", \"IPSL-CM6A-LR\", \"MPI-ESM1-2-HR\", \"MRI-ESM2-0\", \"UKESM1-0-LL\") (default). CC_scenario Character vector. Climate scenarios future predictions. Available options : c(\"ssp126\", \"ssp370\", \"ssp585\") (default).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Predict_Maps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict habitat suitability of Hmsc model across different climate options — predict_maps","text":"tibble containing prediction summary file paths output *.tif files.","code":""},{"path":[]},{"path":"https://biodt.github.io/IASDT.R/reference/Predict_Maps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict habitat suitability of Hmsc model across different climate options — predict_maps","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Railway_Intensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate railway intensity based on OpenStreetMap data — railway_intensity","title":"Calculate railway intensity based on OpenStreetMap data — railway_intensity","text":"function downloads, processes, analyzes railway data extracted OpenRailwayMap available OpenStreetMap Data Extracts. supports parallel processing faster execution can calculate total length railways distance nearest railway grid cell Europe.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Railway_Intensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate railway intensity based on OpenStreetMap data — railway_intensity","text":"","code":"railway_intensity(env_file = \".env\", n_cores = 6L, delete_processed = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/Railway_Intensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate railway intensity based on OpenStreetMap data — railway_intensity","text":"env_file Character. Path environment file containing paths data sources. Defaults .env. n_cores Integer. Number CPU cores use parallel processing. Default: 8. delete_processed Logical indicating whether delete raw downloaded railways files processing . helps free large unnecessary file space (> 55 GB). Defaults TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Railway_Intensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate railway intensity based on OpenStreetMap data — railway_intensity","text":"NULL. Outputs processed files directories specified environment file.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Railway_Intensity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate railway intensity based on OpenStreetMap data — railway_intensity","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Rename_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename active geometry column of an sf object. — rename_geometry","title":"Rename active geometry column of an sf object. — rename_geometry","text":"function renames active geometry column simple feature (sf) object new name provided user.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Rename_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename active geometry column of an sf object. — rename_geometry","text":"","code":"rename_geometry(sf_object = NULL, new_name = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/Rename_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename active geometry column of an sf object. — rename_geometry","text":"sf_object sf object; simple feature object whose geometry column name changed. new_name character; new name geometry column.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Rename_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename active geometry column of an sf object. — rename_geometry","text":"modified sf object renamed geometry column.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Rename_geometry.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rename active geometry column of an sf object. — rename_geometry","text":"Click ","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Response_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare and plot response curve data for Hmsc models — response_curves","title":"Prepare and plot response curve data for Hmsc models — response_curves","text":"RespCurv_*() functions process visualize response curves Hmsc models. support parallel computation optionally return processed data. four functions group: resp_curv_prepare_data(): Prepares response curve data analysis resp_curv_plot_species(): Generates response curve plots individual species resp_curv_plot_species_all(): Generates response curves species together single plot resp_curv_plot_SR(): Plots response curves species richness.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Response_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare and plot response curve data for Hmsc models — response_curves","text":"","code":"resp_curv_prepare_data(   path_model = NULL,   n_grid = 50L,   n_cores = 8L,   return_data = FALSE,   probabilities = c(0.025, 0.5, 0.975),   use_TF = TRUE,   TF_environ = NULL,   TF_use_single = FALSE,   LF_n_cores = n_cores,   LF_check = FALSE,   LF_temp_cleanup = TRUE,   LF_commands_only = FALSE,   temp_dir = \"TEMP_Pred\",   temp_cleanup = TRUE,   verbose = TRUE )  resp_curv_plot_species(   model_dir = NULL,   n_cores = 20,   env_file = \".env\",   return_data = FALSE )  resp_curv_plot_species_all(   model_dir = NULL,   n_cores = 8L,   return_data = FALSE,   plotting_alpha = 0.3 )  resp_curv_plot_SR(model_dir, verbose = TRUE, n_cores = 8L)"},{"path":"https://biodt.github.io/IASDT.R/reference/Response_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare and plot response curve data for Hmsc models — response_curves","text":"path_model Character. Path file containing fitted Hmsc model. n_grid Integer. Number points along gradient continuous focal variables. Higher values result smoother curves. Default: 50. See Hmsc::constructGradient details. n_cores Integer. Number CPU cores use parallel processing. Defaults 8L functions, except resp_curv_plot_species, defaults 20L. return_data Logical. TRUE, function returns processed data R object. Default: FALSE. probabilities Numeric vector. Quantiles calculate response curve predictions. Default: c(0.025, 0.5, 0.975). See stats::quantile details. use_TF Logical. Whether use TensorFlow calculations. Defaults TRUE. TF_environ Character. Path Python environment. argument required use_TF TRUE Windows. Defaults NULL. TF_use_single Logical. Whether use single precision TensorFlow calculations. Defaults FALSE. LF_n_cores Integer. Number cores use parallel processing latent factor prediction. Defaults 8L. LF_check Logical. TRUE, function checks output files already created valid. FALSE, function check files exist without checking integrity. Default FALSE. LF_temp_cleanup Logical. Whether delete temporary files temp_dir directory finishing LF predictions. LF_commands_only Logical. TRUE, returns command run Python script. Default FALSE. temp_dir Character. Path temporary storage intermediate files. temp_cleanup Logical. Whether clean temporary files. Defaults TRUE. verbose Logical. Whether print message upon successful saving files. Defaults FALSE. model_dir Character. Path root directory containing fitted models. function reads data RespCurv_DT subdirectory, created resp_curv_prepare_data. env_file Character. Path environment file containing paths data sources. Defaults .env. plotting_alpha Numeric. Opacity level response curve lines (0 = fully transparent, 1 = fully opaque). Default: 0.3.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Response_curves.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare and plot response curve data for Hmsc models — response_curves","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/River_Length.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the length of rivers in each Strahler order per grid cell — river_length","title":"Calculate the length of rivers in each Strahler order per grid cell — river_length","text":"function processes EU-Hydro River Network Database calculate length rivers Strahler number. Strahler number used index river network classification, higher numbers representing larger, significant river segments. function reads processes zip-compressed geographic data (GPKG files), extracts relevant information river segments, computes length rivers Strahler order per grid cell, outputs results raster files RData objects. calculated length represents total length rivers Strahler number larger (e.g., STRAHLER_5, length rivers Strahler values 5 higher).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/River_Length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the length of rivers in each Strahler order per grid cell — river_length","text":"","code":"river_length(env_file = \".env\", cleanup = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/River_Length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the length of rivers in each Strahler order per grid cell — river_length","text":"env_file Character. Path environment file containing paths data sources. Defaults .env. cleanup Logical indicating whether clean temporary files Interim directory finishing calculations. Default: FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/River_Length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the length of rivers in each Strahler order per grid cell — river_length","text":"NULL. function outputs processed files specified directories.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/River_Length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the length of rivers in each Strahler order per grid cell — river_length","text":"data provides pan-European level photo-interpreted river network, consistent surface interpretation water bodies (lakes wide rivers), drainage model (also called Drainage Network), derived EU-DEM, catchments drainage lines nodes. Data source: EU-Hydro River Network Database v013 | Temporal extent: 2006-2012; Format: Vector (GPKG); Size: 4 GB","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/River_Length.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the length of rivers in each Strahler order per grid cell — river_length","text":"DOI: https://doi.org/10.2909/393359a7-7ebd-4a52-80ac-1a18d5f3db9c Download link: https://land.copernicus.eu/en/products/eu-hydro/eu-hydro-river-network-database","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/River_Length.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the length of rivers in each Strahler order per grid cell — river_length","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Road_Intensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate road intensity per grid cell — road_intensity","title":"Calculate road intensity per grid cell — road_intensity","text":"function downloads, processes, analyzes GRIP global roads data (Meijer et al. 2018). function calculates total road lengths distance nearest road per grid cell (road type per road type).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Road_Intensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate road intensity per grid cell — road_intensity","text":"","code":"road_intensity(env_file = \".env\")"},{"path":"https://biodt.github.io/IASDT.R/reference/Road_Intensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate road intensity per grid cell — road_intensity","text":"env_file Character. Path environment file containing paths data sources. Defaults .env.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Road_Intensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate road intensity per grid cell — road_intensity","text":"NULL. function outputs processed files specified directories.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Road_Intensity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate road intensity per grid cell — road_intensity","text":"function downloads recent version Global Roads Inventory Project (GRIP) data URL specified environment variable DP_R_Roads_url. Original data format zipped file containing global road data form fgdb (EPSG:3246). LUMI HPC, loading libarchive module necessary use archive R package: module load libarchive/3.6.2-cpeGNU-23.09 distance roads calculated determining distance grid cell nearest grid cell overlaps road (nearest road line). Note different calculating actual distance nearest road line, computationally intensive performed function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Road_Intensity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate road intensity per grid cell — road_intensity","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Scale_0_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a SpatRaster object values to a range between 0 and 1 — scale_0_1","title":"Scale a SpatRaster object values to a range between 0 and 1 — scale_0_1","text":"Scale SpatRaster object (terra R package ) values range 0 1.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Scale_0_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a SpatRaster object values to a range between 0 and 1 — scale_0_1","text":"","code":"scale_0_1(raster)"},{"path":"https://biodt.github.io/IASDT.R/reference/Scale_0_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a SpatRaster object values to a range between 0 and 1 — scale_0_1","text":"raster SpatRaster; SpatRaster object scaled.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Scale_0_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a SpatRaster object values to a range between 0 and 1 — scale_0_1","text":"SpatRaster; SpatRaster object values scaled 0 1.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Scale_0_1.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Scale a SpatRaster object values to a range between 0 and 1 — scale_0_1","text":"function takes SpatRaster object input, calculates minimum maximum values, scales values range 0 1. useful normalization purposes spatial analysis modeling. function relies terra package spatial data manipulation.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Scale_0_1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scale a SpatRaster object values to a range between 0 and 1 — scale_0_1","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Scale_0_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a SpatRaster object values to a range between 0 and 1 — scale_0_1","text":"","code":"library(terra) #> terra 1.8.42 #>  #> Attaching package: ‘terra’ #> The following objects are masked from ‘package:coda’: #>  #>     varnames, varnames<- #> The following objects are masked from ‘package:magrittr’: #>  #>     extract, inset r <- rast(ncols = 10, nrows = 10) values(r) <- seq_len(terra::ncell(r))  scale_0_1(r) #> class       : SpatRaster  #> dimensions  : 10, 10, 1  (nrow, ncol, nlyr) #> resolution  : 36, 18  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84)  #> source(s)   : memory #> name        : lyr.1  #> min value   :     0  #> max value   :     1"},{"path":"https://biodt.github.io/IASDT.R/reference/Set_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up or stop parallel processing plan — set_parallel","title":"Set up or stop parallel processing plan — set_parallel","text":"Configures parallel processing future::plan() stops existing plan. stopping, resets sequential mode.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Set_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up or stop parallel processing plan — set_parallel","text":"","code":"set_parallel(   n_cores = 1L,   strategy = \"future::multisession\",   stop = FALSE,   show_log = TRUE,   future_max_size = 500L,   ... )"},{"path":"https://biodt.github.io/IASDT.R/reference/Set_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up or stop parallel processing plan — set_parallel","text":"n_cores Integer. Number cores use. NULL, defaults sequential mode. Default 1. strategy Character. parallel processing strategy use. Valid options future::sequential (sequential), future::multisession (default), future::multicore (supported Windows), future::cluster. strategy one valid options future::multicore Windows PC, defaults future::multisession. See future::plan() details. stop Logical. TRUE, stops parallel cluster resets sequential mode. FALSE (default), sets new plan. show_log Logical. TRUE (default), logs messages via cat_time(). future_max_size Numeric. Maximum allowed total size (megabytes) global variables identified. See future.globals.maxSize argument future::future.options details. Default 500L 500 MB. ... Additional arguments pass cat_time.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Set_parallel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set up or stop parallel processing plan — set_parallel","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Set_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up or stop parallel processing plan — set_parallel","text":"","code":"# Prepare working in parallel IASDT.R::set_parallel(n_cores = 2) #> Setting up parallel processing with 2 core(s) - 02:20:28 future::plan() #> multisession: #> - args: function (..., workers = c(system = 2L), envir = parent.frame()) #> - tweaked: TRUE #> - call: future::plan(strategy = strategy, workers = n_cores) #> MultisessionFutureBackend: #> Inherits: ClusterFutureBackend, MultiprocessFutureBackend, FutureBackend #> Number of workers: 2 #> Number of free workers: 2 #> Available cores: 4 #> Automatic garbage collection: FALSE #> Early signaling: TRUE #> Interrupts are enabled: TRUE #> Maximum total size of globals: 500.00 MiB #> Maximum total size of value: 500.00 MiB #> Argument ‘persistent’: FALSE #> Argument ‘wait.timeout’: 86400 #> Argument ‘wait.interval’: 0.01 #> Argument ‘wait.alpha’: 1.01 #> Argument ‘hooks’: FALSE #> Number of active futures: 0 #> Number of futures since start: 0 #> Workers of type RichSOCKcluster: #> - Summary: Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu) #> - [ OK ] Node 1/2: valid connection, alive [RichSOCKnode of a socket cluster on local host 'localhost' with pid 11473 (R version 4.5.0 (2025-04-11), x86_64-pc-linux-gnu) using socket connection #5 ('<-localhost:11413')] #> - [ OK ] Node 2/2: valid connection, alive [RichSOCKnode of a socket cluster on local host 'localhost' with pid 11472 (R version 4.5.0 (2025-04-11), x86_64-pc-linux-gnu) using socket connection #6 ('<-localhost:11413')]  # ---------------------------------------------  # Stopping parallel processing IASDT.R::set_parallel(stop = TRUE) #> Stopping parallel processing - 02:20:29 future::plan() #> sequential: #> - args: function (..., gc = TRUE, envir = parent.frame(), workers = \"<NULL>\") #> - tweaked: TRUE #> - call: future::plan(\"future::sequential\", gc = TRUE) #> FutureBackend to be launched  # ---------------------------------------------  # Prepare working in parallel using `future::cluster` IASDT.R::set_parallel(n_cores = 2, strategy = \"future::cluster\") #> Setting up parallel processing with 2 core(s) - 02:20:29 future::plan() #> cluster: #> - args: function (..., workers = c(system = 2L), envir = parent.frame()) #> - tweaked: TRUE #> - call: future::plan(strategy = strategy, workers = n_cores) #> ClusterFutureBackend: #> Inherits: MultiprocessFutureBackend, FutureBackend #> Number of workers: 2 #> Number of free workers: 2 #> Available cores: 4 #> Automatic garbage collection: FALSE #> Early signaling: TRUE #> Interrupts are enabled: FALSE #> Maximum total size of globals: 500.00 MiB #> Maximum total size of value: 500.00 MiB #> Argument ‘persistent’: FALSE #> Argument ‘wait.timeout’: 86400 #> Argument ‘wait.interval’: 0.01 #> Argument ‘wait.alpha’: 1.01 #> Argument ‘hooks’: FALSE #> Number of active futures: 0 #> Number of futures since start: 0 #> Workers of type RichSOCKcluster: #> - Summary: Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu) #> - [ OK ] Node 1/2: valid connection [RichSOCKnode of a socket cluster on local host 'localhost' with pid 11544 (R version 4.5.0 (2025-04-11), x86_64-pc-linux-gnu) using socket connection #5 ('<-localhost:11719')] #> - [ OK ] Node 2/2: valid connection [RichSOCKnode of a socket cluster on local host 'localhost' with pid 11543 (R version 4.5.0 (2025-04-11), x86_64-pc-linux-gnu) using socket connection #6 ('<-localhost:11719')]  # Stopping parallel processing IASDT.R::set_parallel(stop = TRUE) #> Stopping parallel processing - 02:20:29 future::plan() #> sequential: #> - args: function (..., gc = TRUE, envir = parent.frame(), workers = \"<NULL>\") #> - tweaked: TRUE #> - call: future::plan(\"future::sequential\", gc = TRUE) #> FutureBackend to be launched"},{"path":"https://biodt.github.io/IASDT.R/reference/Solve1.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert a matrix — solve1","title":"Invert a matrix — solve1","text":"Computes inverse square matrix using Armadillo's inv function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Solve1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invert a matrix — solve1","text":"","code":"solve1(x)"},{"path":"https://biodt.github.io/IASDT.R/reference/Solve1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invert a matrix — solve1","text":"x square matrix inverted.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Solve1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invert a matrix — solve1","text":"inverted matrix dimensions x. //' @export","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Solve2.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve a system of linear equations — solve2","title":"Solve a system of linear equations — solve2","text":"Solves system linear equations * X = B X, square matrix B matrix compatible dimensions.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Solve2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve a system of linear equations — solve2","text":"","code":"solve2(A, B)"},{"path":"https://biodt.github.io/IASDT.R/reference/Solve2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve a system of linear equations — solve2","text":"square matrix representing coefficients. B matrix vector representing constants.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Solve2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve a system of linear equations — solve2","text":"solution matrix vector X.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Solve2vect.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve a system of linear equations for a vector — solve2vect","title":"Solve a system of linear equations for a vector — solve2vect","text":"Solves system linear equations * x = B square matrix B vector.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Solve2vect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve a system of linear equations for a vector — solve2vect","text":"","code":"solve2vect(A, B)"},{"path":"https://biodt.github.io/IASDT.R/reference/Solve2vect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve a system of linear equations for a vector — solve2vect","text":"square matrix coefficients. B vector constants.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Solve2vect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve a system of linear equations for a vector — solve2vect","text":"solution vector x.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Variance_partitioning.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes and visualize variance partitioning of Hmsc models — variance_partitioning","title":"Computes and visualize variance partitioning of Hmsc models — variance_partitioning","text":"variance_partitioning_compute() function computes variance components respect given grouping fixed effects levels random effects. function inherits main functionality Hmsc::computeVariancePartitioning function, added functionality parallel computation using TensorFlow.variance_partitioning_plot() function generates plots variance partitioning JPEG files. allows sorting predictors species; e.g., mean value per predictor; original species order. also plots raw variance partitioning (relative variance partitioning multiplied Tjur-R2 value).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Variance_partitioning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes and visualize variance partitioning of Hmsc models — variance_partitioning","text":"","code":"variance_partitioning_compute(   path_model,   group = NULL,   group_names = NULL,   start = 1L,   na.ignore = FALSE,   n_cores = 8L,   use_TF = TRUE,   TF_environ = NULL,   TF_use_single = FALSE,   temp_cleanup = TRUE,   chunk_size = 50L,   verbose = TRUE,   VP_file = \"VarPar\",   VP_commands_only = FALSE )  variance_partitioning_plot(   path_model,   env_file = \".env\",   VP_file = \"VarPar\",   use_TF = TRUE,   TF_environ = NULL,   n_cores = 1,   width = 30,   height = 15,   Axis_text = 4 )"},{"path":"https://biodt.github.io/IASDT.R/reference/Variance_partitioning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes and visualize variance partitioning of Hmsc models — variance_partitioning","text":"path_model Character. Path fitted Hmsc model object. group vector numeric values corresponding group identifiers groupnames. model defined XData XFormula, default use model terms. group_names vector names group fixed effect. match group. model defined XData XFormula, default use labels model terms. start index first MCMC sample included na.ignore Logical. TRUE, covariates ignored sites focal species NA computing variance-covariance matrices species. n_cores Integer. Number CPU cores use computing variance partitioning using TensorFlow. effective use_TF TRUE. Default: 1. use_TF Logical. Whether use TensorFlow calculations. Defaults TRUE. TF_environ Character. Path Python environment. argument required use_TF TRUE Windows. Defaults NULL. TF_use_single Logical. Whether use single precision TensorFlow calculations. Defaults FALSE. temp_cleanup Logical. Whether delete temporary files processing. Default: TRUE. chunk_size Integer. Size chunk samples process parallel. relevant TensorFlow. Default: 50. verbose Logical. Whether print progress messages. Default: TRUE. VP_file Character. Name output file save results. Default: VarPar. VP_commands_only Logical. TRUE, returns commands run Python script. Default FALSE. relevant use_TF TRUE. env_file Character. Path environment file containing paths data sources. Defaults .env. width, height Numeric. Width height output plot centimeters. Default: 30 15, respectively. Axis_text Numeric. Size axis text. Default: 4.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/Variance_partitioning.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes and visualize variance partitioning of Hmsc models — variance_partitioning","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_cross_to_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multilinestring sf object representing cross in the middle of each grid cell — add_cross_to_grid","title":"Create a multilinestring sf object representing cross in the middle of each grid cell — add_cross_to_grid","text":"Create multilinestring (cross middle grid) sf object grid cell","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_cross_to_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multilinestring sf object representing cross in the middle of each grid cell — add_cross_to_grid","text":"","code":"add_cross_to_grid(sf_object = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/add_cross_to_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multilinestring sf object representing cross in the middle of each grid cell — add_cross_to_grid","text":"sf_object sf object (tibble) representing grid cells. function expects object geometry column polygon geometries. NULL, function stop error message.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_cross_to_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multilinestring sf object representing cross in the middle of each grid cell — add_cross_to_grid","text":"sf object multilinestring geometries representing crosses middle input grid cell. returned object CRS (Coordinate Reference System) input DT","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_cross_to_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a multilinestring sf object representing cross in the middle of each grid cell — add_cross_to_grid","text":"function requires sf, dplyr, purrr, tibble, tidyr packages installed loaded.","code":""},{"path":[]},{"path":"https://biodt.github.io/IASDT.R/reference/add_cross_to_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a multilinestring sf object representing cross in the middle of each grid cell — add_cross_to_grid","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_cross_to_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a multilinestring sf object representing cross in the middle of each grid cell — add_cross_to_grid","text":"","code":"IASDT.R::load_packages(package_list = c(\"dplyr\", \"sf\", \"raster\", \"ggplot2\"))  Grid <- raster::raster(     nrows = 10, ncols = 10, xmn = 0, xmx = 10,     ymn = 0, ymx = 10, crs = 4326) %>%   setNames(\"Grid\") %>%   raster::setValues(1) %>%   raster::rasterToPolygons() %>%   sf::st_as_sf()  ggplot2::ggplot() +   ggplot2::geom_sf(Grid, mapping = ggplot2::aes(), color = \"black\",                    linewidth = 0.5, fill = \"transparent\") +   ggplot2::scale_x_continuous(expand = c(0, 0, 0, 0), limits = c(0, 10)) +   ggplot2::scale_y_continuous(expand = c(0, 0, 0, 0), limits = c(0, 10)) +   ggplot2::theme_minimal()   Grid_X <- add_cross_to_grid(Grid)  ggplot2::ggplot() +   ggplot2::geom_sf(Grid, mapping = ggplot2::aes(), color = \"black\",                    linewidth = 0.5, fill = \"transparent\") +   ggplot2::geom_sf(Grid_X, mapping = ggplot2::aes(), color = \"red\",                    linewidth = 0.5, inherit.aes = TRUE) +   ggplot2::scale_x_continuous(expand = c(0, 0, 0, 0), limits = c(0, 10)) +   ggplot2::scale_y_continuous(expand = c(0, 0, 0, 0), limits = c(0, 10)) +   ggplot2::theme_minimal()"},{"path":"https://biodt.github.io/IASDT.R/reference/add_diagonals_to_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multilinestring sf object for the diagonal and off-diagonal lines for each grid cell — add_diagonals_to_grid","title":"Create a multilinestring sf object for the diagonal and off-diagonal lines for each grid cell — add_diagonals_to_grid","text":"function takes sf object representing grid creates new sf object grid cell represented multilinestring geometry consisting diagonal -diagonal lines.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_diagonals_to_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multilinestring sf object for the diagonal and off-diagonal lines for each grid cell — add_diagonals_to_grid","text":"","code":"add_diagonals_to_grid(sf_object = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/add_diagonals_to_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multilinestring sf object for the diagonal and off-diagonal lines for each grid cell — add_diagonals_to_grid","text":"sf_object sf object (tibble) representing spatial grid. function expects object geometry column polygons representing grid cells. NULL, function stop error message.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_diagonals_to_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multilinestring sf object for the diagonal and off-diagonal lines for each grid cell — add_diagonals_to_grid","text":"sf object row corresponds grid cell input, represented multilinestring geometry diagonal -diagonal lines. returned object retains coordinate reference system (CRS) input.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_diagonals_to_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a multilinestring sf object for the diagonal and off-diagonal lines for each grid cell — add_diagonals_to_grid","text":"function requires sf, dplyr, purrr, tibble, tidyr packages installed loaded.","code":""},{"path":[]},{"path":"https://biodt.github.io/IASDT.R/reference/add_diagonals_to_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a multilinestring sf object for the diagonal and off-diagonal lines for each grid cell — add_diagonals_to_grid","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_diagonals_to_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a multilinestring sf object for the diagonal and off-diagonal lines for each grid cell — add_diagonals_to_grid","text":"","code":"IASDT.R::load_packages(package_list = c(\"dplyr\", \"sf\", \"raster\", \"ggplot2\"))  Grid <- raster::raster(nrows = 10, ncols = 10, xmn = 0, xmx = 10,                        ymn = 0, ymx = 10, crs = 4326) %>%   setNames(\"Grid\") %>%   raster::setValues(1) %>%   raster::rasterToPolygons() %>%   sf::st_as_sf()  ggplot2::ggplot() +   ggplot2::geom_sf(Grid, mapping = ggplot2::aes(), color = \"black\",                    linewidth = 0.5, fill = \"transparent\") +   ggplot2::scale_x_continuous(expand = c(0, 0, 0, 0), limits = c(0, 10)) +   ggplot2::scale_y_continuous(expand = c(0, 0, 0, 0), limits = c(0, 10)) +   ggplot2::theme_minimal()   Grid_X <- add_diagonals_to_grid(sf_object = Grid)  ggplot2::ggplot() +   ggplot2::geom_sf(Grid, mapping = ggplot2::aes(), color = \"black\",                    linewidth = 0.5, fill = \"transparent\") +   ggplot2::geom_sf(Grid_X, mapping = ggplot2::aes(), color = \"red\",                    linewidth = 0.5, inherit.aes = TRUE) +   ggplot2::scale_x_continuous(expand = c(0, 0, 0, 0), limits = c(0, 10)) +   ggplot2::scale_y_continuous(expand = c(0, 0, 0, 0), limits = c(0, 10)) +   ggplot2::theme_minimal()"},{"path":"https://biodt.github.io/IASDT.R/reference/add_image_to_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an image to an existing plot in R — add_image_to_plot","title":"Add an image to an existing plot in R — add_image_to_plot","text":"function allows user add image existing plot R specifying image object, position, size. function calculates necessary dimensions places image accordingly. function uses existing plot's coordinate system accounts current plot dimensions ensure accurate placement image. also allows interpolation, can improve visual quality image.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_image_to_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an image to an existing plot in R — add_image_to_plot","text":"","code":"add_image_to_plot(image_object, x, y, width, interpolate = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/add_image_to_plot.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Add an image to an existing plot in R — add_image_to_plot","text":"source code function taken stackoverflow question.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_image_to_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an image to an existing plot in R — add_image_to_plot","text":"image_object image object added plot, expected array-like structure (e.g., read png::readPNG jpeg::readJPEG). x, y Numeric, x-coordinate y-coordinate (plot units) center image placed. width Numeric, desired width image plot units (pixels inches). function calculate corresponding height preserve image's aspect ratio. interpolate Logical, whether apply linear interpolation image drawing. Defaults TRUE. Passed directly graphics::rasterImage. Interpolation can improve image quality may take longer render.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_image_to_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an image to an existing plot in R — add_image_to_plot","text":"function return value modifies current plot adding image.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_image_to_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add an image to an existing plot in R — add_image_to_plot","text":"function stop error message required arguments (image_object, x, y, width) NULL.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_image_to_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an image to an existing plot in R — add_image_to_plot","text":"","code":"library(png) URL <- paste0(\"https://upload.wikimedia.org/wikipedia/commons/\",     \"e/e1/Jupiter_%28transparent%29.png\") z <- tempfile() utils::download.file(URL, z, mode = \"wb\", quiet = TRUE) pic <- png::readPNG(z) file.remove(z) # cleanup #> [1] TRUE  image(volcano) add_image_to_plot(pic, x = 0.3, y = 0.5, width = 0.2) add_image_to_plot(pic, x = 0.7, y = 0.7, width = 0.2) add_image_to_plot(pic, x = 0.7, y = 0.2, width = 0.1)"},{"path":"https://biodt.github.io/IASDT.R/reference/add_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a horizontal or vertical line to the current plot — add_line","title":"Add a horizontal or vertical line to the current plot — add_line","text":"Add horizontal vertical line current plot","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a horizontal or vertical line to the current plot — add_line","text":"","code":"add_line(at = NULL, outer = FALSE, horizontal = TRUE, ...)"},{"path":"https://biodt.github.io/IASDT.R/reference/add_line.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Add a horizontal or vertical line to the current plot — add_line","text":"source code function taken stackoverflow question.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a horizontal or vertical line to the current plot — add_line","text":"Numeric; relative location line plotted. NULL. outer Logical; TRUE, line plotted outside plotting area. Default FALSE. horizontal Logical; TRUE (default), horizontal line added. FALSE, vertical line added. ... Additional graphical parameters passed graphics::abline.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a horizontal or vertical line to the current plot — add_line","text":"Invisible; function called side effect drawing current plot.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a horizontal or vertical line to the current plot — add_line","text":"","code":"# Horizontal line par(oma = c(1, 1, 1, 1), mar = c(3, 3, 1, 1)) plot(seq_len(100)) add_line(at = 0.75) add_line(at = 0.25, outer = TRUE, lwd = 2) add_line(at = 0.5, outer = TRUE, lwd = 2, col = \"red\")   # ---------------------------------------------  # Vertical line plot(seq_len(100)) add_line(horizontal = FALSE, at = 0.75) add_line(horizontal = FALSE, at = 0.25, outer = TRUE, lwd = 2) add_line(horizontal = FALSE, at = 0.5, outer = TRUE, lwd = 2, col = \"red\")"},{"path":"https://biodt.github.io/IASDT.R/reference/add_missing_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add missing columns to a data frame with specified fill values — add_missing_columns","title":"Add missing columns to a data frame with specified fill values — add_missing_columns","text":"function checks data frame missing columns specified user. missing, adds columns data frame, filling specified value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_missing_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add missing columns to a data frame with specified fill values — add_missing_columns","text":"","code":"add_missing_columns(DT, FillVal = NA_character_, ...)"},{"path":"https://biodt.github.io/IASDT.R/reference/add_missing_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add missing columns to a data frame with specified fill values — add_missing_columns","text":"DT data frame missing columns added. parameter NULL. FillVal value fill missing columns . parameter defaults NA_character_, can changed scalar value required. ... Column names character strings.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_missing_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add missing columns to a data frame with specified fill values — add_missing_columns","text":"data frame missing columns added, missing.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_missing_columns.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add missing columns to a data frame with specified fill values — add_missing_columns","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/add_missing_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add missing columns to a data frame with specified fill values — add_missing_columns","text":"","code":"mtcars2 <- dplyr::select(mtcars, seq_len(3)) %>%   head() %>%   tibble::as_tibble()  mtcars2 #> # A tibble: 6 × 3 #>     mpg   cyl  disp #>   <dbl> <dbl> <dbl> #> 1  21       6   160 #> 2  21       6   160 #> 3  22.8     4   108 #> 4  21.4     6   258 #> 5  18.7     8   360 #> 6  18.1     6   225  # -------------------------------------------  mtcars2 %>%  add_missing_columns(FillVal = NA_character_, A, B, C) %>%  add_missing_columns(FillVal = as.integer(10), D) #> # A tibble: 6 × 7 #>     mpg   cyl  disp A     B     C         D #>   <dbl> <dbl> <dbl> <chr> <chr> <chr> <int> #> 1  21       6   160 NA    NA    NA       10 #> 2  21       6   160 NA    NA    NA       10 #> 3  22.8     4   108 NA    NA    NA       10 #> 4  21.4     6   258 NA    NA    NA       10 #> 5  18.7     8   360 NA    NA    NA       10 #> 6  18.1     6   225 NA    NA    NA       10  # -------------------------------------------  AddCols <- c(\"Add1\", \"Add2\") mtcars2 %>%  add_missing_columns(FillVal = NA_real_, AddCols) #> # A tibble: 6 × 5 #>     mpg   cyl  disp  Add1  Add2 #>   <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160    NA    NA #> 2  21       6   160    NA    NA #> 3  22.8     4   108    NA    NA #> 4  21.4     6   258    NA    NA #> 5  18.7     8   360    NA    NA #> 6  18.1     6   225    NA    NA"},{"path":"https://biodt.github.io/IASDT.R/reference/all_objects_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of objects in memory — all_objects_sizes","title":"Size of objects in memory — all_objects_sizes","text":"function calculates size objects global environment R using lobstr::obj_size prints summary objects greater specified size threshold. useful memory management identifying large objects workspace.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/all_objects_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of objects in memory — all_objects_sizes","text":"","code":"all_objects_sizes(   greater_than = 0,   in_function = FALSE,   SizeDecimals = 2,   n_objects = Inf )"},{"path":"https://biodt.github.io/IASDT.R/reference/all_objects_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of objects in memory — all_objects_sizes","text":"greater_than Numeric. Size threshold MB. objects larger value shown. Default 0, means objects shown. greater_than must non-negative number. in_function Logical. controls scope function. indicates whether execution done inside outside function. Defaults FALSE show sizes objects global environment. set TRUE, sizes objects function returned. SizeDecimals Integer; representing number decimal places show Size column. Defaults 2. n_objects Number objects show. Defaults Inf meaning show available objects.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/all_objects_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of objects in memory — all_objects_sizes","text":"function prints tibble containing variables' names, sizes MB, percentage total size variables. objects meet criteria, message printed instead. Output sorted descending order size objects. function also prints total size variables number objects examined.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/all_objects_sizes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Size of objects in memory — all_objects_sizes","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/all_objects_sizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of objects in memory — all_objects_sizes","text":"","code":"AA1 <<- rep(seq_len(1000), 10000) AA2 <<- rep(seq_len(1000), 100)  # All objects in memory all_objects_sizes() #> --------------------------------------------------- #> \t4 Object(s) fulfill the criteria #> --------------------------------------------------- #> # A tibble: 4 × 4 #>   Object           Class                  Size Percent #>   <chr>            <chr>                 <dbl> <chr>   #> 1 AA1              integer               38.15 99.00%  #> 2 AA2              integer                0.38 1.00%   #> 3 CHELSA_variables tbl_df_tbl_data.frame  0.02 0.00%   #> 4 .Random.seed     integer                0    0.00%   #> Object sizes are in MB. #> --------------------------------------------------- #>   # Objects larger than 1 MB all_objects_sizes(greater_than = 1) #> --------------------------------------------------- #> \t1 Object(s) fulfill the criteria #> --------------------------------------------------- #> # A tibble: 1 × 4 #>   Object Class    Size Percent #>   <chr>  <chr>   <dbl> <chr>   #> 1 AA1    integer 38.15 99.00%  #> Object sizes are in MB. #> --------------------------------------------------- #>   # Objects larger than 50 MB all_objects_sizes(greater_than = 50) #> No object has Size > 50 MB #>   # When called with another function, it shows the objects only available # within the function TestFun <- function(XX = 10) {   Y <- 20   C <- matrix(data = seq_len(10000), nrow = 100, ncol = 100)   all_objects_sizes(in_function = TRUE) }  TestFun() #> --------------------------------------------------- #> \t3 Object(s) fulfill the criteria #> --------------------------------------------------- #> # A tibble: 3 × 4 #>   Object Class         Size Percent #>   <chr>  <chr>        <dbl> <chr>   #> 1 C      matrix_array  0.04 100.00% #> 2 XX     numeric       0    0.00%   #> 3 Y      numeric       0    0.00%   #> Object sizes are in MB. #> --------------------------------------------------- #>   TestFun(XX = \"TEST\") #> --------------------------------------------------- #> \t3 Object(s) fulfill the criteria #> --------------------------------------------------- #> # A tibble: 3 × 4 #>   Object Class         Size Percent #>   <chr>  <chr>        <dbl> <chr>   #> 1 C      matrix_array  0.04 100.00% #> 2 XX     character     0    0.00%   #> 3 Y      numeric       0    0.00%   #> Object sizes are in MB. #> --------------------------------------------------- #>"},{"path":"https://biodt.github.io/IASDT.R/reference/assign_env_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign environment variables from a .env file — assign_env_vars","title":"Assign environment variables from a .env file — assign_env_vars","text":"function reads environment variables specified .env file assigns variables R environment based data frame containing variable names, values, checks directories files. designed facilitate management environment variables structured reproducible manner.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/assign_env_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign environment variables from a .env file — assign_env_vars","text":"","code":"assign_env_vars(env_file = \".env\", env_variables_data = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/assign_env_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign environment variables from a .env file — assign_env_vars","text":"env_file Character. Path environment file containing paths data sources. Defaults .env. env_variables_data data.frame. data frame tibble containing columns VarName, Value, CheckDir, CheckFile. row specifies environment variable, name assign , whether check directory file. structure allows additional validation checks variables imported.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/assign_env_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign environment variables from a .env file — assign_env_vars","text":"function used side effects setting environment variables R environment. assigns variable .env file R environment name specified env_variables_data data frame.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/assign_env_vars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assign environment variables from a .env file — assign_env_vars","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/assign_if_not_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a value to a variable if it does not already exist in the specified environment — assign_if_not_exist","title":"Assign a value to a variable if it does not already exist in the specified environment — assign_if_not_exist","text":"function checks given variable exists specified environment (global environment default). variable exist, assigns given value . variable already exists, prints current value variable. function designed prevent overwriting existing variables unintentionally.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/assign_if_not_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a value to a variable if it does not already exist in the specified environment — assign_if_not_exist","text":"","code":"assign_if_not_exist(variable, value, environment = globalenv())"},{"path":"https://biodt.github.io/IASDT.R/reference/assign_if_not_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a value to a variable if it does not already exist in the specified environment — assign_if_not_exist","text":"variable Character; name variable checked potentially assigned value. value ; value assigned variable already exist. environment environment; environment check existence variable potentially assign value. Defaults global environment.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/assign_if_not_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a value to a variable if it does not already exist in the specified environment — assign_if_not_exist","text":"function explicitly returns NULL, primary effect side-effect assigning value variable environment printing current value existing variable.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/assign_if_not_exist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assign a value to a variable if it does not already exist in the specified environment — assign_if_not_exist","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/assign_if_not_exist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign a value to a variable if it does not already exist in the specified environment — assign_if_not_exist","text":"","code":"assign_if_not_exist(variable = \"x\", value = TRUE) print(x) #> [1] TRUE  # --------------------------------------------------  y <- 10 # y exists and thus its value was not changed assign_if_not_exist(variable = \"y\", value = TRUE) print(y) #> [1] 10"},{"path":"https://biodt.github.io/IASDT.R/reference/bash_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Read command line arguments passed to an R script — bash_variables","title":"Read command line arguments passed to an R script — bash_variables","text":"function reads command line arguments passed R script executed via bash command line assigns global environment R session. allows dynamic passing variables bash script R script.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/bash_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read command line arguments passed to an R script — bash_variables","text":"","code":"bash_variables()"},{"path":"https://biodt.github.io/IASDT.R/reference/bash_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read command line arguments passed to an R script — bash_variables","text":"function return anything side effect assigning variables global environment.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/bash_variables.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read command line arguments passed to an R script — bash_variables","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/boundary_to_WKT.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the boundaries of the requested GBIF data — boundary_to_WKT","title":"Determine the boundaries of the requested GBIF data — boundary_to_WKT","text":"function constructs Well-Known Text (WKT) string representing polygon outlines specified boundaries. used define area interest downloading GBIF data rgbif::pred_within() function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/boundary_to_WKT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the boundaries of the requested GBIF data — boundary_to_WKT","text":"","code":"boundary_to_WKT(left = NULL, right = NULL, bottom = NULL, top = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/boundary_to_WKT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the boundaries of the requested GBIF data — boundary_to_WKT","text":"left, right, bottom, top Numeric, left, right, bottom, top boundary area.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/boundary_to_WKT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the boundaries of the requested GBIF data — boundary_to_WKT","text":"character string representing WKT polygon outlines specified boundaries.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/boundary_to_WKT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine the boundaries of the requested GBIF data — boundary_to_WKT","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/boundary_to_WKT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the boundaries of the requested GBIF data — boundary_to_WKT","text":"","code":"IASDT.R::boundary_to_WKT(left = 20, right = 30, bottom = 40, top = 50) #> [1] \"POLYGON((20 40,30 40,30 50,20 50,20 40))\""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Print time difference — cat_diff","title":"Print time difference — cat_diff","text":"function calculates time difference given initial time current time prints specified prefix. Optionally, can also print session summary.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print time difference — cat_diff","text":"","code":"cat_diff(   init_time,   chunk_text = \"Session summary\",   prefix = \"Completed in \",   cat_info = FALSE,   level = 0L,   cat_timestamp = FALSE,   ... )"},{"path":"https://biodt.github.io/IASDT.R/reference/cat_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print time difference — cat_diff","text":"init_time POSIXct. initial time difference calculated. chunk_text Character. message printed chunk info. Default value: Session summary. See: info_chunk information. prefix Character. prefix prepend printed time difference. Defaults \"Completed \". cat_info Logical. TRUE, prints session summary using info_chunk (\"Session summary\"). Defaults FALSE. level integer; level message printed. e.g. level = 1, following string printed beginning message: \"   >>>   \". Default 0. cat_timestamp logical; whether include time timestamp. Default TRUE. FALSE, text printed. ... Additional arguments cat_time.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print time difference — cat_diff","text":"function used side effect printing console return value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_diff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print time difference — cat_diff","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print time difference — cat_diff","text":"","code":"RefTime <- (lubridate::now() - lubridate::seconds(45)) cat_diff(RefTime) #> Completed in 00:00:45  RefTime <- (lubridate::now() -     (lubridate::minutes(50) + lubridate::seconds(45))) cat_diff(RefTime) #> Completed in 00:50:45  RefTime <- (lubridate::now() - lubridate::minutes(50)) cat_diff(RefTime) #> Completed in 00:50:00  RefTime <- (lubridate::now() - lubridate::minutes(70)) cat_diff(RefTime) #> Completed in 01:10:00  RefTime <- (lubridate::now() - lubridate::hours(4)) cat_diff(RefTime) #> Completed in 04:00:00  RefTime <- lubridate::now() -   (lubridate::hours(4) + lubridate::minutes(50) + lubridate::seconds(45)) cat_diff(RefTime) #> Completed in 04:50:45"},{"path":"https://biodt.github.io/IASDT.R/reference/cat_sep.html","id":null,"dir":"Reference","previous_headings":"","what":"Print separator(s) to the console — cat_sep","title":"Print separator(s) to the console — cat_sep","text":"function prints customizable separator lines console, optionally preceded followed empty lines. useful improving readability console output R scripts interactive sessions.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_sep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print separator(s) to the console — cat_sep","text":"","code":"cat_sep(   n_separators = 1L,   sep_lines_before = 0L,   sep_lines_after = 1L,   line_char = \"-\",   line_char_rep = 50L,   cat_bold = FALSE,   cat_red = FALSE,   ... )"},{"path":"https://biodt.github.io/IASDT.R/reference/cat_sep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print separator(s) to the console — cat_sep","text":"n_separators integer; number separator lines print. Default 1. sep_lines_before, sep_lines_after integer; number extra empty lines print separator lines. Default 0 1, respectively. line_char character; character used construct separator line. Default \"-\". line_char_rep integer; number times character repeated form separator line. Default 50. cat_bold logical; whether print text bold. Default FALSE. cat_red logical; whether print text red. Default FALSE. ... additional arguments passed base::cat().","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_sep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print separator(s) to the console — cat_sep","text":"function called side effect (printing console) return meaningful value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_sep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print separator(s) to the console — cat_sep","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_sep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print separator(s) to the console — cat_sep","text":"","code":"cat_sep() #> --------------------------------------------------  cat_sep(2) #> -------------------------------------------------- #> --------------------------------------------------  cat_sep(2,2,3) #>  #>  #> -------------------------------------------------- #> -------------------------------------------------- #>  #>   cat_sep(2,2,3, line_char = \"*\") #>  #>  #> ************************************************** #> ************************************************** #>  #>   cat_sep(2,2,3, line_char = \"*\", line_char_rep = 20) #>  #>  #> ******************** #> ******************** #>  #>"},{"path":"https://biodt.github.io/IASDT.R/reference/cat_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Print text with time stamp — cat_time","title":"Print text with time stamp — cat_time","text":"function prints given text followed current time (optionally date) console. allows customization time zone, inclusion date, number newline characters print message.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print text with time stamp — cat_time","text":"","code":"cat_time(   text = \"\",   msg_n_lines = 1L,   cat_timestamp = TRUE,   cat_bold = FALSE,   cat_red = FALSE,   cat_date = FALSE,   time_zone = \"CET\",   level = 0L,   ... )"},{"path":"https://biodt.github.io/IASDT.R/reference/cat_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print text with time stamp — cat_time","text":"text character; text print timestamp. empty (default), timestamp printed. msg_n_lines integer; number newline characters print message. Default 1. cat_timestamp logical; whether include time timestamp. Default TRUE. FALSE, text printed. cat_bold logical; whether print text bold. Default FALSE. cat_red logical; whether print text red. Default FALSE. cat_date logical; whether include date timestamp. effective time TRUE. Default FALSE, meaning time printed. TRUE, date printed format \"%d/%m/%Y %X\". time_zone character; time zone use timestamp. Default CET. level integer; level message printed. e.g. level = 1, following string printed beginning message: \"   >>>   \". Default 0. ... additional arguments passed cat.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print text with time stamp — cat_time","text":"function called side effect printing console.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_time.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print text with time stamp — cat_time","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cat_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print text with time stamp — cat_time","text":"","code":"cat_time() #> 02:20:41  cat_time(cat_date = TRUE) #> 23/04/2025 02:20:41  cat_time(\"time now\") #> time now - 02:20:41  cat_time(\"\\n\\nTime now\", msg_n_lines = 2L, level = 1L) #>  #>  #>   >>>  Time now - 02:20:41 #>    cat_time(   \"\\ntime now\", cat_date = TRUE, cat_bold = TRUE, cat_red = TRUE,   msg_n_lines = 2L, level = 1L) #>  #>   >>>  time now - 23/04/2025 02:20:41 #>    # The use of levels {   cat_time(\"Task 1\")   cat_time(\"subtask L1\", level = 1L)   cat_time(\"subtask L2\", level = 2L)   cat_time(\"subtask L3\", level = 3L) } #> Task 1 - 02:20:41 #>   >>>  subtask L1 - 02:20:41 #>   >>>  >>>  subtask L2 - 02:20:41 #>   >>>  >>>  >>>  subtask L3 - 02:20:41"},{"path":"https://biodt.github.io/IASDT.R/reference/cc.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate without quotes — cc","title":"Concatenate without quotes — cc","text":"function takes one expressions concatenates single string without quotes. particularly useful creating strings variable names expressions without including usual quotes.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate without quotes — cc","text":"","code":"cc(...)"},{"path":"https://biodt.github.io/IASDT.R/reference/cc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate without quotes — cc","text":"... strings concatenated. Note numeric values converted strings passed.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate without quotes — cc","text":"character string representing concatenated values input expressions.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Concatenate without quotes — cc","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/cc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate without quotes — cc","text":"","code":"cc(A, B, C) #> [1] \"A\" \"B\" \"C\"  # -------------------------------------------  cc(A, B, \"A and B\") #> [1] \"A\"       \"B\"       \"A and B\"  # -------------------------------------------  # this does not work try(cc(A, B, \"A and B\", 10)) #> Error in sym(expr) : Can't convert a double vector to a symbol.  # this works cc(A, B, \"A and B\", \"10\") #> [1] \"A\"       \"B\"       \"A and B\" \"10\""},{"path":"https://biodt.github.io/IASDT.R/reference/check_RStudio.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the installed RStudio version is up to date — check_RStudio","title":"Check if the installed RStudio version is up to date — check_RStudio","text":"function checks current installed version RStudio latest version available online. versions match, suggests updating RStudio.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_RStudio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the installed RStudio version is up to date — check_RStudio","text":"","code":"check_RStudio()"},{"path":"https://biodt.github.io/IASDT.R/reference/check_RStudio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the installed RStudio version is up to date — check_RStudio","text":"Side effects include printing messages console regarding status RStudio version.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_RStudio.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if the installed RStudio version is up to date — check_RStudio","text":"function requires internet access check latest version RStudio online. called outside RStudio, fetch display latest version without comparing.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_RStudio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if the installed RStudio version is up to date — check_RStudio","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_RStudio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the installed RStudio version is up to date — check_RStudio","text":"","code":"try(check_RStudio()) #> This function was not called from RStudio. No version comparison was done. The most recent version of RStudio is 2024.12.1.563"},{"path":"https://biodt.github.io/IASDT.R/reference/check_URL.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of a URL — check_URL","title":"Check the validity of a URL — check_URL","text":"function opens connection specified URL check validity. returns TRUE URL valid (.e., connection can opened), FALSE otherwise.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_URL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of a URL — check_URL","text":"","code":"check_URL(URL, timeout = 2)"},{"path":"https://biodt.github.io/IASDT.R/reference/check_URL.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Check the validity of a URL — check_URL","text":"source code function taken stackoverflow discussion.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_URL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of a URL — check_URL","text":"URL Character. URL checked. timeout Numeric. Timeout seconds connection attempt. Default 2 seconds.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_URL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of a URL — check_URL","text":"logical value: TRUE URL valid, FALSE .","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_URL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the validity of a URL — check_URL","text":"","code":"urls <- c(      \"http://www.amazon.com\", \"http://this.isafakelink.biz\",      \"https://stackoverflow.com\", \"https://stack-overflow.com\") sapply(urls, check_URL) #>       http://www.amazon.com http://this.isafakelink.biz  #>                        TRUE                       FALSE  #>   https://stackoverflow.com  https://stack-overflow.com  #>                        TRUE                        TRUE"},{"path":"https://biodt.github.io/IASDT.R/reference/check_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check function arguments for specific types — check_args","title":"Check function arguments for specific types — check_args","text":"function checks specified arguments function match expected type. useful validating function inputs.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check function arguments for specific types — check_args","text":"","code":"check_args(args_all, args_to_check, args_type)"},{"path":"https://biodt.github.io/IASDT.R/reference/check_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check function arguments for specific types — check_args","text":"args_all Character vector. Input parameters function. Usually result formals() function args_to_check Character vector. Names arguments checked. args_type Character. expected type arguments. Must one \"character\", \"logical\", \"numeric\".","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check function arguments for specific types — check_args","text":"function return value stop execution throw error specified arguments match expected type.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_args.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check function arguments for specific types — check_args","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_quarto.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the installed Quarto version is up to date — check_quarto","title":"Check if the installed Quarto version is up to date — check_quarto","text":"function compares installed Quarto version user's system latest version available online. versions differ, suggests user update Quarto. uses web scraping find latest version available Quarto GitHub releases page system command find installed version.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_quarto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the installed Quarto version is up to date — check_quarto","text":"","code":"check_quarto(pre_release = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/check_quarto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the installed Quarto version is up to date — check_quarto","text":"pre_release Logical. Whether check pre-release versions. Default FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_quarto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the installed Quarto version is up to date — check_quarto","text":"message indicating whether installed Quarto version date suggesting update .","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_quarto.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if the installed Quarto version is up to date — check_quarto","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_quarto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the installed Quarto version is up to date — check_quarto","text":"","code":"check_quarto() #> Quarto is not available in the system. #> Latest quarto version is v1.6.43 [installed: NA] #>"},{"path":"https://biodt.github.io/IASDT.R/reference/check_stack_in_memory.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a raster stack reads from disk or memory — check_stack_in_memory","title":"Check if a raster stack reads from disk or memory — check_stack_in_memory","text":"function checks whether layers RasterStack object stored memory read disk.  prints messages indicating whether layers memory, layers disk, mix . mix, specifies layers disk.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_stack_in_memory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a raster stack reads from disk or memory — check_stack_in_memory","text":"","code":"check_stack_in_memory(stack = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/check_stack_in_memory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a raster stack reads from disk or memory — check_stack_in_memory","text":"stack RasterStack object. NULL RasterStack, function stop error.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_stack_in_memory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a raster stack reads from disk or memory — check_stack_in_memory","text":"return value, prints messages console.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_stack_in_memory.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if a raster stack reads from disk or memory — check_stack_in_memory","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_stack_in_memory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a raster stack reads from disk or memory — check_stack_in_memory","text":"","code":"library(raster) logo <- raster(system.file(\"external/rlogo.grd\", package = \"raster\")) logo@data@inmemory #> [1] FALSE logo@data@fromdisk #> [1] TRUE logo@file@name #> [1] \"/home/runner/work/_temp/Library/raster/external/rlogo.grd\"  # -------------------------------------------  # A raster stack reading from files ST2 <- raster::stack(logo, logo) check_stack_in_memory(ST2) #> All stack layers reads from memory c(ST2[[1]]@data@inmemory, ST2[[2]]@data@inmemory) #> [1] FALSE FALSE c(ST2[[1]]@data@fromdisk, ST2[[2]]@data@fromdisk) #> [1] TRUE TRUE c(ST2[[1]]@file@name, ST2[[2]]@file@name) #> [1] \"/home/runner/work/_temp/Library/raster/external/rlogo.grd\" #> [2] \"/home/runner/work/_temp/Library/raster/external/rlogo.grd\"  # -------------------------------------------  logo2 <- raster::readAll(logo) ST3 <- raster::stack(logo, logo2) check_stack_in_memory(ST3) #> [1] \"Layers numbered (1) reads from disk\" c(ST3[[1]]@data@inmemory, ST3[[2]]@data@inmemory) #> [1] FALSE  TRUE c(ST3[[1]]@data@fromdisk, ST3[[2]]@data@fromdisk) #> [1]  TRUE FALSE c(ST3[[1]]@file@name, ST3[[2]]@file@name) #> [1] \"/home/runner/work/_temp/Library/raster/external/rlogo.grd\" #> [2] \"\""},{"path":"https://biodt.github.io/IASDT.R/reference/check_system_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Check system commands availability — check_system_command","title":"Check system commands availability — check_system_command","text":"function checks list system commands available user's PATH. commands missing, stops execution returns informative error message.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_system_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check system commands availability — check_system_command","text":"","code":"check_system_command(commands, warning = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/check_system_command.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check system commands availability — check_system_command","text":"commands character vector system command names check (e.g., c(\"git\", \"Rscript\", \"unzip\")). warning Logical. Whether issue warning command missing. Defaults TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_system_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check system commands availability — check_system_command","text":"function returns TRUE specified commands available system, FALSE available.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_system_command.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check system commands availability — check_system_command","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_system_command.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check system commands availability — check_system_command","text":"","code":"check_system_command(c(\"unzip\", \"head\", \"curl\", \"missing\")) #> Warning: The following tool(s) are missing: missing #> [1] FALSE"},{"path":"https://biodt.github.io/IASDT.R/reference/check_tiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a tiff file corrupted — check_tiff","title":"Check if a tiff file corrupted — check_tiff","text":"function checks provided tiff file corrupted attempting describe using terra package searching presence \"Driver\" string description, indicates valid tiff file. string found, function returns TRUE FALSE otherwise. function works also reading netCDF files terra package.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_tiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a tiff file corrupted — check_tiff","text":"","code":"check_tiff(x = NULL, warning = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/check_tiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a tiff file corrupted — check_tiff","text":"x Character; file path tiff file checked. function stop error x NULL file exist. warning Logical. TRUE, function issue warning file exist.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_tiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a tiff file corrupted — check_tiff","text":"Logical; returns TRUE tiff file corrupted (.e., can described contains \"Driver\" description), FALSE otherwise.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_tiff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if a tiff file corrupted — check_tiff","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_tiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a tiff file corrupted — check_tiff","text":"","code":"(f <- system.file(\"ex/elev.tif\", package=\"terra\")) #> [1] \"/home/runner/work/_temp/Library/terra/ex/elev.tif\"  check_tiff(x = f) #> [1] TRUE"},{"path":"https://biodt.github.io/IASDT.R/reference/check_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the Integrity of a ZIP file — check_zip","title":"Check the Integrity of a ZIP file — check_zip","text":"Tests integrity ZIP file using unzip -t command. Verifies file exists, non-empty, detectable errors compressed data. Returns FALSE message file invalid unzip unavailable.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the Integrity of a ZIP file — check_zip","text":"","code":"check_zip(file)"},{"path":"https://biodt.github.io/IASDT.R/reference/check_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the Integrity of a ZIP file — check_zip","text":"file Character. path ZIP file check. Must single, non-empty string.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the Integrity of a ZIP file — check_zip","text":"Logical: TRUE file exists, non-empty, passes integrity check; FALSE otherwise.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/check_zip.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check the Integrity of a ZIP file — check_zip","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/clear_console.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear the console — clear_console","title":"Clear the console — clear_console","text":"function clears console RStudio sending form feed character. run RStudio, prints message indicating function supported.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/clear_console.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear the console — clear_console","text":"","code":"clear_console()"},{"path":"https://biodt.github.io/IASDT.R/reference/clear_console.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear the console — clear_console","text":"invisible NULL indicate function completed without returning meaningful value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/clear_console.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Clear the console — clear_console","text":"function checks run RStudio examining RSTUDIO environment variable. function run RStudio, clear console instead print message.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/clear_console.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear the console — clear_console","text":"","code":"clear_console() #> This function does not work outside of RStudio."},{"path":"https://biodt.github.io/IASDT.R/reference/clip_raster_by_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip a raster layer by a spatial polygon — clip_raster_by_polygon","title":"Clip a raster layer by a spatial polygon — clip_raster_by_polygon","text":"function clips raster layer using specified spatial polygon, effectively masking raster outside polygon area. resulting clipped raster retains original raster's properties values within polygon's bounds.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/clip_raster_by_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip a raster layer by a spatial polygon — clip_raster_by_polygon","text":"","code":"clip_raster_by_polygon(raster = NULL, shape = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/clip_raster_by_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip a raster layer by a spatial polygon — clip_raster_by_polygon","text":"raster RasterLayer object clipped. raster layer masked polygon. shape Extent object, object Extent object can extracted.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/clip_raster_by_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip a raster layer by a spatial polygon — clip_raster_by_polygon","text":"RasterLayer object representing portion input raster falls within specified polygon. returned raster contains data original within polygon's bounds masked (set NA) outside .","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/clip_raster_by_polygon.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Clip a raster layer by a spatial polygon — clip_raster_by_polygon","text":"function requires 'raster' 'sp' packages.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/clip_raster_by_polygon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clip a raster layer by a spatial polygon — clip_raster_by_polygon","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/clip_raster_by_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip a raster layer by a spatial polygon — clip_raster_by_polygon","text":"","code":"library(sp) library(raster) library(rworldmap) #> ### Welcome to rworldmap ### #> For a short introduction type : \t vignette('rworldmap')  # Example Polygon SPDF <- getMap(resolution = \"low\") %>%    subset(NAME == \"Germany\")  # Example RasterLayer r <- raster::raster(nrow = 1e3, ncol = 1e3, crs = proj4string(SPDF)) r[] <- seq_len(length(r)) plot(r) plot(SPDF, add = TRUE)   # ----------------------------------  SPDF_DE <- clip_raster_by_polygon(r, SPDF) plot(raster::extent(SPDF_DE), axes = FALSE, xlab = \"\", ylab = \"\") plot(SPDF_DE, add = TRUE) plot(SPDF, add = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/detect_alias.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect aliased variables in a linear model — detect_alias","title":"Detect aliased variables in a linear model — detect_alias","text":"function identifies aliased (linearly dependent) variables linear model adding constant column data frame, fitting linear model, using alias function detect aliased variables.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/detect_alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect aliased variables in a linear model — detect_alias","text":"","code":"detect_alias(data, verbose = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/detect_alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect aliased variables in a linear model — detect_alias","text":"data data frame tibble containing variables checked aliasing. verbose Logical. Whether print aliased variables found (). TRUE, aliased variables printed console. Defaults FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/detect_alias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect aliased variables in a linear model — detect_alias","text":"Returns character vector aliased variable names found; otherwise, returns NULL invisibly. verbose TRUE, function also print message console.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/detect_alias.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detect aliased variables in a linear model — detect_alias","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/detect_alias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect aliased variables in a linear model — detect_alias","text":"","code":"library(\"car\", warn.conflicts = FALSE, quietly = TRUE, verbose = FALSE) x1 <- rnorm(100) x2 <- 2 * x1 x3 <- rnorm(100) y <- rnorm(100)  model <- lm(y ~ x1 + x2 + x3) summary(model) #>  #> Call: #> lm(formula = y ~ x1 + x2 + x3) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.02755 -0.70035 -0.03393  0.72138  2.50283  #>  #> Coefficients: (1 not defined because of singularities) #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept) -0.06616    0.10346  -0.639   0.5240   #> x1           0.10764    0.09810   1.097   0.2753   #> x2                NA         NA      NA       NA   #> x3           0.24804    0.10164   2.440   0.0165 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.025 on 97 degrees of freedom #> Multiple R-squared:  0.06749,\tAdjusted R-squared:  0.04826  #> F-statistic:  3.51 on 2 and 97 DF,  p-value: 0.03375 #>   # there are aliased coefficients in the model try(car::vif(model)) #> Error in vif.default(model) : there are aliased coefficients in the model  # The function identifies the aliased variables detect_alias(data = cbind.data.frame(x1, x2, x3)) #> [1] \"x2\"  detect_alias(data = cbind.data.frame(x1, x2, x3), verbose = TRUE) #> Aliased variables: x2 #> [1] \"x2\"  # excluding x2 and refit the model model <- lm(y ~ x1 + x3)  summary(model) #>  #> Call: #> lm(formula = y ~ x1 + x3) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.02755 -0.70035 -0.03393  0.72138  2.50283  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept) -0.06616    0.10346  -0.639   0.5240   #> x1           0.10764    0.09810   1.097   0.2753   #> x3           0.24804    0.10164   2.440   0.0165 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.025 on 97 degrees of freedom #> Multiple R-squared:  0.06749,\tAdjusted R-squared:  0.04826  #> F-statistic:  3.51 on 2 and 97 DF,  p-value: 0.03375 #>   try(car::vif(model)) #>       x1       x3  #> 1.000718 1.000718"},{"path":"https://biodt.github.io/IASDT.R/reference/eLTER_Process.html","id":null,"dir":"Reference","previous_headings":"","what":"Process eLTER data for the IAS-pDT — eLTER_process","title":"Process eLTER data for the IAS-pDT — eLTER_process","text":"function processes pre-cleaned pre-standardized Integrated European Long-Term Ecosystem, critical zone socio-ecological Research (eLTER) data.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/eLTER_Process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process eLTER data for the IAS-pDT — eLTER_process","text":"","code":"eLTER_process(env_file = \".env\", start_year = 1981)"},{"path":"https://biodt.github.io/IASDT.R/reference/eLTER_Process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process eLTER data for the IAS-pDT — eLTER_process","text":"env_file Character. Path environment file containing paths data sources. Defaults .env. start_year Numeric. starting year occurrence data. records year onward processed. Default 1981, matches year ranges CHELSA current climate data.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/eLTER_Process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process eLTER data for the IAS-pDT — eLTER_process","text":"Returns NULL invisibly saving processed data.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/eLTER_Process.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process eLTER data for the IAS-pDT — eLTER_process","text":"function processes pre-cleaned vascular plants data eLTER sites, harmonized Ahmed El-Gabbas. original eLTER biodiversity data highly heterogeneous format structure, requiring standardization cleaning use. Taxonomic standardization GBIF backbone performed Marina Golivets (Feb. 2024).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/eLTER_Process.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process eLTER data for the IAS-pDT — eLTER_process","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/exp_neg_div.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential of Negative Division — exp_neg_div","title":"Exponential of Negative Division — exp_neg_div","text":"Computes element-wise exponential negative division element matrix scalar value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/exp_neg_div.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential of Negative Division — exp_neg_div","text":"","code":"exp_neg_div(D11, x)"},{"path":"https://biodt.github.io/IASDT.R/reference/exp_neg_div.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential of Negative Division — exp_neg_div","text":"D11 matrix values divided exponentiated. x scalar divisor.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/exp_neg_div.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential of Negative Division — exp_neg_div","text":"matrix dimensions D11, containing computed values.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/fast_pnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Normal CDF — fast_pnorm","title":"Fast Normal CDF — fast_pnorm","text":"Computes cumulative distribution function normal distribution numeric vector using fast approximation.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/fast_pnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Normal CDF — fast_pnorm","text":"","code":"fast_pnorm(x)"},{"path":"https://biodt.github.io/IASDT.R/reference/fast_pnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast Normal CDF — fast_pnorm","text":"x numeric vector CDF computed.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/fast_pnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast Normal CDF — fast_pnorm","text":"numeric vector CDF values element x.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the file extension from a file path — file_extension","title":"Get the file extension from a file path — file_extension","text":"function extracts file extension given file path. first checks input NULL character string. conditions met, uses tools::file_ext function extract return file extension. function check existence file explicitly get file type content. merely guess file extension file name.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the file extension from a file path — file_extension","text":"","code":"file_extension(path)"},{"path":"https://biodt.github.io/IASDT.R/reference/file_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the file extension from a file path — file_extension","text":"path character string representing file path file extension extracted. must NULL character string.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the file extension from a file path — file_extension","text":"character string representing file extension given file path. path extension, empty string returned.","code":""},{"path":[]},{"path":"https://biodt.github.io/IASDT.R/reference/file_extension.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the file extension from a file path — file_extension","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_extension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the file extension from a file path — file_extension","text":"","code":"file_extension(path = \"File.doc\") #> [1] \"doc\"  file_extension(path = \"D:/File.doc\") #> [1] \"doc\"  file_extension(path = \"File.1.doc\") #> [1] \"doc\"  file_extension(path = \"D:/Files.All\") #> [1] \"All\"  file_extension(path = \"D:/Files.All/\") #> [1] \"\"  file_extension(\"example.txt\") # returns \"txt\" #> [1] \"txt\"  file_extension(\"archive.tar.gz\") # returns \"gz\" #> [1] \"gz\""},{"path":"https://biodt.github.io/IASDT.R/reference/file_size.html","id":null,"dir":"Reference","previous_headings":"","what":"File size in a human-readable format — file_size","title":"File size in a human-readable format — file_size","text":"function takes path file returns size format easy read (e.g., KB, MB, GB), using gdata::humanReadable function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File size in a human-readable format — file_size","text":"","code":"file_size(file, ...)"},{"path":"https://biodt.github.io/IASDT.R/reference/file_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File size in a human-readable format — file_size","text":"file character; path file whose size want check. ... additional arguments passed gdata::humanReadable function, allowing customization output format.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File size in a human-readable format — file_size","text":"character string representing size file human-readable format.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File size in a human-readable format — file_size","text":"","code":"(f <- system.file(\"ex/elev.tif\", package=\"terra\")) #> [1] \"/home/runner/work/_temp/Library/terra/ex/elev.tif\"  file_size(file = f) #> [1] \"7.8 KiB\""},{"path":"https://biodt.github.io/IASDT.R/reference/file_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the file type of a given file path — file_type","title":"Determine the file type of a given file path — file_type","text":"function uses system's file command determine type file specified path parameter. returns character string describing file type.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the file type of a given file path — file_type","text":"","code":"file_type(path)"},{"path":"https://biodt.github.io/IASDT.R/reference/file_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the file type of a given file path — file_type","text":"path Character. path file whose type determined. path must NULL, file must exist.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the file type of a given file path — file_type","text":"character string describing file type.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_type.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determine the file type of a given file path — file_type","text":"function relies system's file command therefore might produce different outputs different platforms.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_type.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine the file type of a given file path — file_type","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/file_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the file type of a given file path — file_type","text":"","code":"(f <- system.file(\"ex/elev.tif\", package=\"terra\")) #> [1] \"/home/runner/work/_temp/Library/terra/ex/elev.tif\"  file_type(path = f) #> [1] \"TIFF image data, little-endian, direntries=19, height=90, bps=16, compression=LZW, PhotometricInterpretation=BlackIsZero, width=95\""},{"path":"https://biodt.github.io/IASDT.R/reference/function_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function Arguments — function_arguments","title":"Print function Arguments — function_arguments","text":"function takes another function input prints arguments format ArgumentName = DefaultValue. argument printed new line. function can optionally assign formatted arguments global environment can load specified package processing.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/function_arguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function Arguments — function_arguments","text":"","code":"function_arguments(function_name, assign = FALSE, package = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/function_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function Arguments — function_arguments","text":"function_name function whose arguments want print. Must valid R function. assign Logical. Whether assign arguments variables global environment. Defaults FALSE. package Character. Name R package loaded processing function. Default NULL.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/function_arguments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print function Arguments — function_arguments","text":"function prints formatted arguments console. assign TRUE, also assigns arguments global environment.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/function_arguments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print function Arguments — function_arguments","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/function_arguments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function Arguments — function_arguments","text":"","code":"formals(stats::setNames) #> $object #> nm #>  #> $nm #>  #>  function_arguments(stats::setNames) #> object = NULL #> nm = NULL"},{"path":"https://biodt.github.io/IASDT.R/reference/get_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mode of a numeric vector — get_mode","title":"Calculate the mode of a numeric vector — get_mode","text":"function calculates mode given numeric vector.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/get_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mode of a numeric vector — get_mode","text":"","code":"get_mode(x)"},{"path":"https://biodt.github.io/IASDT.R/reference/get_mode.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate the mode of a numeric vector — get_mode","text":"source function taken link.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/get_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mode of a numeric vector — get_mode","text":"x Numeric vector. must NULL empty.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/get_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mode of a numeric vector — get_mode","text":"mode vector single value. vector uniform distribution (values appear frequency), function returns first value encountered.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/get_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the mode of a numeric vector — get_mode","text":"","code":"get_mode(c(seq_len(10), 1, 1, 3, 3, 3, 3)) #> [1] 3  get_mode(c(1, 2, 2, 3, 4)) #> [1] 2  get_mode(c(1, 1, 2, 3, 3)) #> [1] 1"},{"path":"https://biodt.github.io/IASDT.R/reference/get_species_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get species name or information of an IAS-pDT species ID — get_species_name","title":"Get species name or information of an IAS-pDT species ID — get_species_name","text":"function retrieves detailed information IAS-pDT species list, optionally filtered specific IAS-pDT species ID (species_ID).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/get_species_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get species name or information of an IAS-pDT species ID — get_species_name","text":"","code":"get_species_name(species_ID = NULL, env_file = \".env\")"},{"path":"https://biodt.github.io/IASDT.R/reference/get_species_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get species name or information of an IAS-pDT species ID — get_species_name","text":"species_ID optional IASDT species ID detailed information required. provided, function returns entire species list. env_file Character. Path environment file containing paths data sources. Defaults .env.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/get_species_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get species name or information of an IAS-pDT species ID — get_species_name","text":"data frame containing species information. species ID species_ID provided, returns species information listed species, otherwise return full list IAS.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/get_species_name.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get species name or information of an IAS-pDT species ID — get_species_name","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/git_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Print or return a detailed git log of the git repository located in the specified directory. — git_log","title":"Print or return a detailed git log of the git repository located in the specified directory. — git_log","text":"function checks specified directory Git repository , , executes git log command either print log console return . supports execution Windows Linux operating systems provides visually appealing graph format log, showing commit hash, references, commit message, relative commit date, author name.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/git_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print or return a detailed git log of the git repository located in the specified directory. — git_log","text":"","code":"git_log(path = \".\", n_commits = NULL, return_log = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/git_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print or return a detailed git log of the git repository located in the specified directory. — git_log","text":"path Character. Path directory check. Defaults current working directory \".\". path exist, function stop throw error. path git repository, function throw warning. n_commits Integer. Number recent commits display. NULL (default), complete log shown. n_commits NULL positive number, function stop throw error. parameter ignored return_log TRUE. return_log Logical. Whether return log (TRUE) print console (FALSE, default). TRUE, function returns character vector containing log lines.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/git_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print or return a detailed git log of the git repository located in the specified directory. — git_log","text":"return_log TRUE, returns character vector containing git log lines. return_log FALSE, function called side effect printing console.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/git_log.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Print or return a detailed git log of the git repository located in the specified directory. — git_log","text":"function stop throw error specified path exist, operating system supported, directory Git repository, Git installed, n_commits parameter NULL positive number.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/git_log.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print or return a detailed git log of the git repository located in the specified directory. — git_log","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/git_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print or return a detailed git log of the git repository located in the specified directory. — git_log","text":"","code":"# Show the most recent commit git_log(n_commits = 1) #> * ff01188 - (grafted, HEAD -> main, origin/main, origin/HEAD) CV postrocess (10 minutes ago) <Ahmed El-Gabbas>  # Show the most recent 5 commits git_log(n_commits = 5) #> * ff01188 - (grafted, HEAD -> main, origin/main, origin/HEAD) CV postrocess (10 minutes ago) <Ahmed El-Gabbas>  # Return the log as a character vector Log <- git_log(return_log = TRUE)  length(Log) #> [1] 1  head(Log, 8) #> [1] \"* ff01188 - (grafted, HEAD -> main, origin/main, origin/HEAD) CV postrocess (10 minutes ago) <Ahmed El-Gabbas>\"  if (FALSE) { # \\dontrun{   # not a git repo   git_log(path = \"C:/\")   # #> Error: The provided path does not exist. } # }"},{"path":"https://biodt.github.io/IASDT.R/reference/ht.html","id":null,"dir":"Reference","previous_headings":"","what":"Print head and tail of data frame — ht","title":"Print head and tail of data frame — ht","text":"function takes data frame optional number rows print top (head) bottom (tail) data frame. useful quickly inspecting first last rows large data frame understand structure contents.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/ht.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print head and tail of data frame — ht","text":"","code":"ht(data = NULL, n_rows = 5L)"},{"path":"https://biodt.github.io/IASDT.R/reference/ht.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print head and tail of data frame — ht","text":"data data.frame. data frame print. parameter NULL`. n_rows Integer. Number rows print head tail data frame. Defaults 5.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/ht.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print head and tail of data frame — ht","text":"function used side effect (printing) return value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/ht.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print head and tail of data frame — ht","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/ht.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print head and tail of data frame — ht","text":"","code":"ht(mtcars) #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>     <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>  1:  21.0     6 160.0   110  3.90 2.620 16.46     0     1     4     4 #>  2:  21.0     6 160.0   110  3.90 2.875 17.02     0     1     4     4 #>  3:  22.8     4 108.0    93  3.85 2.320 18.61     1     1     4     1 #>  4:  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3     1 #>  5:  18.7     8 360.0   175  3.15 3.440 17.02     0     0     3     2 #> ---                                                                   #> 28:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2 #> 29:  15.8     8 351.0   264  4.22 3.170 14.50     0     1     5     4 #> 30:  19.7     6 145.0   175  3.62 2.770 15.50     0     1     5     6 #> 31:  15.0     8 301.0   335  3.54 3.570 14.60     0     1     5     8 #> 32:  21.4     4 121.0   109  4.11 2.780 18.60     1     1     4     2  # -------------------------------------------  ht(data = mtcars, n_rows = 2) #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>     <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>  1:  21.0     6   160   110  3.90 2.620 16.46     0     1     4     4 #>  2:  21.0     6   160   110  3.90 2.875 17.02     0     1     4     4 #> ---                                                                   #> 31:  15.0     8   301   335  3.54 3.570 14.60     0     1     5     8 #> 32:  21.4     4   121   109  4.11 2.780 18.60     1     1     4     2  # -------------------------------------------  ht(data = mtcars, n_rows = 6) #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>     <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>  1:  21.0     6 160.0   110  3.90 2.620 16.46     0     1     4     4 #>  2:  21.0     6 160.0   110  3.90 2.875 17.02     0     1     4     4 #>  3:  22.8     4 108.0    93  3.85 2.320 18.61     1     1     4     1 #>  4:  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3     1 #>  5:  18.7     8 360.0   175  3.15 3.440 17.02     0     0     3     2 #>  6:  18.1     6 225.0   105  2.76 3.460 20.22     1     0     3     1 #> ---                                                                   #> 27:  26.0     4 120.3    91  4.43 2.140 16.70     0     1     5     2 #> 28:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2 #> 29:  15.8     8 351.0   264  4.22 3.170 14.50     0     1     5     4 #> 30:  19.7     6 145.0   175  3.62 2.770 15.50     0     1     5     6 #> 31:  15.0     8 301.0   335  3.54 3.570 14.60     0     1     5     8 #> 32:  21.4     4 121.0   109  4.11 2.780 18.60     1     1     4     2"},{"path":"https://biodt.github.io/IASDT.R/reference/info_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Information chunk with time stamp — info_chunk","title":"Print Information chunk with time stamp — info_chunk","text":"function prints formatted message timestamp, surrounded separators better readability console outputs logs.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/info_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Information chunk with time stamp — info_chunk","text":"","code":"info_chunk(   message = \"\",   cat_date = TRUE,   sep_lines_before = 0L,   sep_lines_after = 1L,   cat_bold = FALSE,   cat_red = FALSE,   cat_timestamp = FALSE,   level = 0L,   msg_n_lines = 1L,   info_lines_before = 0L,   ... )"},{"path":"https://biodt.github.io/IASDT.R/reference/info_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Information chunk with time stamp — info_chunk","text":"message Character. main message timestamped. parameter mandatory NULL empty. cat_date Logical. Whether include date timestamp. Default FALSE, meaning time printed. See cat_time. sep_lines_before, sep_lines_after Integer. Number extra empty lines print separator lines. See cat_sep details. cat_bold logical; whether print text bold. Default FALSE. cat_red logical; whether print text red. Default FALSE. cat_timestamp Logical. Whether include time timestamp. Default FALSE. level integer; level message printed. e.g. level = 1, following string printed beginning message: \"   >>>   \". Default 0. msg_n_lines integer; number newline characters print message. Default 1. info_lines_before Integer. Number extra empty lines print message. Default 0L. ... Additional arguments passed cat_sep customizing separators.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/info_chunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Information chunk with time stamp — info_chunk","text":"function return value prints message separators console.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/info_chunk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Information chunk with time stamp — info_chunk","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/info_chunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Information chunk with time stamp — info_chunk","text":"","code":"info_chunk(message = \"Started\") #>  #> -------------------------------------------------- #> Started - 23/04/2025 #> -------------------------------------------------- #>   info_chunk(message = \"finished\", line_char = \"*\", line_char_rep = 60) #>  #> ************************************************************ #> finished - 23/04/2025 #> ************************************************************ #>   info_chunk(message = \"Started\", cat_bold =  TRUE, cat_red = TRUE) #>  #> -------------------------------------------------- #> Started - 23/04/2025 #> -------------------------------------------------- #>"},{"path":"https://biodt.github.io/IASDT.R/reference/install_hmsc_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Hmsc-HPC in a python virtual environment on Windows — install_hmsc_windows","title":"Install Hmsc-HPC in a python virtual environment on Windows — install_hmsc_windows","text":"function sets Python virtual environment installs Hmsc-HPC package specified Git repository. also installs TensorFlow performs checks verify installation Python, virtual environment, packages.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/install_hmsc_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Hmsc-HPC in a python virtual environment on Windows — install_hmsc_windows","text":"","code":"install_hmsc_windows(   path_python,   path_VE,   URL_Hmsc = \"https://github.com/trossi/hmsc-hpc.git@simplify-io\",   URL_rdata = \"https://github.com/trossi/rdata.git@test-for-hmsc-v2\",   force = FALSE )"},{"path":"https://biodt.github.io/IASDT.R/reference/install_hmsc_windows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Hmsc-HPC in a python virtual environment on Windows — install_hmsc_windows","text":"path_python Character. Path Python executable. path_VE Character. Path virtual environment created. can existing folder. URL_Hmsc Character. URL Git repository (branch name) Hmsc-HPC package. URL_rdata Character. URL Git repository (branch name) rdata package. temporary allow rdata package write rds file. near future, functionality pushed main branch rdata. force Logical. Whether force installation Hmsc-HPC; .e. using --force-reinstall suffix pip install command","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/install_hmsc_windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Hmsc-HPC in a python virtual environment on Windows — install_hmsc_windows","text":"function performs installation steps returns NULL invisibly.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/install_hmsc_windows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install Hmsc-HPC in a python virtual environment on Windows — install_hmsc_windows","text":"function performs following steps: Checks virtual environment directory already exists stops error Verifies Python version installation Creates new Python virtual environment Upgrades pip virtual environment Installs Hmsc-HPC package provided Git URL Installs TensorFlow version 2.15 Installs rdata Checks TensorFlow Hmsc-HPC package installations","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/install_hmsc_windows.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Install Hmsc-HPC in a python virtual environment on Windows — install_hmsc_windows","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/install_hmsc_windows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Hmsc-HPC in a python virtual environment on Windows — install_hmsc_windows","text":"","code":"if (FALSE) { # \\dontrun{ install_hmsc_windows(    path_python = \"C:/Python/Python310/python.exe\",    path_VE = \"D:/Hmsc-HPC\") } # }"},{"path":"https://biodt.github.io/IASDT.R/reference/integer_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer breaks for ggplot axis — integer_breaks","title":"Integer breaks for ggplot axis — integer_breaks","text":"function generates function calculates integer axis values ggplot, ensuring axis breaks integers. particularly useful creating cleaner, readable plots.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/integer_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer breaks for ggplot axis — integer_breaks","text":"","code":"integer_breaks(n_breaks = 5, ...)"},{"path":"https://biodt.github.io/IASDT.R/reference/integer_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer breaks for ggplot axis — integer_breaks","text":"n_breaks integer (default: 5), desired number breaks axis. Note actual number breaks may slightly differ requested. ... additional arguments passed base::pretty.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/integer_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer breaks for ggplot axis — integer_breaks","text":"function takes numeric vector x returns vector integer breaks axis, names attribute set break labels.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/integer_breaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integer breaks for ggplot axis — integer_breaks","text":"source function available link.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/integer_breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer breaks for ggplot axis — integer_breaks","text":"","code":"ggplot2::ggplot(mtcars, ggplot2::aes(x = drat, y = hp)) +   ggplot2::geom_point() +   ggplot2::scale_x_continuous()   ggplot2::ggplot(mtcars, ggplot2::aes(x = drat, y = hp)) +   ggplot2::geom_point() +   ggplot2::scale_x_continuous(breaks = integer_breaks(5))"},{"path":"https://biodt.github.io/IASDT.R/reference/keep_only.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep only specified objects in the environment, removing all others. — keep_only","title":"Keep only specified objects in the environment, removing all others. — keep_only","text":"function selectively retains objects specified objects parameter current environment, removing objects. useful memory management clearing unnecessary objects environment. function also provides option print names kept removed variables.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/keep_only.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep only specified objects in the environment, removing all others. — keep_only","text":"","code":"keep_only(objects, verbose = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/keep_only.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep only specified objects in the environment, removing all others. — keep_only","text":"objects Character vector. Names objects kept environment. verbose Logical. Whether print names kept removed variables. Default TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/keep_only.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep only specified objects in the environment, removing all others. — keep_only","text":"return value, called side effects.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/keep_only.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Keep only specified objects in the environment, removing all others. — keep_only","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/keep_only.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep only specified objects in the environment, removing all others. — keep_only","text":"","code":"A <- B <- C <- 15 ls() #> [1] \"A\" \"B\" \"C\"  keep_only(\"A\") #> Removed Variables (2): 1:B ||  2:C #> Kept Variables (1): 1:A  ls() #> [1] \"A\" rm(list = ls())   A <- B <- C <- 15 keep_only(c(\"A\",\"B\")) #> Removed Variables (1): 1:C #> Kept Variables (2): 1:A ||  2:B ls() #> [1] \"A\" \"B\""},{"path":"https://biodt.github.io/IASDT.R/reference/list_to_RData.html","id":null,"dir":"Reference","previous_headings":"","what":"Split list items into separate .RData files — list_to_RData","title":"Split list items into separate .RData files — list_to_RData","text":"function takes named list saves element list separate .RData file. names list elements used base filenames, optionally prefixed. Files saved specified directory, option overwrite existing files.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/list_to_RData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split list items into separate .RData files — list_to_RData","text":"","code":"list_to_RData(list, prefix = \"\", directory = getwd(), overwrite = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/list_to_RData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split list items into separate .RData files — list_to_RData","text":"list named list object split separate .RData files. prefix Character. prefix filename. empty (default), prefix added. directory directory .RData files saved. Defaults current working directory. overwrite logical indicating whether overwrite existing files. Defaults FALSE, case files already exist overwritten, message printed file.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/list_to_RData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split list items into separate .RData files — list_to_RData","text":"function called side effect saving files return value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/list_to_RData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split list items into separate .RData files — list_to_RData","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/list_to_RData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split list items into separate .RData files — list_to_RData","text":"","code":"# split iris data by species name iris2 <- iris %>%   tibble::tibble() %>%   split(~Species)  str(iris2, 1) #> List of 3 #>  $ setosa    : tibble [50 × 5] (S3: tbl_df/tbl/data.frame) #>  $ versicolor: tibble [50 × 5] (S3: tbl_df/tbl/data.frame) #>  $ virginica : tibble [50 × 5] (S3: tbl_df/tbl/data.frame)  (TMP_Folder <- IASDT.R::path(tempdir(), stringi::stri_rand_strings(1, 5))) #> [1] \"/tmp/Rtmpr8SBeK/Me8gr\" list.files(TMP_Folder) #> character(0)  list_to_RData(list = iris2, directory = TMP_Folder) list.files(TMP_Folder) #> [1] \"setosa.RData\"     \"versicolor.RData\" \"virginica.RData\""},{"path":"https://biodt.github.io/IASDT.R/reference/load_as.html","id":null,"dir":"Reference","previous_headings":"","what":"Load objects from RData / qs2 / rds / feather file — load_as","title":"Load objects from RData / qs2 / rds / feather file — load_as","text":"function loads RData file specified file parameter. RData file contains single object, object returned directly. file contains multiple objects, returned list object accessible name. allows flexible handling loaded data without needing know names objects stored within RData file ahead time. function also supports loading feather, qs2 rds files.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_as.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load objects from RData / qs2 / rds / feather file — load_as","text":"","code":"load_as(file = NULL, n_threads = 5, timeout = 300, ...)"},{"path":"https://biodt.github.io/IASDT.R/reference/load_as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load objects from RData / qs2 / rds / feather file — load_as","text":"file Character. file path URL file loaded. file URL, function download file URL temporary file load . n_threads Number threads use reading qs2 files. Default 5; see qs2::qs_read. timeout integer; time seconds download times . Default 300 seconds; see download.file. ... Additional arguments passed respective load functions. base::load RData files; qs2::qs_read qs2 files; arrow::read_feather feather files; base::readRDS rds files.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load objects from RData / qs2 / rds / feather file — load_as","text":"Depending contents RData file, function returns either single R object named list R objects. names list elements (list returned) correspond names objects stored within RData file.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_as.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load objects from RData / qs2 / rds / feather file — load_as","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_as.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load objects from RData / qs2 / rds / feather file — load_as","text":"","code":"file <- system.file(\"testdata\", \"culcita_dat.RData\", package = \"lme4\")  # --------------------------------------------------------- # loading RData using base library # --------------------------------------------------------- (load(file)) #> [1] \"culcita_dat\"  ls() #> [1] \"culcita_dat\" \"file\"         tibble::tibble(culcita_dat) #> # A tibble: 80 × 3 #>    block predation ttt   #>    <fct>     <dbl> <fct> #>  1 1             0 none  #>  2 1             1 none  #>  3 2             1 none  #>  4 2             1 none  #>  5 3             1 none  #>  6 3             1 none  #>  7 4             1 none  #>  8 4             1 none  #>  9 5             1 none  #> 10 5             1 none  #> # ℹ 70 more rows  # --------------------------------------------------------- # Loading as custom object name # --------------------------------------------------------- NewObj <- load_as(file = file)  ls() #> [1] \"NewObj\"      \"culcita_dat\" \"file\"         print(tibble::tibble(NewObj)) #> # A tibble: 80 × 3 #>    block predation ttt   #>    <fct>     <dbl> <fct> #>  1 1             0 none  #>  2 1             1 none  #>  3 2             1 none  #>  4 2             1 none  #>  5 3             1 none  #>  6 3             1 none  #>  7 4             1 none  #>  8 4             1 none  #>  9 5             1 none  #> 10 5             1 none  #> # ℹ 70 more rows  # --------------------------------------------------------- # Loading multiple objects stored in single RData file # --------------------------------------------------------- # store three objects to single RData file mtcars2 <- mtcars3 <- mtcars TempFile <- tempfile(pattern = \"mtcars_\", fileext = \".RData\")  save(mtcars2, mtcars3, mtcars, file = TempFile) mtcars_all <- load_as(TempFile)  # overwrite the file with different order of objects save(mtcars, mtcars2, mtcars3, file = TempFile) mtcars_all2 <- load_as(TempFile)  # single list object with 3 items, keeping original object names and order names(mtcars_all) #> [1] \"mtcars2\" \"mtcars3\" \"mtcars\"  names(mtcars_all2) #> [1] \"mtcars\"  \"mtcars2\" \"mtcars3\""},{"path":"https://biodt.github.io/IASDT.R/reference/load_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Load multiple .RData files together — load_multiple","title":"Load multiple .RData files together — load_multiple","text":"function loads multiple .RData files either single list object directly global environment. provides options verbosity, returning object names, handling non-existent files.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load multiple .RData files together — load_multiple","text":"","code":"load_multiple(   files = NULL,   verbose = TRUE,   single_object = TRUE,   return_names = TRUE )"},{"path":"https://biodt.github.io/IASDT.R/reference/load_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load multiple .RData files together — load_multiple","text":"files Character vector. paths .RData files loaded. verbose Logical. Whether print progress messages. Default: TRUE. single_object Logical. Whether load objects single list (TRUE) directly global environment (FALSE). Defaults TRUE. return_names Logical. Whether return names loaded objects. effective single_object FALSE. Defaults TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load multiple .RData files together — load_multiple","text":"single_object TRUE, returns named list objects loaded specified files. single_object FALSE return_names TRUE, returns character vector names objects loaded global environment. Otherwise, returns NULL.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_multiple.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load multiple .RData files together — load_multiple","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load multiple .RData files together — load_multiple","text":"","code":"(files <- system.file(    \"testdata\", c(\"culcita_dat.RData\", \"gopherdat2.RData\"), package = \"lme4\")) #> [1] \"/home/runner/work/_temp/Library/lme4/testdata/culcita_dat.RData\" #> [2] \"/home/runner/work/_temp/Library/lme4/testdata/gopherdat2.RData\"   ls() #> [1] \"files\"  # --------------------------------------------------- # Load multiple *.RData files to one list object # `single_object = TRUE` # --------------------------------------------------- MultiObj <- load_multiple(files = files, single_object = TRUE) ls() #> [1] \"MultiObj\" \"files\"     str(MultiObj, 1) #> List of 2 #>  $ culcita_dat:'data.frame':\t80 obs. of  3 variables: #>  $ gopherdat2 :'data.frame':\t30 obs. of  7 variables:  # --------------------------------------------------- # Load multiple *.RData files separately to the current environment # `single_object = FALSE` # --------------------------------------------------- ls() #> [1] \"MultiObj\" \"files\"    rm(\"MultiObj\") ls() #> [1] \"files\"  load_multiple(files = files, single_object = FALSE) #> Object: culcita_dat was loaded successfully. #> Object: Gdat was loaded successfully. #> [1] \"culcita_dat\" \"Gdat\"         str(Gdat, 1) #> 'data.frame':\t30 obs. of  7 variables: #>  $ Site   : Factor w/ 10 levels \"BS\",\"CB\",\"Cent\",..: 1 1 1 2 2 2 3 3 3 4 ... #>  $ year   : num  2004 2005 2006 2004 2005 ... #>  $ shells : int  0 0 0 1 0 1 0 1 1 9 ... #>  $ type   : Factor w/ 1 level \"Fresh\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ Area   : num  15.2 15.2 15.2 16 16 16 6.9 6.9 6.9 43.2 ... #>  $ density: num  4.8 4.8 4.8 2.8 2.8 2.8 29.1 29.1 29.1 4.2 ... #>  $ prev   : num  1 1 1 4.3 8 17.6 28.6 51.9 10.7 80.7 ...  str(culcita_dat, 1) #> 'data.frame':\t80 obs. of  3 variables: #>  $ block    : Factor w/ 10 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 2 2 3 3 4 4 5 5 ... #>  $ predation: num  0 1 1 1 1 1 1 1 1 1 ... #>  $ ttt      : Factor w/ 4 levels \"none\",\"crabs\",..: 1 1 1 1 1 1 1 1 1 1 ...  # --------------------------------------------------- # Load multiple *.RData files, one object already exists # --------------------------------------------------- ls() #> [1] \"files\" rm(\"culcita_dat\") #> Warning: object 'culcita_dat' not found ls() #> [1] \"files\"  try(load_multiple(files = files, single_object = FALSE)) #> Object: culcita_dat was loaded successfully. #> Object: Gdat was loaded successfully. #> [1] \"culcita_dat\" \"Gdat\""},{"path":"https://biodt.github.io/IASDT.R/reference/load_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Load or install multiple R packages — load_packages","title":"Load or install multiple R packages — load_packages","text":"function attempts load multiple R packages specified user. package installed, function can optionally install loading. also provides option print names versions loaded packages.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load or install multiple R packages — load_packages","text":"","code":"load_packages(   ...,   package_list = NULL,   verbose = FALSE,   install_missing = TRUE )"},{"path":"https://biodt.github.io/IASDT.R/reference/load_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load or install multiple R packages — load_packages","text":"... Character. Names packages loaded installed. package_list Character vector. alternative additional way specify package names vector. verbose Logical. TRUE, prints names versions loaded packages. Defaults FALSE. install_missing Logical. TRUE (default), missing packages automatically installed loaded.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load or install multiple R packages — load_packages","text":"function used side effects (loading/installing packages) return value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_packages.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load or install multiple R packages — load_packages","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/load_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load or install multiple R packages — load_packages","text":"","code":"# Currently loaded packages (P1 <- IASDT.R::loaded_packages()) #>  [1] \"car\"       \"carData\"   \"rworldmap\" \"png\"       \"sf\"        \"raster\"    #>  [7] \"sp\"        \"ggplot2\"   \"terra\"     \"Hmsc\"      \"coda\"      \"dplyr\"     #> [13] \"IASDT.R\"   \"magrittr\"  \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     #> [19] \"datasets\"  \"methods\"   \"base\"       load_packages(Hmsc) # Loaded packages after implementing the function (P2 <- IASDT.R::loaded_packages()) #>  [1] \"car\"       \"carData\"   \"rworldmap\" \"png\"       \"sf\"        \"raster\"    #>  [7] \"sp\"        \"ggplot2\"   \"terra\"     \"Hmsc\"      \"coda\"      \"dplyr\"     #> [13] \"IASDT.R\"   \"magrittr\"  \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     #> [19] \"datasets\"  \"methods\"   \"base\"       # Which packages were loaded? setdiff(P2, P1) #> character(0)  load_packages(terra, verbose = TRUE)"},{"path":"https://biodt.github.io/IASDT.R/reference/loaded_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"List of loaded packages — loaded_packages","title":"List of loaded packages — loaded_packages","text":"function returns character vector listing packages currently loaded R session.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/loaded_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of loaded packages — loaded_packages","text":"","code":"loaded_packages()"},{"path":"https://biodt.github.io/IASDT.R/reference/loaded_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of loaded packages — loaded_packages","text":"character vector containing names loaded packages.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/loaded_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of loaded packages — loaded_packages","text":"","code":"loaded_packages() #>  [1] \"car\"       \"carData\"   \"rworldmap\" \"png\"       \"sf\"        \"raster\"    #>  [7] \"sp\"        \"ggplot2\"   \"terra\"     \"Hmsc\"      \"coda\"      \"dplyr\"     #> [13] \"IASDT.R\"   \"magrittr\"  \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     #> [19] \"datasets\"  \"methods\"   \"base\"       require(Hmsc)  loaded_packages() #>  [1] \"car\"       \"carData\"   \"rworldmap\" \"png\"       \"sf\"        \"raster\"    #>  [7] \"sp\"        \"ggplot2\"   \"terra\"     \"Hmsc\"      \"coda\"      \"dplyr\"     #> [13] \"IASDT.R\"   \"magrittr\"  \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     #> [19] \"datasets\"  \"methods\"   \"base\""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_evaluate.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate cross-validated Hmsc Model — mod_CV_evaluate","title":"Evaluate cross-validated Hmsc Model — mod_CV_evaluate","text":"function evaluates Hmsc models trained via cross-validation using. merges posterior chains, makes predictions, computes 4 evaluation metrics: AUC, RMSE, Tjur's R2, Boyce Index.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_evaluate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate cross-validated Hmsc Model — mod_CV_evaluate","text":"","code":"mod_CV_evaluate(path_CV = NULL, predict_eta_mean = TRUE, n_cores = 8L)"},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_evaluate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate cross-validated Hmsc Model — mod_CV_evaluate","text":"path_CV Character. directory path cross-validation models outputs stored. predict_eta_mean boolean flag indicating whether use estimated mean values posterior predictive distribution random effects corresponding new units. See Hmsc:::predict.Hmsc details. n_cores Integer. Number CPU cores use parallel processing. Default: 8.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_evaluate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluate cross-validated Hmsc Model — mod_CV_evaluate","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_prepare.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare spatial-block cross-validation folds for spatial analysis — mod_CV_prepare","title":"Prepare spatial-block cross-validation folds for spatial analysis — mod_CV_prepare","text":"function assign modelling input data spatial-block cross-validation folds using three strategies (see ) using blockCV::cv_spatial. function planned used inside mod_prepare_HPC function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_prepare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare spatial-block cross-validation folds for spatial analysis — mod_CV_prepare","text":"","code":"mod_CV_prepare(   input_data = NULL,   env_file = \".env\",   x_vars = NULL,   CV_n_folds = 4L,   CV_n_grids = 20L,   CV_n_rows = 2,   CV_n_columns = 2L,   CV_SAC = FALSE,   out_path = NULL,   CV_plot = TRUE )"},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_prepare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare spatial-block cross-validation folds for spatial analysis — mod_CV_prepare","text":"input_data data.frame. data frame tibble containing input dataset. data frame include two columns x y coordinates long columns matching names predictors listed x_vars argument. argument mandatory can empty. env_file Character. Path environment file containing paths data sources. Defaults .env. x_vars Character vector. Variables used model. argument mandatory can empty. CV_n_folds Integer. Number cross-validation folds. Default: 4L. CV_n_grids Integer. Number grid cells directions used CV_Dist cross-validation strategy (see ). Default: 20L. CV_n_rows, CV_n_columns Integer. Number rows columns used CV_Large cross-validation strategy (see ), study area divided large blocks given provided CV_n_rows CV_n_columns values. default 2L means split study area four large blocks median latitude longitude. CV_SAC Logical. Whether use spatial autocorrelation determine block size. Defaults FALSE, out_path Character. Path directory save cross-validation results. argument mandatory can empty. CV_plot Logical. Indicating whether plot block cross-validation folds.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_prepare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare spatial-block cross-validation folds for spatial analysis — mod_CV_prepare","text":"function returns modified version input dataset additional numeric columns (integer) indicating cross-validation strategy used.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_prepare.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prepare spatial-block cross-validation folds for spatial analysis — mod_CV_prepare","text":"function uses following cross-validation strategies: CV_Dist size spatial cross-validation blocks determined CV_n_grids argument. default CV_n_grids value 20L, means blocks 20×20 grid cell . CV_Large splits study area large blocks, determined  CV_n_rows CV_n_columns arguments. CV_n_rows = CV_n_columns = 2L (default), four large blocks used, split study area median coordinates. CV_SAC size blocks determined median spatial autocorrelation range predictor data (estimated using blockCV::cv_spatial_autocor). requires availability automap R package. strategy currently skipped default.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_CV_prepare.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare spatial-block cross-validation folds for spatial analysis — mod_CV_prepare","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_fit_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Hmsc-HPC models on UFZ Windows Server — mod_fit_windows","title":"Fit Hmsc-HPC models on UFZ Windows Server — mod_fit_windows","text":"function fits Hmsc models UFZ Windows Server. reads model configurations specified path, loads environment variables, checks input arguments validity, executes model fitting parallel required.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_fit_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Hmsc-HPC models on UFZ Windows Server — mod_fit_windows","text":"","code":"mod_fit_windows(path_model = NULL, python_VE = NULL, n_cores = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/mod_fit_windows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Hmsc-HPC models on UFZ Windows Server — mod_fit_windows","text":"path_model Character. Path model files. argument can empty. python_VE Character. Path valid Python virtual environment. Defaults NULL. argument can empty. n_cores Integer. Number CPU cores use parallel processing.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_fit_windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Hmsc-HPC models on UFZ Windows Server — mod_fit_windows","text":"function return anything prints messages console regarding progress completion model fitting.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_fit_windows.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit Hmsc-HPC models on UFZ Windows Server — mod_fit_windows","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_get_posteriors.html","id":null,"dir":"Reference","previous_headings":"","what":"Combines posteriors exported by Hmsc-HPC into an Hmsc object — mod_get_posteriors","title":"Combines posteriors exported by Hmsc-HPC into an Hmsc object — mod_get_posteriors","text":"function converts posterior files exported Hmsc-HPC Hmsc object. can either read data directly RDS files convert JSON format specified.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_get_posteriors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combines posteriors exported by Hmsc-HPC into an Hmsc object — mod_get_posteriors","text":"","code":"mod_get_posteriors(path_posterior = NULL, from_JSON = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/mod_get_posteriors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combines posteriors exported by Hmsc-HPC into an Hmsc object — mod_get_posteriors","text":"path_posterior Character vector. Path RDS files containing exported posterior files. argument mandatory empty. from_JSON Logical. Whether loaded models converted JSON format. Defaults FALSE, meaning data read directly RDS files without conversion.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_get_posteriors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combines posteriors exported by Hmsc-HPC into an Hmsc object — mod_get_posteriors","text":"Depending from_JSON parameter, returns Hmsc object either directly RDS files converting JSON format.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/mod_get_posteriors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combines posteriors exported by Hmsc-HPC into an Hmsc object — mod_get_posteriors","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_decimals.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of decimal places in a numeric value — n_decimals","title":"Number of decimal places in a numeric value — n_decimals","text":"function calculates number decimal places numeric value. designed work numeric inputs can coerced character format.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_decimals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of decimal places in a numeric value — n_decimals","text":"","code":"n_decimals(x)"},{"path":"https://biodt.github.io/IASDT.R/reference/n_decimals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of decimal places in a numeric value — n_decimals","text":"x Numeric (character) numeric value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_decimals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of decimal places in a numeric value — n_decimals","text":"integer representing number decimal places input value. input value decimal places, function returns 0.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_decimals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Number of decimal places in a numeric value — n_decimals","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_decimals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of decimal places in a numeric value — n_decimals","text":"","code":"n_decimals(x = \"13.45554545\") #> [1] 8  # -------------------------------------------  n_decimals(x = 15.01500) #> [1] 3  n_decimals(x = '15.01500') #> [1] 5  # -------------------------------------------  n_decimals(x = 13.45554545) #> [1] 8"},{"path":"https://biodt.github.io/IASDT.R/reference/n_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of unique values for all columns of a data frame — n_unique","title":"Number of unique values for all columns of a data frame — n_unique","text":"function calculates number unique values column given data frame returns data frame two columns: Variable n_unique. Variable column lists names original columns, n_unique column lists corresponding number unique values column. result sorted number unique values ascending order.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of unique values for all columns of a data frame — n_unique","text":"","code":"n_unique(data)"},{"path":"https://biodt.github.io/IASDT.R/reference/n_unique.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Number of unique values for all columns of a data frame — n_unique","text":"source code function copied stackoverflow question.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of unique values for all columns of a data frame — n_unique","text":"data data frame number unique values per column calculated.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of unique values for all columns of a data frame — n_unique","text":"data frame two columns: Variable n_unique. Variable column lists names original columns, n_unique column lists number unique values column. result sorted n_unique ascending order.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_unique.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Number of unique values for all columns of a data frame — n_unique","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/n_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of unique values for all columns of a data frame — n_unique","text":"","code":"n_unique(mtcars) #> # A tibble: 11 × 2 #>    Variable n_unique #>    <chr>       <int> #>  1 vs              2 #>  2 am              2 #>  3 cyl             3 #>  4 gear            3 #>  5 carb            6 #>  6 hp             22 #>  7 drat           22 #>  8 mpg            25 #>  9 disp           27 #> 10 wt             29 #> 11 qsec           30  n_unique(iris) #> # A tibble: 5 × 2 #>   Variable     n_unique #>   <chr>           <int> #> 1 Species             3 #> 2 Petal.Width        22 #> 3 Sepal.Width        23 #> 4 Sepal.Length       35 #> 5 Petal.Length       43"},{"path":"https://biodt.github.io/IASDT.R/reference/normalize_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize and quote file paths — normalize_path","title":"Normalize and quote file paths — normalize_path","text":"function ensures file paths expressed consistent canonical form. first converts paths absolute form using fs::path_abs(), tidies fs::path_tidy(), finally quotes correctly based operating system. default, base::normalizePath() behaves differently Windows Linux file exist. Windows, tries construct absolute path, Linux, returns input path -(relative). maintain consistency across platforms, function uses fs::path_abs() instead base::normalizePath().","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/normalize_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize and quote file paths — normalize_path","text":"","code":"normalize_path(path, must_work = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/normalize_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize and quote file paths — normalize_path","text":"path Character vector. file path(s). must_work Logical; TRUE, function errors non-existing paths.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/normalize_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize and quote file paths — normalize_path","text":"character vector absolute, tidied, shell-quoted paths.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/normalize_path.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Normalize and quote file paths — normalize_path","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"List of functions in a package — package_functions","title":"List of functions in a package — package_functions","text":"function returns character vector listing functions available specified R package. first checks package installed can loaded; , raises error.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of functions in a package — package_functions","text":"","code":"package_functions(package)"},{"path":"https://biodt.github.io/IASDT.R/reference/package_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of functions in a package — package_functions","text":"package Character. Package name.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of functions in a package — package_functions","text":"character vector containing names functions specified package.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_functions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List of functions in a package — package_functions","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of functions in a package — package_functions","text":"","code":"str(package_functions(package = \"raster\")) #>  chr [1:281] \"%in%\" \"Arith\" \"Compare\" \"Geary\" \"GearyLocal\" \"KML\" \"Logic\" ...  str(package_functions(package = \"sf\")) #>  chr [1:156] \"%>%\" \"FULL_bbox_\" \"NA_agr_\" \"NA_bbox_\" \"NA_crs_\" ..."},{"path":"https://biodt.github.io/IASDT.R/reference/package_remote_sha.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the remote SHA of R packages — package_remote_sha","title":"Get the remote SHA of R packages — package_remote_sha","text":"function retrieves remote SHA (Secure Hash Algorithm) reference one specified R packages remote repositories. SHA uniquely identifies version package's source code, useful reproducibility version tracking.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_remote_sha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the remote SHA of R packages — package_remote_sha","text":"","code":"package_remote_sha(...)"},{"path":"https://biodt.github.io/IASDT.R/reference/package_remote_sha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the remote SHA of R packages — package_remote_sha","text":"... Character. Names one R packages (quoted unquoted) retrieve remote SHA.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_remote_sha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the remote SHA of R packages — package_remote_sha","text":"named character vector names package names values corresponding remote SHAs. package found remote SHA, value NA.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_remote_sha.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the remote SHA of R packages — package_remote_sha","text":"function uses pak::lib_status() query status installed packages extract remote SHAs. supports packages installed GitHub, GitLab, remote sources via pak. package installed CRAN locally without remote SHA, result NA.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_remote_sha.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the remote SHA of R packages — package_remote_sha","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/package_remote_sha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the remote SHA of R packages — package_remote_sha","text":"","code":"package_remote_sha(Hmsc, IASDT.R, \"nonexistent\") #>        Hmsc     IASDT.R nonexistent  #>    \"3.0-13\"          NA          NA"},{"path":"https://biodt.github.io/IASDT.R/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://biodt.github.io/IASDT.R/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_evaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate plots for the explanatory power of Hmsc models — plot_evaluation","title":"Generate plots for the explanatory power of Hmsc models — plot_evaluation","text":"function generates four diagnostic plots (RMSE, AUC, Continuous Boyce Index, Tjur-R²) evaluate performance (explanatory power without cross-validation) Hmsc models.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_evaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate plots for the explanatory power of Hmsc models — plot_evaluation","text":"","code":"plot_evaluation(model_dir, env_file = \".env\")"},{"path":"https://biodt.github.io/IASDT.R/reference/plot_evaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate plots for the explanatory power of Hmsc models — plot_evaluation","text":"model_dir Character. Path model directory containing predictions. env_file Character. Path environment file containing paths data sources. Defaults .env.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_evaluation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate plots for the explanatory power of Hmsc models — plot_evaluation","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_gelman.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Gelman-Rubin-Brooks — plot_gelman","title":"Plot Gelman-Rubin-Brooks — plot_gelman","text":"PlotGelman_*() functions generate plots visualizing evolution Gelman-Rubin-Brooks shrink factor different model parameters number iterations increases. plots help assess whether MCMC chains converged common distribution. plot includes: median (solid line) 97.5th percentile (dashed line) shrink factor dashed horizontal line 1.1, representing common convergence threshold. primary function users plot_gelman(), internally calls: plot_gelman_alpha(): Plots shrink factor Alpha parameter plot_gelman_beta(): Plots shrink factor Beta parameters plot_gelman_omega(): Plots shrink factor Omega parameter plot_gelman_rho(): Plots shrink factor Rho parameter","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_gelman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Gelman-Rubin-Brooks — plot_gelman","text":"","code":"plot_gelman(   path_coda = NULL,   alpha = TRUE,   beta = TRUE,   omega = TRUE,   rho = TRUE,   n_omega = 1000L,   plotting_alpha = 0.25,   env_file = \".env\",   return_plots = FALSE )  plot_gelman_alpha(coda_object, plotting_alpha = 0.25)  plot_gelman_beta(coda_object, env_file = \".env\", plotting_alpha = 0.25)  plot_gelman_omega(coda_object, n_omega = 1000L, plotting_alpha = 0.25)  plot_gelman_rho(coda_object)"},{"path":"https://biodt.github.io/IASDT.R/reference/plot_gelman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Gelman-Rubin-Brooks — plot_gelman","text":"path_coda Character mcmc.list. Path file containing coda object, mcmc.list object representing MCMC samples. alpha, beta, omega, rho Logical. TRUE, plots Gelman-Rubin statistic respective model parameters (alpha, beta, omega, rho). Default: TRUE parameters. n_omega Integer. Number species sampled omega parameter. Default: 1000L. plotting_alpha Numeric. Transparency level (alpha) plot lines (0 = fully transparent, 1 = fully opaque). Default: 0.25. env_file Character. Path environment file containing paths data sources. Defaults .env. return_plots Character. Path folder output plots saved. coda_object mcmc.list. MCMC sample object containing posterior distributions Hmsc model.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_gelman.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Gelman-Rubin-Brooks — plot_gelman","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_latent_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spatial variation in site loadings of HMSC models — plot_latent_factor","title":"Plot spatial variation in site loadings of HMSC models — plot_latent_factor","text":"Generate save spatial variation site loadings HMSC models' latent factors JPEG file.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_latent_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spatial variation in site loadings of HMSC models — plot_latent_factor","text":"","code":"plot_latent_factor(   path_model = NULL,   env_file = \".env\",   plot_width = 20,   plot_height = 21 )"},{"path":"https://biodt.github.io/IASDT.R/reference/plot_latent_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spatial variation in site loadings of HMSC models — plot_latent_factor","text":"path_model Path model file. env_file Character. Path environment file containing paths data sources. Defaults .env. plot_width, plot_height Numeric. width height output plot cm. Default 20×21 cm.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_latent_factor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot spatial variation in site loadings of HMSC models — plot_latent_factor","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot species and level of invasion predictions as JPEG files using ggplot2 — plot_prediction","title":"Plot species and level of invasion predictions as JPEG files using ggplot2 — plot_prediction","text":"Generate predictions species habitat models saves output JPEG files.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot species and level of invasion predictions as JPEG files using ggplot2 — plot_prediction","text":"","code":"plot_prediction(model_dir = NULL, env_file = \".env\", n_cores = 8L)"},{"path":"https://biodt.github.io/IASDT.R/reference/plot_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot species and level of invasion predictions as JPEG files using ggplot2 — plot_prediction","text":"model_dir Character. Path model directory containing predictions. env_file Character. Path environment file containing paths data sources. Defaults .env. n_cores Integer. Number CPU cores use parallel processing. Default: 8.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot species and level of invasion predictions as JPEG files using ggplot2 — plot_prediction","text":"Saves prediction plots JPEG files specified output directory.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/plot_prediction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot species and level of invasion predictions as JPEG files using ggplot2 — plot_prediction","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/predict_latent_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws samples from the conditional predictive distribution of latent factors — predict_latent_factor","title":"Draws samples from the conditional predictive distribution of latent factors — predict_latent_factor","text":"function optimized speed using parallel processing optionally TensorFlow matrix operations. function adapted Hmsc::predictLatentFactor equivalent results original function predictMean = TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/predict_latent_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws samples from the conditional predictive distribution of latent factors — predict_latent_factor","text":"","code":"predict_latent_factor(   units_pred,   units_model,   postEta,   post_alpha,   LF_rL,   LF_n_cores = 8L,   temp_dir = \"TEMP_Pred\",   LF_temp_cleanup = TRUE,   model_name = NULL,   use_TF = TRUE,   TF_environ = NULL,   TF_use_single = FALSE,   LF_out_file = NULL,   LF_return = FALSE,   LF_check = FALSE,   LF_commands_only = FALSE,   solve_max_attempts = 5L,   solve_chunk_size = 50L,   verbose = TRUE )"},{"path":"https://biodt.github.io/IASDT.R/reference/predict_latent_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws samples from the conditional predictive distribution of latent factors — predict_latent_factor","text":"units_pred factor vector random level units predictions made units_model factor vector random level units conditioned postEta Character. Path postEta; list containing samples random factors conditioned units post_alpha list containing samples range (lengthscale) parameters latent factors LF_rL HmscRandomLevel-class object describes random level structure LF_n_cores Integer. Number cores use parallel processing latent factor prediction. Defaults 8L. temp_dir Character. Path temporary storage intermediate files. LF_temp_cleanup Logical. Whether delete temporary files temp_dir directory finishing LF predictions. model_name Character. Prefix temporary file names. Defaults NULL, case prefix used. use_TF Logical. Whether use TensorFlow calculations. Defaults TRUE. TF_environ Character. Path Python environment. argument required use_TF TRUE Windows. Defaults NULL. TF_use_single Logical. Whether use single precision TensorFlow calculations. Defaults FALSE. LF_out_file Character. Path save outputs. NULL (default), predicted latent factors saved file. end either *.qs2 *.RData. LF_return Logical. Whether output returned. Defaults FALSE. LF_out_file NULL, parameter set FALSE function needs return result saved file. LF_check Logical. TRUE, function checks output files already created valid. FALSE, function check files exist without checking integrity. Default FALSE. LF_commands_only Logical. TRUE, returns command run Python script. Default FALSE. solve_max_attempts Integer. Maximum number attempts run solve crossprod internal function run_crossprod_solve. Default 5L. solve_chunk_size Integer. Chunk size solve_and_multiply Python function. Default 50L. verbose Logical. TRUE, logs detailed information execution. Default TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/predict_latent_factor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draws samples from the conditional predictive distribution of latent factors — predict_latent_factor","text":"function expected faster original function Hmsc package, especially using TensorFlow calculations working parallel. main difference function: allow parallel processing (LF_n_cores argument); TensorFlow used (use_TF = TRUE), matrix calculations much faster, particularly used GPU. following Python modules needed: numpy, tensorflow, rdata, xarray, pandas. use TensorFlow Windows, argument TF_environ set path Python environment TensorFlow installed; use_TF set FALSE, function uses R (supported relatively faster CPP functions) calculations; D11 D12 matrices processed saved disk called needed.","code":""},{"path":[]},{"path":"https://biodt.github.io/IASDT.R/reference/predict_maps_CV.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict and evaluate cross-validated Hmsc models — predict_maps_CV","title":"Predict and evaluate cross-validated Hmsc models — predict_maps_CV","text":"function computes predicted values cross-validated Hmsc models testing cross-validation folders evaluates model performance using different metrics. contrast predict_maps, function predicts current climate conditions use clamping.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/predict_maps_CV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict and evaluate cross-validated Hmsc models — predict_maps_CV","text":"","code":"predict_maps_CV(   model_dir = NULL,   CV_name = NULL,   CV_fold = NULL,   n_cores = 8L,   use_TF = TRUE,   TF_environ = NULL,   TF_use_single = FALSE,   LF_n_cores = n_cores,   LF_check = FALSE,   LF_temp_cleanup = TRUE,   LF_only = FALSE,   LF_commands_only = FALSE,   temp_cleanup = TRUE )"},{"path":"https://biodt.github.io/IASDT.R/reference/predict_maps_CV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict and evaluate cross-validated Hmsc models — predict_maps_CV","text":"model_dir Character. Path root directory cross-validated models fitted. CV_name Character. Name cross-validation strategy used. Valid values CV_Dist, CV_Large, CV_SAC. CV_fold Integer. cross-validation fold number. n_cores Integer. Number CPU cores use parallel processing. Default: 8. use_TF Logical. Whether use TensorFlow calculations. Defaults TRUE. TF_environ Character. Path Python environment. argument required use_TF TRUE Windows. Defaults NULL. TF_use_single Logical. Whether use single precision TensorFlow calculations. Defaults FALSE. LF_n_cores Integer. Number cores use parallel processing latent factor prediction. Defaults 8L. LF_check Logical. TRUE, function checks output files already created valid. FALSE, function check files exist without checking integrity. Default FALSE. LF_temp_cleanup Logical. Whether delete temporary files temp_dir directory finishing LF predictions. LF_only Logical. Whether return latent factor predictions . Defaults FALSE. helps predicting new sites, allowing predicting latent factors , output can loaded predictions needed. LF_commands_only Logical. TRUE, returns command run Python script. Default FALSE. temp_cleanup Logical. Whether clean temporary files. Defaults TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/predict_maps_CV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict and evaluate cross-validated Hmsc models — predict_maps_CV","text":"tibble containing prediction summary file paths output *.tif files.","code":""},{"path":[]},{"path":"https://biodt.github.io/IASDT.R/reference/predict_maps_CV.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict and evaluate cross-validated Hmsc models — predict_maps_CV","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/prepare_knots.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare knot locations for Hmsc GPP models — prepare_knots","title":"Prepare knot locations for Hmsc GPP models — prepare_knots","text":"Prepare locations knots use Gaussian Predictive Process (GPP) models within HMSC framework. ensures knots spaced minimum specified distance applies jitter identical coordinates avoid overlap.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/prepare_knots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare knot locations for Hmsc GPP models — prepare_knots","text":"","code":"prepare_knots(   coordinates = NULL,   min_distance = NULL,   jitter_distance = 100,   min_LF = NULL,   max_LF = NULL,   alphapw = list(Prior = NULL, Min = 20, Max = 1200, Samples = 200) )"},{"path":"https://biodt.github.io/IASDT.R/reference/prepare_knots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare knot locations for Hmsc GPP models — prepare_knots","text":"coordinates Numeric matrix data frame containing (x, y) coordinates sampling units. min_distance Numeric. Minimum distance knots meters. distance used knotDist minKnotDist parameters Hmsc::constructKnots function. jitter_distance Numeric. jitter distance applied overlapping coordinates avoid exact duplicates. Defaults 100 meters. min_LF, max_LF Integer. Minimum maximum number latent factors used. default NULL means number latent factors estimated data. either provided, respective values used arguments Hmsc::setPriors. alphapw Prior alpha parameter. Defaults list Prior = NULL, Min = 20, Max = 1200, Samples = 200. alphapw NULL list NULL list items, default prior used. Prior matrix, used prior. Prior = NULL, prior generated using Min, Max, Samples. Min Max minimum maximum values alpha parameter (kilometer). Samples number samples used prior.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/prepare_knots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare knot locations for Hmsc GPP models — prepare_knots","text":"object suitable specifying random level HMSC GPP models. object contains prepared knot locations.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/prepare_knots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare knot locations for Hmsc GPP models — prepare_knots","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/range_to_new_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes values within a specified range, or greater than or less than a specific value to a new value in a vector, data.frame, or raster — range_to_new_value","title":"Changes values within a specified range, or greater than or less than a specific value to a new value in a vector, data.frame, or raster — range_to_new_value","text":"function modifies values input object x based specified conditions. can operate vectors, data.frames, RasterLayer objects. function allows changing values within specified range (), greater equals (greater_than)  less equals (less_than) specified value new value (new_value). option invert selection also available ranges.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/range_to_new_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes values within a specified range, or greater than or less than a specific value to a new value in a vector, data.frame, or raster — range_to_new_value","text":"","code":"range_to_new_value(   x = NULL,   between = NULL,   greater_than = NULL,   less_than = NULL,   new_value = NULL,   invert = FALSE )"},{"path":"https://biodt.github.io/IASDT.R/reference/range_to_new_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changes values within a specified range, or greater than or less than a specific value to a new value in a vector, data.frame, or raster — range_to_new_value","text":"x numeric vector, data.frame, RasterLayer, SpatRaster object whose values modified. Numeric. numeric vector length 2 specifying range values changed kept. specified, greater_than less_than ignored. greater_than, less_than Numeric. Threshold larger equal /less equal values x changed new_value. applied specified. new_value new value assign selected elements x. invert Logical. Whether invert selection specified . TRUE, values outside specified range changed new_value. Default FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/range_to_new_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Changes values within a specified range, or greater than or less than a specific value to a new value in a vector, data.frame, or raster — range_to_new_value","text":"modified object x values changed according specified conditions.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/range_to_new_value.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Changes values within a specified range, or greater than or less than a specific value to a new value in a vector, data.frame, or raster — range_to_new_value","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/range_to_new_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changes values within a specified range, or greater than or less than a specific value to a new value in a vector, data.frame, or raster — range_to_new_value","text":"","code":"library(raster) library(terra) par(mar = c(0.5, 0.5, 1, 2.5), oma = c(0.5, 0.5, 0.5, 1))  # ---------------------------------------------  # Vector  (VV <- seq_len(10)) #>  [1]  1  2  3  4  5  6  7  8  9 10  range_to_new_value(x = VV, between = c(5, 8), new_value = NA) #>  [1]  1  2  3  4 NA NA NA NA  9 10  range_to_new_value(x = VV, between = c(5, 8), new_value = NA, invert = TRUE) #>  [1] NA NA NA NA  5  6  7  8 NA NA  # greater_than is ignored as between is specified range_to_new_value(    x = VV, between = c(5, 8), new_value = NA, greater_than = 4) #>  [1]  1  2  3  4 NA NA NA NA  9 10  range_to_new_value(x = VV, new_value = NA, greater_than = 4) #>  [1]  1  2  3 NA NA NA NA NA NA NA  range_to_new_value(x = VV, new_value = NA, less_than = 4) #>  [1] NA NA NA NA  5  6  7  8  9 10  # ---------------------------------------------  # tibble  iris2 <- iris %>%   tibble::as_tibble() %>%   dplyr::slice_head(n = 50) %>%   dplyr::select(-Sepal.Length, -Petal.Length, -Petal.Width) %>%   dplyr::arrange(-Sepal.Width)  iris2 %>%  dplyr::mutate(    Sepal.Width.New = range_to_new_value(       x = Sepal.Width, between = c(3, 3.5),       new_value = NA, invert = FALSE),    Sepal.Width.Rev = range_to_new_value(       x = Sepal.Width, between = c(3, 3.5),       new_value = NA, invert = TRUE)) %>%  print(n = 50) #> # A tibble: 50 × 4 #>    Sepal.Width Species Sepal.Width.New Sepal.Width.Rev #>          <dbl> <fct>             <dbl>           <dbl> #>  1         4.4 setosa              4.4            NA   #>  2         4.2 setosa              4.2            NA   #>  3         4.1 setosa              4.1            NA   #>  4         4   setosa              4              NA   #>  5         3.9 setosa              3.9            NA   #>  6         3.9 setosa              3.9            NA   #>  7         3.8 setosa              3.8            NA   #>  8         3.8 setosa              3.8            NA   #>  9         3.8 setosa              3.8            NA   #> 10         3.8 setosa              3.8            NA   #> 11         3.7 setosa              3.7            NA   #> 12         3.7 setosa              3.7            NA   #> 13         3.7 setosa              3.7            NA   #> 14         3.6 setosa              3.6            NA   #> 15         3.6 setosa              3.6            NA   #> 16         3.6 setosa              3.6            NA   #> 17         3.5 setosa             NA               3.5 #> 18         3.5 setosa             NA               3.5 #> 19         3.5 setosa             NA               3.5 #> 20         3.5 setosa             NA               3.5 #> 21         3.5 setosa             NA               3.5 #> 22         3.5 setosa             NA               3.5 #> 23         3.4 setosa             NA               3.4 #> 24         3.4 setosa             NA               3.4 #> 25         3.4 setosa             NA               3.4 #> 26         3.4 setosa             NA               3.4 #> 27         3.4 setosa             NA               3.4 #> 28         3.4 setosa             NA               3.4 #> 29         3.4 setosa             NA               3.4 #> 30         3.4 setosa             NA               3.4 #> 31         3.4 setosa             NA               3.4 #> 32         3.3 setosa             NA               3.3 #> 33         3.3 setosa             NA               3.3 #> 34         3.2 setosa             NA               3.2 #> 35         3.2 setosa             NA               3.2 #> 36         3.2 setosa             NA               3.2 #> 37         3.2 setosa             NA               3.2 #> 38         3.2 setosa             NA               3.2 #> 39         3.1 setosa             NA               3.1 #> 40         3.1 setosa             NA               3.1 #> 41         3.1 setosa             NA               3.1 #> 42         3.1 setosa             NA               3.1 #> 43         3   setosa             NA               3   #> 44         3   setosa             NA               3   #> 45         3   setosa             NA               3   #> 46         3   setosa             NA               3   #> 47         3   setosa             NA               3   #> 48         3   setosa             NA               3   #> 49         2.9 setosa              2.9            NA   #> 50         2.3 setosa              2.3            NA    # ---------------------------------------------  # RasterLayer / SpatRaster  grd_file <- system.file(\"external/test.grd\", package = \"raster\") R_raster <- raster::raster(grd_file) R_terra <- terra::rast(grd_file)  # Convert values less than 500 to NA R_raster2 <- range_to_new_value( x = R_raster, less_than = 500, new_value = NA) plot(    raster::stack(R_raster, R_raster2), nr = 1,    main = c(\"\\nOriginal\", \"\\n<500 to NA\"),    box = FALSE, axes = FALSE, legend.width = 2, colNA = \"lightgrey\",    xaxs = \"i\", yaxs = \"i\")   R_terra2 <- range_to_new_value(x = R_terra, less_than = 500, new_value = NA) plot(    c(R_terra, R_terra2), nr = 1, main = c(\"\\nOriginal\", \"\\n<500 to NA\"),    box = FALSE, axes = FALSE, colNA = \"lightgrey\", xaxs = \"i\", yaxs = \"i\")    # Convert values greater than 700 to NA R_raster2 <- range_to_new_value(    x = R_raster, greater_than = 700, new_value = NA) plot(    raster::stack(R_raster, R_raster2), nr = 1,    main = c(\"\\nOriginal\", \"\\n>700 to NA\"),    box = FALSE, axes = FALSE, legend.width = 2, colNA = \"lightgrey\",    xaxs = \"i\", yaxs = \"i\")   R_terra2 <- range_to_new_value(     x = R_terra, greater_than = 700, new_value = NA) plot(    c(R_terra, R_terra2), nr = 1, main = c(\"\\nOriginal\", \"\\n>700 to NA\"),    box = FALSE, axes = FALSE, colNA = \"lightgrey\", xaxs = \"i\", yaxs = \"i\")"},{"path":"https://biodt.github.io/IASDT.R/reference/raster_to_PA.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raster map into binary (1/0) — raster_to_PA","title":"Convert raster map into binary (1/0) — raster_to_PA","text":"function converts raster values binary format positive values set 1 (presence) zeros remain 0 (absence). Additionally, allows conversion NA values 0, /0 values NA, based user's choice.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/raster_to_PA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raster map into binary (1/0) — raster_to_PA","text":"","code":"raster_to_PA(raster = NULL, NA_to_0 = TRUE, zero_to_NA = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/raster_to_PA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raster map into binary (1/0) — raster_to_PA","text":"raster input raster map. must class PackedSpatRaster, RasterLayer, SpatRaster. parameter NULL. NA_to_0 logical value indicating whether NA values converted 0. Defaults TRUE. zero_to_NA logical value indicating whether 0 values converted NA. Defaults FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/raster_to_PA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raster map into binary (1/0) — raster_to_PA","text":"raster map values converted according specified parameters. object class input object.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/raster_to_PA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert raster map into binary (1/0) — raster_to_PA","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/raster_to_PA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raster map into binary (1/0) — raster_to_PA","text":"","code":"IASDT.R::load_packages(    package_list = c(\"dplyr\", \"raster\", \"ggplot2\", \"tidyterra\"))  r <- raster::raster(system.file(\"external/test.grd\", package = \"raster\"))  ggplot2::ggplot() +   tidyterra::geom_spatraster(data = terra::rast(r), maxcell = Inf) +   ggplot2::theme_minimal()   R2 <- raster::stack(   # NA replaced with 0   raster_to_PA(raster = r),   # NA is kept as NA   raster_to_PA(raster = r, NA_to_0 = FALSE),   # 0 replaced with NA in the second map   raster_to_PA(raster = raster_to_PA(r), zero_to_NA = TRUE))  ggplot2::ggplot() +   tidyterra::geom_spatraster(     data = terra::as.factor(terra::rast(R2)), maxcell = Inf) +   ggplot2::facet_wrap(~lyr) +   ggplot2::scale_fill_manual(values = c(\"grey30\", \"red\"),     na.value = \"transparent\") +   ggplot2::theme_minimal()"},{"path":"https://biodt.github.io/IASDT.R/reference/record_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture and record evaluated function arguments — record_arguments","title":"Capture and record evaluated function arguments — record_arguments","text":"record_arguments() utility function captures records evaluated forms arguments passed parent function. returns tibble columns named arguments, containing evaluated values .","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/record_arguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture and record evaluated function arguments — record_arguments","text":"","code":"record_arguments(out_path = NULL)"},{"path":"https://biodt.github.io/IASDT.R/reference/record_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture and record evaluated function arguments — record_arguments","text":"out_path Character. path .RData file output tibble exported. NULL (default), tibble returned without saving. provided, tibble saved specified file NULL returned invisibly.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/record_arguments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture and record evaluated function arguments — record_arguments","text":"tibble containing evaluated forms parent function’s arguments additional named arguments passed via ..., columns named arguments (e.g., w, x, y, extra1). Evaluated values presented scalars (e.g., 8) list columns complex objects (e.g., <SpatRaster>). out_path provided, tibble saved specified .RData file NULL returned invisibly.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/record_arguments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Capture and record evaluated function arguments — record_arguments","text":"function evaluates arguments grandparent environment (two frames ), fallback global environment evaluation fails. ensures correct evaluation iterative contexts like lapply. handles: Scalars (e.g., numbers, strings) single values. Multi-element vectors complex objects (e.g., SpatRaster) list columns. NULL values converted string \"NULL\". Failed evaluations result NA. Additional named arguments passed via ... parent function also recorded. function must called within another function, relies sys.call(-1) capture parent call.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/record_arguments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Capture and record evaluated function arguments — record_arguments","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/record_arguments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capture and record evaluated function arguments — record_arguments","text":"","code":"a <- 5 b <- 3 w_values <- 1:3 x_values <- c(a + b, 10, 15) y_values <- c(\"ABCD\", \"XYZ123\", \"TEST\")  Function1 <- function(w = 5, x, y, z = c(1, 2), ...) {   Args <- record_arguments()   return(Args) }  # ----------------------------------------------------  # Example 1: Simple function call with scalar and expression Function1(x = a + b, y = 2) #> # A tibble: 1 × 4 #>       w     x     y z         #>   <dbl> <dbl> <dbl> <list>    #> 1     5     8     2 <dbl [2]>  # ----------------------------------------------------  # Example 2: Using lapply with indexed arguments  lapply(   X = 1:3,   FUN = function(Z) {     Function1(       w = w_values[Z],       x = x_values[Z],       y = stringr::str_extract(y_values[Z], \"B.+$\"),       z = Z) }) %>% dplyr::bind_rows() %>% print() #> # A tibble: 3 × 4 #>       w     x y         z #>   <int> <dbl> <chr> <int> #> 1     1     8 BCD       1 #> 2     2    10 NA        2 #> 3     3    15 NA        3  # ----------------------------------------------------  # Example 3: Using pmap with mixed argument types purrr::pmap(   .l = list(w = w_values, x = x_values, y = y_values),   .f = function(w, x, y) {     Function1(       w = w,       x = x,       y = stringr::str_extract(y, \"B.+$\"),       z = terra::rast(system.file(\"ex/elev.tif\", package = \"terra\")))   }) %>%   dplyr::bind_rows() %>%   print() #> # A tibble: 3 × 4 #>       w     x y     z          #>   <int> <dbl> <chr> <list>     #> 1     1     8 BCD   <PckdSptR> #> 2     2    10 NA    <PckdSptR> #> 3     3    15 NA    <PckdSptR>  # ----------------------------------------------------  # Example 4: Using additional arguments via ... Function1(x = a + b, y = \"test\", extra1 = \"hello\", extra2 = 42) #> # A tibble: 1 × 6 #>       w     x y     z         extra1 extra2 #>   <dbl> <dbl> <chr> <list>    <chr>   <dbl> #> 1     5     8 test  <dbl [2]> hello      42"},{"path":"https://biodt.github.io/IASDT.R/reference/reload_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Reload an R package — reload_package","title":"Reload an R package — reload_package","text":"function reloads specified R package. package already loaded, attempts load . package already loaded, reloads package library location. can useful package development changes made package code. function depends devtools::reload function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/reload_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reload an R package — reload_package","text":"","code":"reload_package(package)"},{"path":"https://biodt.github.io/IASDT.R/reference/reload_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reload an R package — reload_package","text":"package Character. Name package reload.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/reload_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reload an R package — reload_package","text":"function used side effect reloading package rather return value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/reload_package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reload an R package — reload_package","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/reload_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reload an R package — reload_package","text":"","code":"load_packages(sf)  reload_package(\"sf\") #> ℹ Reloading attached sf #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE"},{"path":"https://biodt.github.io/IASDT.R/reference/replace_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace space with underscore in a string — replace_space","title":"Replace space with underscore in a string — replace_space","text":"simple wrapper function stringr::str_replace_all replaces spaces underscores. useful formatting strings used contexts spaces allowed desired.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/replace_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace space with underscore in a string — replace_space","text":"","code":"replace_space(x)"},{"path":"https://biodt.github.io/IASDT.R/reference/replace_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace space with underscore in a string — replace_space","text":"x Character. string spaces replaced underscores.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/replace_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace space with underscore in a string — replace_space","text":"character string spaces replaced underscores.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/replace_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace space with underscore in a string — replace_space","text":"","code":"replace_space(\"Genus species\") #> [1] \"Genus_species\"  replace_space(\"Genus species subspecies\") #> [1] \"Genus_species_subspecies\""},{"path":"https://biodt.github.io/IASDT.R/reference/run_crossprod_solve.html","id":null,"dir":"Reference","previous_headings":"","what":"run_crossprod_solve Run Crossprod Solve — run_crossprod_solve","title":"run_crossprod_solve Run Crossprod Solve — run_crossprod_solve","text":"Internal function executes Python script performs matrix computations using TensorFlow provided inputs. Retries three times output file validation fails.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/run_crossprod_solve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_crossprod_solve Run Crossprod Solve — run_crossprod_solve","text":"","code":"run_crossprod_solve(   TF_environ,   s1,   s2,   postEta,   path_out,   denom,   chunk_size = 1000L,   threshold_mb = 2000L,   TF_use_single = TRUE,   verbose = TRUE,   solve_chunk_size = 50L,   solve_max_attempts = 5L,   LF_commands_only = FALSE )"},{"path":"https://biodt.github.io/IASDT.R/reference/run_crossprod_solve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_crossprod_solve Run Crossprod Solve — run_crossprod_solve","text":"TF_environ Character. Path Python environment. argument required use_TF TRUE Windows. Defaults NULL. s1 Character. Path input file containing s1 coordinates. s2 Character Path input file containing s2 coordinates. postEta Character. Path file containing postEta matrix data. path_out Character. Path rds file output results saved. denom Numeric. denominator value used computation. chunk_size Numeric (Optional). Size chunks process time. Default 1000. threshold_mb Numeric (Optional). Memory threshold (MB) manage processing. Default 2000. TF_use_single Logical. Whether use single precision TensorFlow calculations. Defaults FALSE. verbose Logical. TRUE, logs detailed information execution. Default TRUE. solve_chunk_size Integer. Chunk size solve_and_multiply Python function. Default 50L. solve_max_attempts Integer. Maximum number attempts run solve crossprod internal function run_crossprod_solve. Default 5L. LF_commands_only Logical. TRUE, returns command run Python script. Default FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/run_crossprod_solve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run_crossprod_solve Run Crossprod Solve — run_crossprod_solve","text":"Returns path_out successful. Returns NULL attempts fail.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/run_crossprod_solve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"run_crossprod_solve Run Crossprod Solve — run_crossprod_solve","text":"function checks existence required input files Python executable specified virtual environment. Executes Python script using system2. Verifies output file validity using IASDT.R::check_data. Retries 3 times output invalid. Generates detailed logs verbose set TRUE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/run_crossprod_solve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"run_crossprod_solve Run Crossprod Solve — run_crossprod_solve","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_as.html","id":null,"dir":"Reference","previous_headings":"","what":"Save an object to a file with a new name — save_as","title":"Save an object to a file with a new name — save_as","text":"function saves R object specified file path potentially new name. useful renaming objects save process. function supports saving objects RData, qs2, feather, rds formats. format determined extension file path.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_as.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save an object to a file with a new name — save_as","text":"","code":"save_as(   object = NULL,   object_name = NULL,   out_path = NULL,   n_threads = 5L,   feather_compression = \"zstd\",   ... )"},{"path":"https://biodt.github.io/IASDT.R/reference/save_as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save an object to a file with a new name — save_as","text":"object input object saved. can actual R object character string representing name object. object_name Character. new name saved RData object. name used object loaded back R. Default NULL. required saving RData files. out_path Character. File path (ends either *.RData, *.qs2, feather, rds) object saved. includes directory file name. n_threads Character. Number threads use compressing data. See qs2::qs_save. feather_compression Character. compression algorithm use saving object feather format. default \"zstd\". See arrow::write_feather. ... Additional arguments passed respective save functions. base::save RData files; qs2::qs_save qs2 files; arrow::write_feather feather files; base::saveRDS rds files.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save an object to a file with a new name — save_as","text":"function return value saves object specified file path.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_as.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save an object to a file with a new name — save_as","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_as.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save an object to a file with a new name — save_as","text":"","code":"TMP_Folder <- IASDT.R::path(tempdir(), stringi::stri_rand_strings(1, 5)) fs::dir_create(TMP_Folder) list.files(TMP_Folder) #> character(0)  # save iris data in `iris2.RData` with `iris2` object name save_as(iris, \"iris2\", IASDT.R::path(TMP_Folder, \"iris2.RData\")) list.files(TMP_Folder, pattern = \"^.+.RData\") #> [1] \"iris2.RData\"  (load(IASDT.R::path(TMP_Folder, \"iris2.RData\"))) #> [1] \"iris2\"  tibble::tibble(iris2) #> # A tibble: 150 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows"},{"path":"https://biodt.github.io/IASDT.R/reference/save_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Save multiple objects to their respective .RData files — save_multiple","title":"Save multiple objects to their respective .RData files — save_multiple","text":"function saves specified variables global environment separate .RData files. allows optional file prefixing overwriting existing files.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save multiple objects to their respective .RData files — save_multiple","text":"","code":"save_multiple(   variables = NULL,   out_directory = getwd(),   overwrite = FALSE,   prefix = \"\",   verbose = FALSE )"},{"path":"https://biodt.github.io/IASDT.R/reference/save_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save multiple objects to their respective .RData files — save_multiple","text":"variables Character vector. Names variables saved. NULL specified variable exist global environment, function stop error. out_directory Character. Path output folder .RData files saved. Defaults current working directory. overwrite Logical. Whether existing .RData files overwritten. FALSE (Default) files exist, function stop error message. prefix Character. prefix output file name. Useful organizing saved files avoiding name conflicts. Defaults empty string. verbose Logical. Whether print message upon successful saving files. Defaults FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save multiple objects to their respective .RData files — save_multiple","text":"function used side effect saving files return value.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_multiple.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save multiple objects to their respective .RData files — save_multiple","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save multiple objects to their respective .RData files — save_multiple","text":"","code":"if (FALSE) { # \\dontrun{   TMP_Folder <- IASDT.R::path(tempdir(), stringi::stri_rand_strings(1, 5))   fs::dir_create(TMP_Folder)    # ----------------------------------------------   # Save x1 and x2 to disk   # ----------------------------------------------   x1 = 10; x2 = 20    save_multiple(variables = c(\"x1\", \"x2\"), out_directory = TMP_Folder)    list.files(path = TMP_Folder, pattern = \"^.+.RData\")    (x1Contents <- IASDT.R::load_as(IASDT.R::path(TMP_Folder, \"x1.RData\")))    (x2Contents <- IASDT.R::load_as(IASDT.R::path(TMP_Folder, \"x2.RData\")))    # ----------------------------------------------   # Use prefix   # ----------------------------------------------    save_multiple(       variables = c(\"x1\", \"x2\"), out_directory = TMP_Folder, prefix = \"A_\")    list.files(path = TMP_Folder, pattern = \"^.+.RData\")    # ----------------------------------------------   # File exists, no save   # ----------------------------------------------   try(save_multiple(variables = c(\"x1\", \"x2\"), out_directory = TMP_Folder))    # ----------------------------------------------   # overwrite existing file   # ----------------------------------------------   x1 = 100; x2 = 200; x3 = 300    save_multiple(variables = c(\"x1\", \"x2\", \"x3\"),      out_directory = TMP_Folder, overwrite = TRUE)    (x1Contents <- IASDT.R::load_as(IASDT.R::path(TMP_Folder, \"x1.RData\")))    (x2Contents <- IASDT.R::load_as(IASDT.R::path(TMP_Folder, \"x2.RData\")))    (x3Contents <- IASDT.R::load_as(IASDT.R::path(TMP_Folder, \"x3.RData\"))) } # }"},{"path":"https://biodt.github.io/IASDT.R/reference/save_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves all non-function objects from the global environment to an RData file — save_session","title":"Saves all non-function objects from the global environment to an RData file — save_session","text":"function saves objects (except functions specified exclusions) global environment list items RData file. also creates summary objects' sizes memory.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves all non-function objects from the global environment to an RData file — save_session","text":"","code":"save_session(out_directory = getwd(), exclude_objects = NULL, prefix = \"S\")"},{"path":"https://biodt.github.io/IASDT.R/reference/save_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves all non-function objects from the global environment to an RData file — save_session","text":"out_directory Character. Directory path output RData file saved. Defaults current working directory base::getwd(). exclude_objects Character vector. Object names (strings) exclude saving. prefix Character. prefix saved file name . Defaults S.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saves all non-function objects from the global environment to an RData file — save_session","text":"tibble containing names sizes (MB, rounded 1 decimal place) saved objects.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_session.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Saves all non-function objects from the global environment to an RData file — save_session","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_session_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Save session information to a file — save_session_info","title":"Save session information to a file — save_session_info","text":"function saves current R session information, including installed packages, session details, optionally, information specific objects session, text file.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_session_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save session information to a file — save_session_info","text":"","code":"save_session_info(out_directory = getwd(), session_info = NULL, prefix = \"S\")"},{"path":"https://biodt.github.io/IASDT.R/reference/save_session_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save session information to a file — save_session_info","text":"out_directory Character. Directory path output file saved. default current working directory (base::getwd). session_info optional list objects include session information output. typically result session management function like save_session. provided, details objects (excluding functions pre-selected objects, sizes megabytes) appended session information file. prefix Character. Prefix output file name. Defaults S.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_session_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save session information to a file — save_session_info","text":"primary effect function side effect writing session information file.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/save_session_info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save session information to a file — save_session_info","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/scrape_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts link texts and URLs from a web page — scrape_link","title":"Extracts link texts and URLs from a web page — scrape_link","text":"function scrapes web page links (<> tags) extracts URLs link text.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/scrape_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts link texts and URLs from a web page — scrape_link","text":"","code":"scrape_link(URL, sort_by = c(\"Link\", \"Link_text\"))"},{"path":"https://biodt.github.io/IASDT.R/reference/scrape_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts link texts and URLs from a web page — scrape_link","text":"URL Character. URL web page scrape. URL also used resolve relative links absolute URLs. sort_by Character vector length 1 2. columns arrange output . default c(\"Link\", \"Link_text\"). first column URL link, second column text link. function arrange output ascending order column(s) specified argument.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/scrape_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts link texts and URLs from a web page — scrape_link","text":"tibble two columns: Link_text containing text link, URL containing  absolute URL link. tibble sorted URL link text, unique links included.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/scrape_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts link texts and URLs from a web page — scrape_link","text":"","code":"head( scrape_link(URL = \"https://github.com/BioDT/IASDT.R\")) #> # A tibble: 6 × 2 #>   Link_text                Link                                                 #>   <chr>                    <chr>                                                #> 1 https://biodt.eu         https://biodt.eu                                     #> 2 BioDT                    https://biodt.eu/                                    #> 3 link                     https://biodt.eu/                                    #> 4 IASDT.R                  https://biodt.github.io/IASDT.R                      #> 5 biodt.github.io/IASDT.R/ https://biodt.github.io/IASDT.R/                     #> 6 here                     https://biodt.github.io/IASDT.R/reference/index.html  head(   scrape_link(     URL = \"https://github.com/BioDT/IASDT.R\", sort_by = \"Link_text\")) #> # A tibble: 6 × 2 #>   Link_text     Link                                                             #>   <chr>         <chr>                                                            #> 1 + 2 releases  https:/github.com/BioDT/IASDT.R/BioDT/IASDT.R/releases           #> 2 .Rbuildignore https:/github.com/BioDT/IASDT.R/BioDT/IASDT.R/blob/main/.Rbuild… #> 3 .github       https:/github.com/BioDT/IASDT.R/BioDT/IASDT.R/tree/main/.github  #> 4 .gitignore    https:/github.com/BioDT/IASDT.R/BioDT/IASDT.R/blob/main/.gitign… #> 5 .lintr        https:/github.com/BioDT/IASDT.R/BioDT/IASDT.R/blob/main/.lintr   #> 6 0 forks       https:/github.com/BioDT/IASDT.R/BioDT/IASDT.R/forks               # This will give an \"Invalid URL\" error if (FALSE) { # \\dontrun{  scrape_link(URL = \"https://github50.com\") } # }"},{"path":"https://biodt.github.io/IASDT.R/reference/script_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the location of the current R script. — script_location","title":"Retrieve the location of the current R script. — script_location","text":"function determines file path currently executing R script. checks command line arguments (e.g., via Rscript) script path, interactive sessions, examines call stack recently sourced file, falling back rstudioapi (available RStudio running) sourcing context exists. location determined, returns NA.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/script_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the location of the current R script. — script_location","text":"","code":"script_location()"},{"path":"https://biodt.github.io/IASDT.R/reference/script_location.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Retrieve the location of the current R script. — script_location","text":"source code function adapted stackoverflow question.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/script_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the location of the current R script. — script_location","text":"character string representing file path current R script, NA_character_ path determined (e.g., unsourced interactive session without script context).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/script_location.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the location of the current R script. — script_location","text":"function follows priority order: Command line arguments (--file) executed via Rscript. recent ofile attribute call stack sourced interactively R environment, supporting nested sourcing scenarios. RStudio's active editor context via rstudioapi available, RStudio running, sourcing context found. Returns NA_character_ unsourced interactive sessions non-interactive execution without script path.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/script_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the location of the current R script. — script_location","text":"","code":"if (FALSE) { # \\dontrun{ # Save as \"myscript.R\": script_location() # Run: Rscript myscript.R # Output: [1] \"myscript.R\" (or full path depending on Rscript invocation) } # }"},{"path":"https://biodt.github.io/IASDT.R/reference/set_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the geometry column of a simple feature (sf) data frame in the pipe pipeline. — set_geometry","title":"Set the geometry column of a simple feature (sf) data frame in the pipe pipeline. — set_geometry","text":"Set geometry column simple feature (sf) data frame, making particularly useful data processing pipelines. specifying name geometry column, users can ensure spatial operations utilize correct data.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the geometry column of a simple feature (sf) data frame in the pipe pipeline. — set_geometry","text":"","code":"set_geometry(sf_object, geometry_column)"},{"path":"https://biodt.github.io/IASDT.R/reference/set_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the geometry column of a simple feature (sf) data frame in the pipe pipeline. — set_geometry","text":"sf_object simple feature (sf) data frame. data frame whose geometry column set changed. geometry_column Character. Name geometry column used set sf_object data frame.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the geometry column of a simple feature (sf) data frame in the pipe pipeline. — set_geometry","text":"modified simple feature (sf) data frame updated geometry column. function returns original data frame sf_object geometry column set Name.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_geometry.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the geometry column of a simple feature (sf) data frame in the pipe pipeline. — set_geometry","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_CRS.html","id":null,"dir":"Reference","previous_headings":"","what":"sets CRS for a SpatRaster — set_raster_CRS","title":"sets CRS for a SpatRaster — set_raster_CRS","text":"function sets coordinate reference system (CRS) SpatRaster object using specified EPSG code. wrapper function terra::crs(raster) <- CRS allowing set CRS pipe.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_CRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sets CRS for a SpatRaster — set_raster_CRS","text":"","code":"set_raster_CRS(raster, CRS = \"epsg:3035\")"},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_CRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sets CRS for a SpatRaster — set_raster_CRS","text":"raster SpatRaster object whose CRS needs set. CRS Character. CRS value set, default \"epsg:3035\".","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_CRS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sets CRS for a SpatRaster — set_raster_CRS","text":"SpatRaster object updated CRS.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_CRS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sets CRS for a SpatRaster — set_raster_CRS","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Set values for SpatRaster Objects — set_raster_values","title":"Set values for SpatRaster Objects — set_raster_values","text":"function processes SpatRaster object file path , ensuring raster loaded unpacked necessary. converts raster objects raster package SpatRaster objects. function ensures SpatRaster object read memory, file.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set values for SpatRaster Objects — set_raster_values","text":"","code":"set_raster_values(raster)"},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set values for SpatRaster Objects — set_raster_values","text":"raster SpatRaster object, file path raster file, object raster package (e.g., RasterLayer, RasterStack, RasterBrick).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set values for SpatRaster Objects — set_raster_values","text":"SpatRaster object values loaded memory.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set values for SpatRaster Objects — set_raster_values","text":"function handles various types input: file path provided, attempts load raster using terra::rast(). input packed SpatRaster, unpacks raster using terra::unwrap(). input raster object raster package, converted SpatRaster.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/set_raster_values.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set values for SpatRaster Objects — set_raster_values","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/sf_add_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Add longitude and latitude coordinates to an sf object — sf_add_coords","title":"Add longitude and latitude coordinates to an sf object — sf_add_coords","text":"Add longitude latitude coordinates new columns sf object (sf_object). extracts coordinates sf object, converts tibble, appends original sf object new columns. name_x name_y, provided arguments respectively, already exist sf object, function either  1) overwrites columns overwrite set TRUE 2) appends \"_NEW\" new column names avoid overwrite overwrite set FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/sf_add_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add longitude and latitude coordinates to an sf object — sf_add_coords","text":"","code":"sf_add_coords(sf_object, name_x = \"Long\", name_y = \"Lat\", overwrite = FALSE)"},{"path":"https://biodt.github.io/IASDT.R/reference/sf_add_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add longitude and latitude coordinates to an sf object — sf_add_coords","text":"sf_object sf object longitude latitude columns added. name_x, name_y Character. Name longitude column added. Defaults Long Lat. overwrite Logical. Whether overwrite existing columns names specified name_x name_y. FALSE columns names exist, new columns appended \"_NEW\" suffix. Defaults FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/sf_add_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add longitude and latitude coordinates to an sf object — sf_add_coords","text":"sf object added longitude latitude columns.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/sf_add_coords.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add longitude and latitude coordinates to an sf object — sf_add_coords","text":"overwrite parameter FALSE (default) columns specified names already exist, function issue warning append \"_NEW\" names new columns avoid overwriting.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/sf_add_coords.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add longitude and latitude coordinates to an sf object — sf_add_coords","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/sf_add_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add longitude and latitude coordinates to an sf object — sf_add_coords","text":"","code":"pt1 = sf::st_point(c(0,1)) pt2 = sf::st_point(c(1,1)) d = data.frame(a = c(1, 2)) d$geom = sf::st_sfc(pt1, pt2) df = sf::st_as_sf(d) df #> Simple feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 1 xmax: 1 ymax: 1 #> CRS:           NA #>   a        geom #> 1 1 POINT (0 1) #> 2 2 POINT (1 1) (df <- sf_add_coords(df)) #> Simple feature collection with 2 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 1 xmax: 1 ymax: 1 #> CRS:           NA #>   a Long Lat        geom #> 1 1    0   1 POINT (0 1) #> 2 2    1   1 POINT (1 1)  (sf_add_coords(df)) #> Warning: Provided column names for longitude and Latitude already exist in the data; `_NEW` is used as suffix #> Simple feature collection with 2 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 1 xmax: 1 ymax: 1 #> CRS:           NA #>   a Long Lat Long_NEW Lat_NEW        geom #> 1 1    0   1        0       1 POINT (0 1) #> 2 2    1   1        1       1 POINT (1 1)  (sf_add_coords(df, overwrite = TRUE)) #> Warning: Provided column names for longitude and Latitude already exist in the data; these columns were overwritten #> Simple feature collection with 2 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 1 xmax: 1 ymax: 1 #> CRS:           NA #>   a Long Lat        geom #> 1 1    0   1 POINT (0 1) #> 2 2    1   1 POINT (1 1)"},{"path":"https://biodt.github.io/IASDT.R/reference/sort2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort alphanumeric strings with enhanced options — sort2","title":"Sort alphanumeric strings with enhanced options — sort2","text":"function extends sorting capabilities alphanumeric strings allowing sorting mixed numeric character strings, additional control sorting direction, treatment NA blank values, handling numeric values represented either decimal numbers Roman numerals. function wrapper function gtools::mixedsort function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/sort2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort alphanumeric strings with enhanced options — sort2","text":"","code":"sort2(   x,   decreasing = FALSE,   na.last = TRUE,   blank.last = FALSE,   numeric.type = c(\"decimal\", \"roman\"),   roman.case = c(\"upper\", \"lower\", \"both\") )"},{"path":"https://biodt.github.io/IASDT.R/reference/sort2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort alphanumeric strings with enhanced options — sort2","text":"x Vector sorted. decreasing logical.  sort increasing decreasing? Note descending=TRUE reverses meanings na.last blanks.last. na.last controlling treatment NA values.  TRUE, missing values data put last; FALSE, put first; NA, removed. blank.last controlling treatment blank values.  TRUE, blank values data put last; FALSE, put first; NA, removed. numeric.type either \"decimal\" (default) \"roman\".  numeric values represented decimal numbers (numeric.type=\"decimal\") Roman numerals (numeric.type=\"roman\")? roman.case one \"upper\", \"lower\", \"\".  roman numerals represented using capital letters ('IX') lower-case letters ('ix') ?","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/sort2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort alphanumeric strings with enhanced options — sort2","text":"vector sorted alphanumeric strings.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/sort2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort alphanumeric strings with enhanced options — sort2","text":"","code":"# example code (AA <- paste0(\"V\", seq_len(12))) #>  [1] \"V1\"  \"V2\"  \"V3\"  \"V4\"  \"V5\"  \"V6\"  \"V7\"  \"V8\"  \"V9\"  \"V10\" \"V11\" \"V12\"  sort(x = AA) #>  [1] \"V1\"  \"V10\" \"V11\" \"V12\" \"V2\"  \"V3\"  \"V4\"  \"V5\"  \"V6\"  \"V7\"  \"V8\"  \"V9\"   IASDT.R::sort2(x = AA) #>  [1] \"V1\"  \"V2\"  \"V3\"  \"V4\"  \"V5\"  \"V6\"  \"V7\"  \"V8\"  \"V9\"  \"V10\" \"V11\" \"V12\""},{"path":"https://biodt.github.io/IASDT.R/reference/source_silent.html","id":null,"dir":"Reference","previous_headings":"","what":"Silently source R script with optional message and warning suppression — source_silent","title":"Silently source R script with optional message and warning suppression — source_silent","text":"function sources R script file options suppress messages /warnings. useful running scripts generate lot console output needed.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/source_silent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silently source R script with optional message and warning suppression — source_silent","text":"","code":"source_silent(file, messages = TRUE, warnings = TRUE, ...)"},{"path":"https://biodt.github.io/IASDT.R/reference/source_silent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Silently source R script with optional message and warning suppression — source_silent","text":"file Character. Path file sourced. messages Logical. TRUE (default), messages generated script shown. FALSE, messages suppressed. warnings Logical. TRUE (default), warnings generated script shown. FALSE, warnings suppressed. ... Additional arguments passed source function.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/source_silent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Silently source R script with optional message and warning suppression — source_silent","text":"used side effect sourcing file optional suppression messages warnings.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/source_silent.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Silently source R script with optional message and warning suppression — source_silent","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_df_to_chunks.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a data.frame into smaller chunks — split_df_to_chunks","title":"Split a data.frame into smaller chunks — split_df_to_chunks","text":"function divides data.frame smaller chunks based specified number rows per chunk (chunk_size) specified number chunks (n_chunks). neither provided, defaults splitting data.frame  minimum 5 chunks less data.frame fewer 5 rows. function ensures data evenly distributed among chunks much possible.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_df_to_chunks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a data.frame into smaller chunks — split_df_to_chunks","text":"","code":"split_df_to_chunks(   data = NULL,   chunk_size = NULL,   n_chunks = NULL,   prefix = \"Chunk\" )"},{"path":"https://biodt.github.io/IASDT.R/reference/split_df_to_chunks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a data.frame into smaller chunks — split_df_to_chunks","text":"data data.frame. data.frame split chunks. chunk_size Integer. Number rows chunk contain. must positive integer less number rows data. n_chunks Integer. Number chunks split data.frame . must positive integer. prefix Character. Prefix names chunks. Default \"Chunk\".","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_df_to_chunks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a data.frame into smaller chunks — split_df_to_chunks","text":"list data.frames, data.frame represents chunk original data.frame. names list elements constructed using prefix parameter followed underscore chunk number (e.g., \"Chunk_1\", \"Chunk_2\", ...).","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_df_to_chunks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split a data.frame into smaller chunks — split_df_to_chunks","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_df_to_chunks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a data.frame into smaller chunks — split_df_to_chunks","text":"","code":"split_df_to_chunks(mtcars, chunk_size = 16) #> $Chunk_1 #> # A tibble: 16 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> 11  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4 #> 12  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3 #> 13  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 #> 14  15.2     8  276.   180  3.07  3.78  18       0     0     3     3 #> 15  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4 #> 16  10.4     8  460    215  3     5.42  17.8     0     0     3     4 #>  #> $Chunk_2 #> # A tibble: 16 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  14.7     8 440     230  3.23  5.34  17.4     0     0     3     4 #>  2  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  3  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  4  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #>  5  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #>  6  15.5     8 318     150  2.76  3.52  16.9     0     0     3     2 #>  7  15.2     8 304     150  3.15  3.44  17.3     0     0     3     2 #>  8  13.3     8 350     245  3.73  3.84  15.4     0     0     3     4 #>  9  19.2     8 400     175  3.08  3.84  17.0     0     0     3     2 #> 10  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #> 11  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #> 12  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #> 13  15.8     8 351     264  4.22  3.17  14.5     0     1     5     4 #> 14  19.7     6 145     175  3.62  2.77  15.5     0     1     5     6 #> 15  15       8 301     335  3.54  3.57  14.6     0     1     5     8 #> 16  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 #>   # -------------------------------------------  split_df_to_chunks(mtcars, n_chunks = 3) #> $Chunk_1 #> # A tibble: 11 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> 11  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4 #>  #> $Chunk_2 #> # A tibble: 11 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  16.4     8 276.    180  3.07  4.07  17.4     0     0     3     3 #>  2  17.3     8 276.    180  3.07  3.73  17.6     0     0     3     3 #>  3  15.2     8 276.    180  3.07  3.78  18       0     0     3     3 #>  4  10.4     8 472     205  2.93  5.25  18.0     0     0     3     4 #>  5  10.4     8 460     215  3     5.42  17.8     0     0     3     4 #>  6  14.7     8 440     230  3.23  5.34  17.4     0     0     3     4 #>  7  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  8  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  9  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #> 10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #> 11  15.5     8 318     150  2.76  3.52  16.9     0     0     3     2 #>  #> $Chunk_3 #> # A tibble: 10 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  15.2     8 304     150  3.15  3.44  17.3     0     0     3     2 #>  2  13.3     8 350     245  3.73  3.84  15.4     0     0     3     4 #>  3  19.2     8 400     175  3.08  3.84  17.0     0     0     3     2 #>  4  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  5  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #>  6  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #>  7  15.8     8 351     264  4.22  3.17  14.5     0     1     5     4 #>  8  19.7     6 145     175  3.62  2.77  15.5     0     1     5     6 #>  9  15       8 301     335  3.54  3.57  14.6     0     1     5     8 #> 10  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 #>   # -------------------------------------------  split_df_to_chunks(mtcars, n_chunks = 3, prefix = \"T\") #> $T_1 #> # A tibble: 11 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> 11  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4 #>  #> $T_2 #> # A tibble: 11 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  16.4     8 276.    180  3.07  4.07  17.4     0     0     3     3 #>  2  17.3     8 276.    180  3.07  3.73  17.6     0     0     3     3 #>  3  15.2     8 276.    180  3.07  3.78  18       0     0     3     3 #>  4  10.4     8 472     205  2.93  5.25  18.0     0     0     3     4 #>  5  10.4     8 460     215  3     5.42  17.8     0     0     3     4 #>  6  14.7     8 440     230  3.23  5.34  17.4     0     0     3     4 #>  7  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  8  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  9  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #> 10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #> 11  15.5     8 318     150  2.76  3.52  16.9     0     0     3     2 #>  #> $T_3 #> # A tibble: 10 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  15.2     8 304     150  3.15  3.44  17.3     0     0     3     2 #>  2  13.3     8 350     245  3.73  3.84  15.4     0     0     3     4 #>  3  19.2     8 400     175  3.08  3.84  17.0     0     0     3     2 #>  4  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  5  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #>  6  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #>  7  15.8     8 351     264  4.22  3.17  14.5     0     1     5     4 #>  8  19.7     6 145     175  3.62  2.77  15.5     0     1     5     6 #>  9  15       8 301     335  3.54  3.57  14.6     0     1     5     8 #> 10  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 #>"},{"path":"https://biodt.github.io/IASDT.R/reference/split_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a raster object into a list of smaller rasters — split_raster","title":"Split a raster object into a list of smaller rasters — split_raster","text":"Split raster object list smaller rasters based specified numbers rows columns. can optionally save resulting rasters disk, plot , return just extents.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a raster object into a list of smaller rasters — split_raster","text":"","code":"split_raster(   raster = NULL,   n_columns = 4,   n_rows = 4,   save = FALSE,   save_path = \"\",   plot = FALSE,   extent_only = FALSE )"},{"path":"https://biodt.github.io/IASDT.R/reference/split_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a raster object into a list of smaller rasters — split_raster","text":"raster raster object split. NULL (default), function execute. n_columns, n_rows Integer. desired number columns rows split raster . Default 4 columns 4 rows. save Logical. Whether save split rasters disk. Default FALSE. save_path Character. Directory path split rasters saved save TRUE. directory exist, created. plot Logical. Whether plot split rasters. Default FALSE. extent_only Logical. TRUE, function returns extents split rasters instead raster data. Default FALSE.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a raster object into a list of smaller rasters — split_raster","text":"list raster objects extents split rasters, depending value extent_only parameter.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_raster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Split a raster object into a list of smaller rasters — split_raster","text":"Click ","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_raster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split a raster object into a list of smaller rasters — split_raster","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a raster object into a list of smaller rasters — split_raster","text":"","code":"library(raster) logo <- raster(system.file(\"external/rlogo.grd\", package = \"raster\")) plot(logo, axes = FALSE, legend = FALSE, bty = \"n\",      box = FALSE, main = \"Original raster layer\")  # --------------------------------------------------  # Split into 3 rows and 3 columns logoSplit <- split_raster(     raster = logo, n_columns = 3, n_rows = 3, plot = TRUE)   print(logoSplit) # a list object of 9 items #> [[1]] #> class      : RasterLayer  #> dimensions : 26, 34, 884  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 0, 34, 51, 77  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : red  #> values     : 0, 255  (min, max) #>  #>  #> [[2]] #> class      : RasterLayer  #> dimensions : 26, 34, 884  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 34, 68, 51, 77  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : red  #> values     : 0, 255  (min, max) #>  #>  #> [[3]] #> class      : RasterLayer  #> dimensions : 26, 33, 858  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 68, 101, 51, 77  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : red  #> values     : 32, 255  (min, max) #>  #>  #> [[4]] #> class      : RasterLayer  #> dimensions : 26, 34, 884  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 0, 34, 25, 51  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : red  #> values     : 0, 255  (min, max) #>  #>  #> [[5]] #> class      : RasterLayer  #> dimensions : 26, 34, 884  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 34, 68, 25, 51  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : red  #> values     : 0, 255  (min, max) #>  #>  #> [[6]] #> class      : RasterLayer  #> dimensions : 26, 33, 858  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 68, 101, 25, 51  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : red  #> values     : 0, 255  (min, max) #>  #>  #> [[7]] #> class      : RasterLayer  #> dimensions : 25, 34, 850  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 0, 34, 0, 25  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : red  #> values     : 37, 255  (min, max) #>  #>  #> [[8]] #> class      : RasterLayer  #> dimensions : 25, 34, 850  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 34, 68, 0, 25  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : red  #> values     : 0, 255  (min, max) #>  #>  #> [[9]] #> class      : RasterLayer  #> dimensions : 25, 33, 825  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 68, 101, 0, 25  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : red  #> values     : 0, 255  (min, max) #>  #>   # --------------------------------------------------  # Merging split maps again logoSplit$fun <- mean logoSplit$na.rm <- TRUE logoSplit2 <- do.call(mosaic, logoSplit) par(mfrow = c(1, 1)) plot(logoSplit2, axes = FALSE, legend = FALSE, bty = \"n\",      box = FALSE, main = \"Merged raster layers\")   print({logoSplit2 - logo}) # No value difference! #> class      : RasterLayer  #> dimensions : 77, 101, 7777  (nrow, ncol, ncell) #> resolution : 1, 1  (x, y) #> extent     : 0, 101, 0, 77  (xmin, xmax, ymin, ymax) #> crs        : +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : layer  #> values     : 0, 0  (min, max) #>   # --------------------------------------------------  logoSplit <- split_raster(    logo, n_columns = 3, n_rows = 3, extent_only = TRUE) print(logoSplit) #> [[1]] #> class      : Extent  #> xmin       : 0  #> xmax       : 34  #> ymin       : 51  #> ymax       : 77  #>  #> [[2]] #> class      : Extent  #> xmin       : 34  #> xmax       : 68  #> ymin       : 51  #> ymax       : 77  #>  #> [[3]] #> class      : Extent  #> xmin       : 68  #> xmax       : 102  #> ymin       : 51  #> ymax       : 77  #>  #> [[4]] #> class      : Extent  #> xmin       : 0  #> xmax       : 34  #> ymin       : 25  #> ymax       : 51  #>  #> [[5]] #> class      : Extent  #> xmin       : 34  #> xmax       : 68  #> ymin       : 25  #> ymax       : 51  #>  #> [[6]] #> class      : Extent  #> xmin       : 68  #> xmax       : 102  #> ymin       : 25  #> ymax       : 51  #>  #> [[7]] #> class      : Extent  #> xmin       : 0  #> xmax       : 34  #> ymin       : -1  #> ymax       : 25  #>  #> [[8]] #> class      : Extent  #> xmin       : 34  #> xmax       : 68  #> ymin       : -1  #> ymax       : 25  #>  #> [[9]] #> class      : Extent  #> xmin       : 68  #> xmax       : 102  #> ymin       : -1  #> ymax       : 25  #>"},{"path":"https://biodt.github.io/IASDT.R/reference/split_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a vector into smaller chunks — split_vector","title":"Split a vector into smaller chunks — split_vector","text":"function divides given vector specified number smaller chunks. useful partitioning data manageable pieces parallel processing tasks.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a vector into smaller chunks — split_vector","text":"","code":"split_vector(vector = NULL, n_splits = NULL, prefix = \"Chunk\")"},{"path":"https://biodt.github.io/IASDT.R/reference/split_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a vector into smaller chunks — split_vector","text":"vector numeric character vector want split. n_splits Integer. Number chunks split vector . must exceed length vector. prefix Character. prefix names chunks returned list. Defaults \"Chunk\".","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a vector into smaller chunks — split_vector","text":"list vectors, vector represents chunk original vector. names list elements generated using specified prefix followed underscore chunk number.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_vector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split a vector into smaller chunks — split_vector","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/split_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a vector into smaller chunks — split_vector","text":"","code":"split_vector(vector = seq_len(100), n_splits = 3) #> $Chunk_1 #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 #>  #> $Chunk_2 #>  [1] 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #> [26] 60 61 62 63 64 65 66 67 #>  #> $Chunk_3 #>  [1]  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86 #> [20]  87  88  89  90  91  92  93  94  95  96  97  98  99 100 #>   # -------------------------------------------  split_vector(vector = seq_len(100), n_splits = 2, prefix = \"T\") #> $T_1 #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #>  #> $T_2 #>  [1]  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 #> [20]  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88 #> [39]  89  90  91  92  93  94  95  96  97  98  99 100 #>"},{"path":"https://biodt.github.io/IASDT.R/reference/system_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a system command in a cross-platform manner — system_command","title":"Run a system command in a cross-platform manner — system_command","text":"function executes system command, using either shell Windows system Linux. allows output command captured R object.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/system_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a system command in a cross-platform manner — system_command","text":"","code":"system_command(command, R_object = TRUE, ...)"},{"path":"https://biodt.github.io/IASDT.R/reference/system_command.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a system command in a cross-platform manner — system_command","text":"command Character. bash command executed. R_object Logical. Whether capture output command R object. TRUE (Default), output captured; FALSE, output printed console. ... Additional arguments passed either shell system function, depending operating system.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/system_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a system command in a cross-platform manner — system_command","text":"Depending value R_object, either output executed command R object NULL R_object FALSE output printed console.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/system_command.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run a system command in a cross-platform manner — system_command","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/system_command.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a system command in a cross-platform manner — system_command","text":"","code":"# print working directory IASDT.R::system_command(\"pwd\") #> [1] \"/home/runner/work/IASDT.R/IASDT.R/docs/reference\"  # first 5 files on the working directory (A <- IASDT.R::system_command(\"ls | head -n 5\")) #> [1] \"Apply_functions-1.png\" \"Apply_functions-2.png\" \"Apply_functions-3.png\" #> [4] \"Apply_functions-4.png\" \"Apply_functions.html\"   (A <- IASDT.R::system_command(\"ls | head -n 5\", R_object = FALSE)) #> [1] 0"},{"path":"https://biodt.github.io/IASDT.R/reference/text_to_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract longitude and latitude from string — text_to_coordinates","title":"Extract longitude and latitude from string — text_to_coordinates","text":"Extract longitude latitude string representing geographical point format \"POINT (longitude latitude)\" converts two-column tibble containing longitude latitude numeric values. names columns resulting tibble can customized. default names longitude latitude columns \"Longitude\" \"Latitude\", respectively.","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/text_to_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract longitude and latitude from string — text_to_coordinates","text":"","code":"text_to_coordinates(text = NULL, name_x = \"Longitude\", name_y = \"Latitude\")"},{"path":"https://biodt.github.io/IASDT.R/reference/text_to_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract longitude and latitude from string — text_to_coordinates","text":"text Character. Coordinates format \"POINT (longitude latitude)\". parameter required NULL. name_x, name_y Character. Name used longitude Longitude columns output tibble. Defaults \"Longitude\" \"Latitude\".","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/text_to_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract longitude and latitude from string — text_to_coordinates","text":"tibble two columns containing longitude latitude values extracted input string. names columns determined name_x name_y parameters. names provided, default names (\"Longitude\" \"Latitude\") used. two column tibble Longitude & Latitude","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/text_to_coordinates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract longitude and latitude from string — text_to_coordinates","text":"Ahmed El-Gabbas","code":""},{"path":"https://biodt.github.io/IASDT.R/reference/text_to_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract longitude and latitude from string — text_to_coordinates","text":"","code":"c(\"POINT (11.761 46.286)\", \"POINT (14.8336 42.0422)\",   \"POINT (16.179999 38.427214)\") %>%  lapply(text_to_coordinates) #> [[1]] #> # A tibble: 1 × 2 #>   Longitude Latitude #>       <dbl>    <dbl> #> 1      11.8     46.3 #>  #> [[2]] #> # A tibble: 1 × 2 #>   Longitude Latitude #>       <dbl>    <dbl> #> 1      14.8     42.0 #>  #> [[3]] #> # A tibble: 1 × 2 #>   Longitude Latitude #>       <dbl>    <dbl> #> 1      16.2     38.4 #>   c(\"POINT (11.761 46.286)\", \"POINT (14.8336 42.0422)\",   \"POINT (16.179999 38.427214)\") %>%  lapply(text_to_coordinates, name_x = \"Long\", name_y = \"Lat\") #> [[1]] #> # A tibble: 1 × 2 #>    Long   Lat #>   <dbl> <dbl> #> 1  11.8  46.3 #>  #> [[2]] #> # A tibble: 1 × 2 #>    Long   Lat #>   <dbl> <dbl> #> 1  14.8  42.0 #>  #> [[3]] #> # A tibble: 1 × 2 #>    Long   Lat #>   <dbl> <dbl> #> 1  16.2  38.4 #>"}]
